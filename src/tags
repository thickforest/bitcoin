!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	cryptopp/sha.cpp	147;"	d	file:
ALL	ui.h	/^        ALL = 0,$/;"	e	enum:CMainFrame::__anon6
ANONYMOUS_NAMESPACE_BEGIN	cryptopp/config.h	86;"	d
ARRAYLEN	util.h	47;"	d
AS1	cryptopp/cpu.h	113;"	d
AS1	cryptopp/cpu.h	128;"	d
AS1	cryptopp/cpu.h	138;"	d
AS2	cryptopp/cpu.h	114;"	d
AS2	cryptopp/cpu.h	129;"	d
AS2	cryptopp/cpu.h	139;"	d
AS3	cryptopp/cpu.h	115;"	d
AS3	cryptopp/cpu.h	130;"	d
AS3	cryptopp/cpu.h	140;"	d
ASC	cryptopp/cpu.h	119;"	d
ASC	cryptopp/cpu.h	134;"	d
ASC	cryptopp/cpu.h	144;"	d
ASJ	cryptopp/cpu.h	118;"	d
ASJ	cryptopp/cpu.h	133;"	d
ASJ	cryptopp/cpu.h	143;"	d
ASL	cryptopp/cpu.h	117;"	d
ASL	cryptopp/cpu.h	132;"	d
ASL	cryptopp/cpu.h	142;"	d
ASM_MOD	cryptopp/cpu.h	153;"	d
ASM_MOD	cryptopp/cpu.h	157;"	d
ASN1Object	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE ASN1Object$/;"	c
ASS	cryptopp/cpu.h	116;"	d
ASS	cryptopp/cpu.h	131;"	d
ASS	cryptopp/cpu.h	141;"	d
AS_HEX	cryptopp/cpu.h	120;"	d
AS_HEX	cryptopp/cpu.h	136;"	d
AS_HEX	cryptopp/cpu.h	146;"	d
AS_JCXZ	cryptopp/cpu.h	182;"	d
AS_JCXZ	cryptopp/cpu.h	220;"	d
AS_POP_IF86	cryptopp/cpu.h	181;"	d
AS_POP_IF86	cryptopp/cpu.h	219;"	d
AS_PUSH_IF86	cryptopp/cpu.h	180;"	d
AS_PUSH_IF86	cryptopp/cpu.h	218;"	d
AS_REG_1	cryptopp/cpu.h	163;"	d
AS_REG_1	cryptopp/cpu.h	185;"	d
AS_REG_1	cryptopp/cpu.h	200;"	d
AS_REG_1d	cryptopp/cpu.h	170;"	d
AS_REG_1d	cryptopp/cpu.h	192;"	d
AS_REG_1d	cryptopp/cpu.h	207;"	d
AS_REG_2	cryptopp/cpu.h	164;"	d
AS_REG_2	cryptopp/cpu.h	186;"	d
AS_REG_2	cryptopp/cpu.h	201;"	d
AS_REG_2d	cryptopp/cpu.h	171;"	d
AS_REG_2d	cryptopp/cpu.h	193;"	d
AS_REG_2d	cryptopp/cpu.h	208;"	d
AS_REG_3	cryptopp/cpu.h	165;"	d
AS_REG_3	cryptopp/cpu.h	187;"	d
AS_REG_3	cryptopp/cpu.h	202;"	d
AS_REG_3d	cryptopp/cpu.h	172;"	d
AS_REG_3d	cryptopp/cpu.h	194;"	d
AS_REG_3d	cryptopp/cpu.h	209;"	d
AS_REG_4	cryptopp/cpu.h	166;"	d
AS_REG_4	cryptopp/cpu.h	188;"	d
AS_REG_4	cryptopp/cpu.h	203;"	d
AS_REG_4d	cryptopp/cpu.h	173;"	d
AS_REG_4d	cryptopp/cpu.h	195;"	d
AS_REG_4d	cryptopp/cpu.h	210;"	d
AS_REG_5	cryptopp/cpu.h	167;"	d
AS_REG_5	cryptopp/cpu.h	189;"	d
AS_REG_5	cryptopp/cpu.h	204;"	d
AS_REG_5d	cryptopp/cpu.h	174;"	d
AS_REG_5d	cryptopp/cpu.h	196;"	d
AS_REG_5d	cryptopp/cpu.h	211;"	d
AS_REG_6	cryptopp/cpu.h	168;"	d
AS_REG_6	cryptopp/cpu.h	190;"	d
AS_REG_6	cryptopp/cpu.h	205;"	d
AS_REG_6d	cryptopp/cpu.h	175;"	d
AS_REG_6d	cryptopp/cpu.h	197;"	d
AS_REG_6d	cryptopp/cpu.h	212;"	d
AS_REG_7	cryptopp/cpu.h	169;"	d
AS_REG_7	cryptopp/cpu.h	191;"	d
AS_REG_7	cryptopp/cpu.h	206;"	d
AS_REG_7d	cryptopp/cpu.h	176;"	d
AS_REG_7d	cryptopp/cpu.h	198;"	d
AS_REG_7d	cryptopp/cpu.h	213;"	d
AS_XMM_OUTPUT4	cryptopp/cpu.h	224;"	d
AbandonRequests	net.cpp	/^void AbandonRequests(void (*fn)(void*, CDataStream&), void* param1)$/;"	f
AbortMessage	net.h	/^    void AbortMessage()$/;"	f	class:CNode
AcceptBlock	main.cpp	/^bool CBlock::AcceptBlock()$/;"	f	class:CBlock
AcceptToMemoryPool	main.cpp	/^bool CMerkleTx::AcceptToMemoryPool()$/;"	f	class:CMerkleTx
AcceptToMemoryPool	main.cpp	/^bool CMerkleTx::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs)$/;"	f	class:CMerkleTx
AcceptToMemoryPool	main.cpp	/^bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMissingInputs)$/;"	f	class:CTransaction
AcceptToMemoryPool	main.cpp	/^bool CTransaction::AcceptToMemoryPool(bool fCheckInputs, bool* pfMissingInputs)$/;"	f	class:CTransaction
AcceptWalletTransaction	main.cpp	/^bool CWalletTx::AcceptWalletTransaction() $/;"	f	class:CWalletTx
AcceptWalletTransaction	main.cpp	/^bool CWalletTx::AcceptWalletTransaction(CTxDB& txdb, bool fCheckInputs)$/;"	f	class:CWalletTx
AccessMaterial	cryptopp/cryptlib.h	/^	CryptoMaterial & AccessMaterial() {return AccessCryptoParameters();}$/;"	f	class:KeyAgreementAlgorithm
AccessMaterial	cryptopp/cryptlib.h	/^	CryptoMaterial & AccessMaterial() {return AccessPrivateKey();}$/;"	f	class:PrivateKeyAlgorithm
AccessMaterial	cryptopp/cryptlib.h	/^	CryptoMaterial & AccessMaterial() {return AccessPublicKey();}$/;"	f	class:PublicKeyAlgorithm
AccountFromValue	rpc.cpp	/^string AccountFromValue(const Value& value)$/;"	f
AcentryToJSON	rpc.cpp	/^void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Array& ret)$/;"	f
AddAddress	net.cpp	/^bool AddAddress(CAddress addr, int64 nTimePenalty, CAddrDB *pAddrDB)$/;"	f
AddAddressKnown	net.h	/^    void AddAddressKnown(const CAddress& addr)$/;"	f	class:CNode
AddCryptedKey	keystore.cpp	/^bool CCryptoKeyStore::AddCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)$/;"	f	class:CCryptoKeyStore
AddCryptedKey	wallet.cpp	/^bool CWallet::AddCryptedKey(const vector<unsigned char> &vchPubKey, const vector<unsigned char> &vchCryptedSecret)$/;"	f	class:CWallet
AddInventoryKnown	net.h	/^    void AddInventoryKnown(const CInv& inv)$/;"	f	class:CNode
AddKey	keystore.cpp	/^bool CBasicKeyStore::AddKey(const CKey& key)$/;"	f	class:CBasicKeyStore
AddKey	keystore.cpp	/^bool CCryptoKeyStore::AddKey(const CKey& key)$/;"	f	class:CCryptoKeyStore
AddKey	wallet.cpp	/^bool CWallet::AddKey(const CKey& key)$/;"	f	class:CWallet
AddOrphanTx	main.cpp	/^void static AddOrphanTx(const CDataStream& vMsg)$/;"	f	file:
AddRef	net.h	/^    CNode* AddRef(int64 nTimeout=0)$/;"	f	class:CNode
AddSupportingTransactions	wallet.cpp	/^void CWalletTx::AddSupportingTransactions(CTxDB& txdb)$/;"	f	class:CWalletTx
AddTimeData	util.cpp	/^void AddTimeData(unsigned int ip, int64 nTime)$/;"	f
AddToBlockIndex	main.cpp	/^bool CBlock::AddToBlockIndex(unsigned int nFile, unsigned int nBlockPos)$/;"	f	class:CBlock
AddToMemoryPoolUnchecked	main.cpp	/^bool CTransaction::AddToMemoryPoolUnchecked()$/;"	f	class:CTransaction
AddToWallet	wallet.cpp	/^bool CWallet::AddToWallet(const CWalletTx& wtxIn)$/;"	f	class:CWallet
AddToWalletIfInvolvingMe	wallet.cpp	/^bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate)$/;"	f	class:CWallet
AddTxIndex	db.cpp	/^bool CTxDB::AddTxIndex(const CTransaction& tx, const CDiskTxPos& pos, int nHeight)$/;"	f	class:CTxDB
AddressCurrentlyConnected	net.cpp	/^void AddressCurrentlyConnected(const CAddress& addr)$/;"	f
AdvertRemoveSource	net.h	/^void AdvertRemoveSource(CNode* pfrom, unsigned int nChannel, unsigned int nHops, T& obj)$/;"	f
AdvertStartPublish	net.h	/^void AdvertStartPublish(CNode* pfrom, unsigned int nChannel, unsigned int nHops, T& obj)$/;"	f
AdvertStopPublish	net.h	/^void AdvertStopPublish(CNode* pfrom, unsigned int nChannel, unsigned int nHops, T& obj)$/;"	f
AffinityBugWorkaround	util.h	/^inline bool AffinityBugWorkaround(void(*pfn)(void*))$/;"	f
Algorithm	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE Algorithm : public Clonable$/;"	c
AlgorithmName	cryptopp/cryptlib.h	/^	virtual std::string AlgorithmName() const {return "unknown";}$/;"	f	class:Algorithm
AlignedSecByteBlock	cryptopp/secblock.h	/^typedef SecBlock<byte, AllocatorWithCleanup<byte, true> > AlignedSecByteBlock;$/;"	t
AllocatorBase	cryptopp/secblock.h	/^class AllocatorBase$/;"	c
AllocatorWithCleanup	cryptopp/secblock.h	/^	AllocatorWithCleanup() {}$/;"	f	class:AllocatorWithCleanup
AllocatorWithCleanup	cryptopp/secblock.h	/^	template <class U, bool A> AllocatorWithCleanup(const AllocatorWithCleanup<U, A> &) {}$/;"	f	class:AllocatorWithCleanup
AllocatorWithCleanup	cryptopp/secblock.h	/^CRYPTOPP_DLL_TEMPLATE_CLASS AllocatorWithCleanup<byte>;$/;"	v
AllocatorWithCleanup	cryptopp/secblock.h	/^CRYPTOPP_DLL_TEMPLATE_CLASS AllocatorWithCleanup<word, true>;	\/\/ for Integer$/;"	v
AllocatorWithCleanup	cryptopp/secblock.h	/^CRYPTOPP_DLL_TEMPLATE_CLASS AllocatorWithCleanup<word16>;$/;"	v
AllocatorWithCleanup	cryptopp/secblock.h	/^CRYPTOPP_DLL_TEMPLATE_CLASS AllocatorWithCleanup<word32>;$/;"	v
AllocatorWithCleanup	cryptopp/secblock.h	/^CRYPTOPP_DLL_TEMPLATE_CLASS AllocatorWithCleanup<word64>;$/;"	v
AllocatorWithCleanup	cryptopp/secblock.h	/^class AllocatorWithCleanup : public AllocatorBase<T>$/;"	c
AllowFree	main.h	/^    static bool AllowFree(double dPriority)$/;"	f	class:CTransaction
AlreadyHave	main.cpp	/^bool static AlreadyHave(CTxDB& txdb, const CInv& inv)$/;"	f	file:
AmountFromValue	rpc.cpp	/^int64 AmountFromValue(const Value& value)$/;"	f
AnySubscribed	net.cpp	/^bool AnySubscribed(unsigned int nChannel)$/;"	f
AppInit	init.cpp	/^bool AppInit(int argc, char* argv[])$/;"	f
AppInit2	init.cpp	/^bool AppInit2(int argc, char* argv[])$/;"	f
AppendBlockFile	main.cpp	/^FILE* AppendBlockFile(unsigned int& nFileRet)$/;"	f
AppliesTo	main.h	/^    bool AppliesTo(int nVersion, std::string strSubVerIn) const$/;"	f	class:CAlert
AppliesToMe	main.h	/^    bool AppliesToMe() const$/;"	f	class:CAlert
Array	json/json_spirit_value.h	/^        typedef typename Config::Array_type Array;$/;"	t	class:json_spirit::Value_impl
Array	json/json_spirit_value.h	/^    typedef Config::Array_type  Array;$/;"	t	namespace:json_spirit
Array_type	json/json_spirit_reader_template.h	/^        typedef typename Config_type::Array_type Array_type;$/;"	t	class:json_spirit::Semantic_actions
Array_type	json/json_spirit_value.h	/^        typedef std::vector< Value_type > Array_type;$/;"	t	struct:json_spirit::Config_map
Array_type	json/json_spirit_value.h	/^        typedef std::vector< Value_type > Array_type;$/;"	t	struct:json_spirit::Config_vector
Array_type	json/json_spirit_writer_template.h	/^        typedef typename Config_type::Array_type Array_type;$/;"	t	class:json_spirit::Generator
AskFor	net.h	/^    void AskFor(const CInv& inv)$/;"	f	class:CNode
AssertValidKeyLength	cryptopp/cryptlib.h	/^	inline void AssertValidKeyLength(size_t length) const$/;"	f	class:SimpleKeyingInterface
Assign	cryptopp/secblock.h	/^	void Assign(const SecBlock<T, A> &t)$/;"	f	class:SecBlock
Assign	cryptopp/secblock.h	/^	void Assign(const T *t, size_type len)$/;"	f	class:SecBlock
AsymmetricAlgorithm	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE AsymmetricAlgorithm : public Algorithm$/;"	c
Attachable	cryptopp/cryptlib.h	/^		virtual bool Attachable() {return false;}$/;"	f	class:BufferedTransformation
AttachedTransformation	cryptopp/cryptlib.h	/^		virtual BufferedTransformation *AttachedTransformation() {assert(!Attachable()); return 0;}$/;"	f	class:BufferedTransformation
AttachedTransformation	cryptopp/cryptlib.h	/^		virtual const BufferedTransformation *AttachedTransformation() const$/;"	f	class:BufferedTransformation
AuthenticatedKeyAgreementDomain	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE AuthenticatedKeyAgreementDomain : public KeyAgreementAlgorithm$/;"	c
AuthenticatedSymmetricCipher	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE AuthenticatedSymmetricCipher : public MessageAuthenticationCode, public StreamTransformation$/;"	c
B	cryptopp/sha.cpp	146;"	d	file:
BASE	cryptopp/sha.cpp	158;"	d	file:
BEGIN	util.h	43;"	d
BERDecode	cryptopp/cryptlib.h	/^	void BERDecode(BufferedTransformation &bt)$/;"	f	class:AsymmetricAlgorithm
BERDecodeErr	cryptopp/cryptlib.h	/^	BERDecodeErr() : InvalidArgument("BER decode error") {}$/;"	f	class:BERDecodeErr
BERDecodeErr	cryptopp/cryptlib.h	/^	BERDecodeErr(const std::string &s) : InvalidArgument(s) {}$/;"	f	class:BERDecodeErr
BERDecodeErr	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL BERDecodeErr : public InvalidArgument$/;"	c
BEREncode	cryptopp/cryptlib.h	/^	virtual void BEREncode(BufferedTransformation &bt) const {DEREncode(bt);}$/;"	f	class:ASN1Object
BIG_ENDIAN_ORDER	cryptopp/cryptlib.h	/^enum ByteOrder {LITTLE_ENDIAN_ORDER = 0, BIG_ENDIAN_ORDER = 1};$/;"	e	enum:ByteOrder
BITCOIN_BASE58_H	base58.h	16;"	d
BITCOIN_BIGNUM_H	bignum.h	6;"	d
BITCOIN_DB_H	db.h	6;"	d
BITCOIN_INIT_H	init.h	6;"	d
BITCOIN_IRC_H	irc.h	6;"	d
BITCOIN_KEYSTORE_H	keystore.h	6;"	d
BITCOIN_KEY_H	key.h	6;"	d
BITCOIN_MAIN_H	main.h	6;"	d
BITCOIN_NET_H	net.h	6;"	d
BITCOIN_NOUI_H	noui.h	6;"	d
BITCOIN_SERIALIZE_H	serialize.h	6;"	d
BITCOIN_STRLCPY_H	strlcpy.h	17;"	d
BITCOIN_UINT256_H	uint256.h	6;"	d
BITCOIN_UI_H	ui.h	6;"	d
BITCOIN_UTIL_H	util.h	6;"	d
BITCOIN_WALLET_H	wallet.h	6;"	d
BLOCKING_RNG_AVAILABLE	cryptopp/config.h	398;"	d
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)$/;"	f
BOOST_AUTO_TEST_CASE	test/script_tests.cpp	/^BOOST_AUTO_TEST_CASE(script_PushData)$/;"	f
BOOST_AUTO_TEST_CASE	test/transaction_tests.cpp	/^BOOST_AUTO_TEST_CASE(basic_transaction_tests)$/;"	f
BOOST_AUTO_TEST_CASE	test/uint160_tests.cpp	/^BOOST_AUTO_TEST_CASE(uint160_equality)$/;"	f
BOOST_AUTO_TEST_CASE	test/uint256_tests.cpp	/^BOOST_AUTO_TEST_CASE(uint256_equality)$/;"	f
BOOST_TEST_MODULE	test/test_bitcoin.cpp	1;"	d	file:
BSD	headers.h	27;"	d
BT_DontIncrementInOutPointers	cryptopp/cryptlib.h	/^	enum {BT_InBlockIsCounter=1, BT_DontIncrementInOutPointers=2, BT_XorInput=4, BT_ReverseDirection=8} FlagsForAdvancedProcessBlocks;$/;"	e	enum:BlockTransformation::__anon2
BT_InBlockIsCounter	cryptopp/cryptlib.h	/^	enum {BT_InBlockIsCounter=1, BT_DontIncrementInOutPointers=2, BT_XorInput=4, BT_ReverseDirection=8} FlagsForAdvancedProcessBlocks;$/;"	e	enum:BlockTransformation::__anon2
BT_ReverseDirection	cryptopp/cryptlib.h	/^	enum {BT_InBlockIsCounter=1, BT_DontIncrementInOutPointers=2, BT_XorInput=4, BT_ReverseDirection=8} FlagsForAdvancedProcessBlocks;$/;"	e	enum:BlockTransformation::__anon2
BT_XorInput	cryptopp/cryptlib.h	/^	enum {BT_InBlockIsCounter=1, BT_DontIncrementInOutPointers=2, BT_XorInput=4, BT_ReverseDirection=8} FlagsForAdvancedProcessBlocks;$/;"	e	enum:BlockTransformation::__anon2
BackupWallet	db.cpp	/^bool BackupWallet(const CWallet& wallet, const string& strDest)$/;"	f
BadState	cryptopp/cryptlib.h	/^		explicit BadState(const std::string &name, const char *function, const char *state) : Exception(OTHER_ERROR, name + ": " + function + " was called before " + state) {}$/;"	f	class:AuthenticatedSymmetricCipher::BadState
BadState	cryptopp/cryptlib.h	/^		explicit BadState(const std::string &name, const char *message) : Exception(OTHER_ERROR, name + ": " + message) {}$/;"	f	class:AuthenticatedSymmetricCipher::BadState
BadState	cryptopp/cryptlib.h	/^	class BadState : public Exception$/;"	c	class:AuthenticatedSymmetricCipher
Beep	util.h	115;"	d
BeginMessage	net.h	/^    void BeginMessage(const char* pszCommand)$/;"	f	class:CNode
BigEndian	cryptopp/cryptlib.h	/^typedef EnumToType<ByteOrder, BIG_ENDIAN_ORDER> BigEndian;$/;"	t
BindListenPort	net.cpp	/^bool BindListenPort(string& strError)$/;"	f
BitPrecision	cryptopp/misc.h	/^unsigned int BitPrecision(const T &value)$/;"	f
BitReverse	cryptopp/misc.h	/^inline T BitReverse(T value)$/;"	f
BitReverse	cryptopp/misc.h	/^inline byte BitReverse(byte value)$/;"	f
BitReverse	cryptopp/misc.h	/^inline word16 BitReverse(word16 value)$/;"	f
BitReverse	cryptopp/misc.h	/^inline word32 BitReverse(word32 value)$/;"	f
BitReverse	cryptopp/misc.h	/^inline word64 BitReverse(word64 value)$/;"	f
BitcoinMiner	main.cpp	/^void static BitcoinMiner(CWallet *pwallet)$/;"	f	file:
BitsToBytes	cryptopp/misc.h	/^inline size_t BitsToBytes(size_t bitCount)$/;"	f
BitsToDwords	cryptopp/misc.h	/^inline size_t BitsToDwords(size_t bitCount)$/;"	f
BitsToWords	cryptopp/misc.h	/^inline size_t BitsToWords(size_t bitCount)$/;"	f
BlockCipher	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE BlockCipher : public SimpleKeyingInterface, public BlockTransformation$/;"	c
BlockGetAndPut	cryptopp/misc.h	/^struct BlockGetAndPut$/;"	s
BlockSize	cryptopp/cryptlib.h	/^	virtual unsigned int BlockSize() const {return 0;}$/;"	f	class:HashTransformation
BlockTransformation	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE BlockTransformation : public Algorithm$/;"	c
BlockingInputOnly	cryptopp/cryptlib.h	/^			{BlockingInputOnly(const std::string &s) : NotImplemented(s + ": Nonblocking input is not implemented by this object.") {}};$/;"	f	struct:BufferedTransformation::BlockingInputOnly
BlockingInputOnly	cryptopp/cryptlib.h	/^		struct BlockingInputOnly : public NotImplemented$/;"	s	class:BufferedTransformation
BufferedTransformation	cryptopp/cryptlib.h	/^	BufferedTransformation() : Algorithm(false) {}$/;"	f	class:BufferedTransformation
BufferedTransformation	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE BufferedTransformation : public Algorithm, public Waitable$/;"	c
BuildMerkleTree	main.h	/^    uint256 BuildMerkleTree() const$/;"	f	class:CBlock
ByteOrder	cryptopp/cryptlib.h	/^enum ByteOrder {LITTLE_ENDIAN_ORDER = 0, BIG_ENDIAN_ORDER = 1};$/;"	g
BytePrecision	cryptopp/misc.h	/^unsigned int BytePrecision(const T &value)$/;"	f
BytePtr	cryptopp/secblock.h	/^	byte * BytePtr() {return (byte *)m_ptr;}$/;"	f	class:SecBlock
BytePtr	cryptopp/secblock.h	/^	const byte * BytePtr() const {return (const byte *)m_ptr;}$/;"	f	class:SecBlock
ByteReverse	cryptopp/misc.h	/^inline byte ByteReverse(byte value)$/;"	f
ByteReverse	cryptopp/misc.h	/^inline word16 ByteReverse(word16 value)$/;"	f
ByteReverse	cryptopp/misc.h	/^inline word32 ByteReverse(word32 value)$/;"	f
ByteReverse	cryptopp/misc.h	/^inline word64 ByteReverse(word64 value)$/;"	f
ByteReverse	cryptopp/misc.h	/^void ByteReverse(T *out, const T *in, size_t byteCount)$/;"	f
BytesToWords	cryptopp/misc.h	/^inline size_t BytesToWords(size_t byteCount)$/;"	f
C	cryptopp/sha.cpp	145;"	d	file:
CANNOT_FLUSH	cryptopp/cryptlib.h	/^		CANNOT_FLUSH,$/;"	e	enum:Exception::ErrorType
CATCH_PRINT_EXCEPTION	util.h	487;"	d
CAboutDialog	ui.cpp	/^CAboutDialog::CAboutDialog(wxWindow* parent) : CAboutDialogBase(parent)$/;"	f	class:CAboutDialog
CAboutDialog	ui.h	/^class CAboutDialog : public CAboutDialogBase$/;"	c
CAboutDialogBase	uibase.cpp	/^CAboutDialogBase::CAboutDialogBase( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style )$/;"	f	class:CAboutDialogBase
CAboutDialogBase	uibase.h	/^class CAboutDialogBase : public wxDialog $/;"	c
CAccount	wallet.h	/^    CAccount()$/;"	f	class:CAccount
CAccount	wallet.h	/^class CAccount$/;"	c
CAccountingEntry	wallet.h	/^    CAccountingEntry()$/;"	f	class:CAccountingEntry
CAccountingEntry	wallet.h	/^class CAccountingEntry$/;"	c
CAddrDB	db.h	/^    CAddrDB(const char* pszMode="r+") : CDB("addr.dat", pszMode) { }$/;"	f	class:CAddrDB
CAddrDB	db.h	/^class CAddrDB : public CDB$/;"	c
CAddress	protocol.cpp	/^CAddress::CAddress()$/;"	f	class:CAddress
CAddress	protocol.cpp	/^CAddress::CAddress(const char* pszIn, bool fNameLookup, uint64 nServicesIn)$/;"	f	class:CAddress
CAddress	protocol.cpp	/^CAddress::CAddress(const char* pszIn, int portIn, bool fNameLookup, uint64 nServicesIn)$/;"	f	class:CAddress
CAddress	protocol.cpp	/^CAddress::CAddress(const struct sockaddr_in& sockaddr, uint64 nServicesIn)$/;"	f	class:CAddress
CAddress	protocol.cpp	/^CAddress::CAddress(std::string strIn, bool fNameLookup, uint64 nServicesIn)$/;"	f	class:CAddress
CAddress	protocol.cpp	/^CAddress::CAddress(std::string strIn, int portIn, bool fNameLookup, uint64 nServicesIn)$/;"	f	class:CAddress
CAddress	protocol.cpp	/^CAddress::CAddress(unsigned int ipIn, unsigned short portIn, uint64 nServicesIn)$/;"	f	class:CAddress
CAddress	protocol.h	/^class CAddress$/;"	c
CAddressBookDialog	ui.cpp	/^CAddressBookDialog::CAddressBookDialog(wxWindow* parent, const wxString& strInitSelected, int nPageIn, bool fDuringSendIn) : CAddressBookDialogBase(parent)$/;"	f	class:CAddressBookDialog
CAddressBookDialog	ui.h	/^class CAddressBookDialog : public CAddressBookDialogBase$/;"	c
CAddressBookDialogBase	uibase.cpp	/^CAddressBookDialogBase::CAddressBookDialogBase( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style )$/;"	f	class:CAddressBookDialogBase
CAddressBookDialogBase	uibase.h	/^class CAddressBookDialogBase : public wxDialog $/;"	c
CAlert	main.h	/^    CAlert()$/;"	f	class:CAlert
CAlert	main.h	/^class CAlert : public CUnsignedAlert$/;"	c
CAutoBN_CTX	bignum.h	/^    CAutoBN_CTX()$/;"	f	class:CAutoBN_CTX
CAutoBN_CTX	bignum.h	/^class CAutoBN_CTX$/;"	c
CAutoFile	serialize.h	/^    CAutoFile(FILE* filenew=NULL, int nTypeIn=SER_DISK, int nVersionIn=VERSION)$/;"	f	class:CAutoFile
CAutoFile	serialize.h	/^class CAutoFile$/;"	c
CBase58Data	base58.h	/^    CBase58Data()$/;"	f	class:CBase58Data
CBase58Data	base58.h	/^class CBase58Data$/;"	c
CBasicKeyStore	keystore.h	/^class CBasicKeyStore : public CKeyStore$/;"	c
CBigNum	bignum.h	/^    CBigNum()$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(char n)             { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(const CBigNum& b)$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(int n)              { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(int64 n)            { BN_init(this); setint64(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(long n)             { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(short n)            { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(uint64 n)           { BN_init(this); setuint64(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(unsigned char n)    { BN_init(this); setulong(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(unsigned int n)     { BN_init(this); setulong(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(unsigned long n)    { BN_init(this); setulong(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(unsigned short n)   { BN_init(this); setulong(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    explicit CBigNum(const std::vector<unsigned char>& vch)$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    explicit CBigNum(uint256 n) { BN_init(this); setuint256(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^class CBigNum : public BIGNUM$/;"	c
CBitcoinAddress	base58.h	/^    CBitcoinAddress()$/;"	f	class:CBitcoinAddress
CBitcoinAddress	base58.h	/^    CBitcoinAddress(const char* pszAddress)$/;"	f	class:CBitcoinAddress
CBitcoinAddress	base58.h	/^    CBitcoinAddress(const std::string& strAddress)$/;"	f	class:CBitcoinAddress
CBitcoinAddress	base58.h	/^    CBitcoinAddress(const std::vector<unsigned char>& vchPubKey)$/;"	f	class:CBitcoinAddress
CBitcoinAddress	base58.h	/^    CBitcoinAddress(uint160 hash160In)$/;"	f	class:CBitcoinAddress
CBitcoinAddress	base58.h	/^class CBitcoinAddress : public CBase58Data$/;"	c
CBlock	main.h	/^    CBlock()$/;"	f	class:CBlock
CBlock	main.h	/^class CBlock$/;"	c
CBlockIndex	main.h	/^    CBlockIndex()$/;"	f	class:CBlockIndex
CBlockIndex	main.h	/^    CBlockIndex(unsigned int nFileIn, unsigned int nBlockPosIn, CBlock& block)$/;"	f	class:CBlockIndex
CBlockIndex	main.h	/^class CBlockIndex$/;"	c
CBlockLocator	main.h	/^    CBlockLocator()$/;"	f	class:CBlockLocator
CBlockLocator	main.h	/^    explicit CBlockLocator(const CBlockIndex* pindex)$/;"	f	class:CBlockLocator
CBlockLocator	main.h	/^    explicit CBlockLocator(uint256 hashBlock)$/;"	f	class:CBlockLocator
CBlockLocator	main.h	/^class CBlockLocator$/;"	c
CCorruptAddress	wallet.cpp	/^class CCorruptAddress$/;"	c	file:
CCriticalBlock	util.h	/^    CCriticalBlock(CCriticalSection& csIn, const char* pszName, const char* pszFile, int nLine)$/;"	f	class:CCriticalBlock
CCriticalBlock	util.h	/^class CCriticalBlock$/;"	c
CCriticalSection	util.h	/^    explicit CCriticalSection() { }$/;"	f	class:CCriticalSection
CCriticalSection	util.h	/^class CCriticalSection$/;"	c
CCrypter	crypter.h	/^    CCrypter()$/;"	f	class:CCrypter
CCrypter	crypter.h	/^class CCrypter$/;"	c
CCryptoKeyStore	keystore.h	/^    CCryptoKeyStore() : fUseCrypto(false)$/;"	f	class:CCryptoKeyStore
CCryptoKeyStore	keystore.h	/^class CCryptoKeyStore : public CBasicKeyStore$/;"	c
CDB	db.cpp	/^CDB::CDB(const char* pszFile, const char* pszMode) : pdb(NULL)$/;"	f	class:CDB
CDB	db.h	/^class CDB$/;"	c
CDBInit	db.cpp	/^    CDBInit()$/;"	f	class:CDBInit
CDBInit	db.cpp	/^class CDBInit$/;"	c	file:
CDataStream	serialize.h	/^    CDataStream(const char* pbegin, const char* pend, int nTypeIn=SER_NETWORK, int nVersionIn=VERSION) : vch(pbegin, pend)$/;"	f	class:CDataStream
CDataStream	serialize.h	/^    CDataStream(const std::vector<char>& vchIn, int nTypeIn=SER_NETWORK, int nVersionIn=VERSION) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	serialize.h	/^    CDataStream(const std::vector<unsigned char>& vchIn, int nTypeIn=SER_NETWORK, int nVersionIn=VERSION) : vch((char*)&vchIn.begin()[0], (char*)&vchIn.end()[0])$/;"	f	class:CDataStream
CDataStream	serialize.h	/^    CDataStream(const vector_type& vchIn, int nTypeIn=SER_NETWORK, int nVersionIn=VERSION) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	serialize.h	/^    CDataStream(const_iterator pbegin, const_iterator pend, int nTypeIn=SER_NETWORK, int nVersionIn=VERSION) : vch(pbegin, pend)$/;"	f	class:CDataStream
CDataStream	serialize.h	/^    explicit CDataStream(int nTypeIn=SER_NETWORK, int nVersionIn=VERSION)$/;"	f	class:CDataStream
CDataStream	serialize.h	/^class CDataStream$/;"	c
CDiskBlockIndex	main.h	/^    CDiskBlockIndex()$/;"	f	class:CDiskBlockIndex
CDiskBlockIndex	main.h	/^    explicit CDiskBlockIndex(CBlockIndex* pindex) : CBlockIndex(*pindex)$/;"	f	class:CDiskBlockIndex
CDiskBlockIndex	main.h	/^class CDiskBlockIndex : public CBlockIndex$/;"	c
CDiskTxPos	main.h	/^    CDiskTxPos()$/;"	f	class:CDiskTxPos
CDiskTxPos	main.h	/^    CDiskTxPos(unsigned int nFileIn, unsigned int nBlockPosIn, unsigned int nTxPosIn)$/;"	f	class:CDiskTxPos
CDiskTxPos	main.h	/^class CDiskTxPos$/;"	c
CENT	main.h	/^static const int64 CENT = 1000000;$/;"	v
CFixedFieldString	serialize.h	/^    explicit CFixedFieldString(const std::string& str) : pcstr(&str), pstr(NULL) { }$/;"	f	class:CFixedFieldString
CFixedFieldString	serialize.h	/^    explicit CFixedFieldString(std::string& str) : pcstr(&str), pstr(&str) { }$/;"	f	class:CFixedFieldString
CFixedFieldString	serialize.h	/^class CFixedFieldString$/;"	c
CFlatData	serialize.h	/^    CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }$/;"	f	class:CFlatData
CFlatData	serialize.h	/^class CFlatData$/;"	c
CGetTextFromUserDialog	ui.h	/^    CGetTextFromUserDialog(wxWindow* parent,$/;"	f	class:CGetTextFromUserDialog
CGetTextFromUserDialog	ui.h	/^class CGetTextFromUserDialog : public CGetTextFromUserDialogBase$/;"	c
CGetTextFromUserDialogBase	uibase.cpp	/^CGetTextFromUserDialogBase::CGetTextFromUserDialogBase( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style )$/;"	f	class:CGetTextFromUserDialogBase
CGetTextFromUserDialogBase	uibase.h	/^class CGetTextFromUserDialogBase : public wxDialog $/;"	c
CInPoint	main.h	/^    CInPoint() { SetNull(); }$/;"	f	class:CInPoint
CInPoint	main.h	/^    CInPoint(CTransaction* ptxIn, unsigned int nIn) { ptx = ptxIn; n = nIn; }$/;"	f	class:CInPoint
CInPoint	main.h	/^class CInPoint$/;"	c
CInit	util.cpp	/^    CInit()$/;"	f	class:CInit
CInit	util.cpp	/^class CInit$/;"	c	file:
CInv	protocol.cpp	/^CInv::CInv()$/;"	f	class:CInv
CInv	protocol.cpp	/^CInv::CInv(const std::string& strType, const uint256& hashIn)$/;"	f	class:CInv
CInv	protocol.cpp	/^CInv::CInv(int typeIn, const uint256& hashIn)$/;"	f	class:CInv
CInv	protocol.h	/^class CInv$/;"	c
CKey	key.h	/^    CKey()$/;"	f	class:CKey
CKey	key.h	/^    CKey(const CKey& b)$/;"	f	class:CKey
CKey	key.h	/^class CKey$/;"	c
CKeyPool	db.h	/^    CKeyPool()$/;"	f	class:CKeyPool
CKeyPool	db.h	/^    CKeyPool(const std::vector<unsigned char>& vchPubKeyIn)$/;"	f	class:CKeyPool
CKeyPool	db.h	/^class CKeyPool$/;"	c
CKeyStore	keystore.h	/^class CKeyStore$/;"	c
CKeyingMaterial	crypter.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;$/;"	t
CLockLocation	util.cpp	/^    CLockLocation(const char* pszName, const char* pszFile, int nLine)$/;"	f	struct:CLockLocation
CLockLocation	util.cpp	/^struct CLockLocation$/;"	s	file:
CMainFrame	ui.cpp	/^CMainFrame::CMainFrame(wxWindow* parent) : CMainFrameBase(parent)$/;"	f	class:CMainFrame
CMainFrame	ui.h	/^class CMainFrame : public CMainFrameBase$/;"	c
CMainFrameBase	uibase.cpp	/^CMainFrameBase::CMainFrameBase( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxFrame( parent, id, title, pos, size, style )$/;"	f	class:CMainFrameBase
CMainFrameBase	uibase.h	/^class CMainFrameBase : public wxFrame $/;"	c
CMasterKey	crypter.h	/^    CMasterKey()$/;"	f	class:CMasterKey
CMasterKey	crypter.h	/^class CMasterKey$/;"	c
CMerkleTx	main.h	/^    CMerkleTx()$/;"	f	class:CMerkleTx
CMerkleTx	main.h	/^    CMerkleTx(const CTransaction& txIn) : CTransaction(txIn)$/;"	f	class:CMerkleTx
CMerkleTx	main.h	/^class CMerkleTx : public CTransaction$/;"	c
CMessageHeader	protocol.cpp	/^CMessageHeader::CMessageHeader()$/;"	f	class:CMessageHeader
CMessageHeader	protocol.cpp	/^CMessageHeader::CMessageHeader(const char* pszCommand, unsigned int nMessageSizeIn)$/;"	f	class:CMessageHeader
CMessageHeader	protocol.h	/^class CMessageHeader$/;"	c
CMyApp	ui.cpp	/^    CMyApp(){};$/;"	f	class:CMyApp
CMyApp	ui.cpp	/^class CMyApp : public wxApp$/;"	c	file:
CMyTaskBarIcon	ui.h	/^    CMyTaskBarIcon() : wxTaskBarIcon()$/;"	f	class:CMyTaskBarIcon
CMyTaskBarIcon	ui.h	/^class CMyTaskBarIcon : public wxTaskBarIcon$/;"	c
CNetCleanup	net.cpp	/^    CNetCleanup()$/;"	f	class:CNetCleanup
CNetCleanup	net.cpp	/^class CNetCleanup$/;"	c	file:
CNode	net.h	/^    CNode(SOCKET hSocketIn, CAddress addrIn, bool fInboundIn=false)$/;"	f	class:CNode
CNode	net.h	/^class CNode$/;"	c
COIN	main.h	/^static const int64 COIN = 100000000;$/;"	v
COINBASE_MATURITY	main.h	/^static const int COINBASE_MATURITY = 0;$/;"	v
COMMAND_SIZE	protocol.h	/^        enum { COMMAND_SIZE=12 };$/;"	e	enum:CMessageHeader::__anon10
COptionsDialog	ui.cpp	/^COptionsDialog::COptionsDialog(wxWindow* parent) : COptionsDialogBase(parent)$/;"	f	class:COptionsDialog
COptionsDialog	ui.h	/^class COptionsDialog : public COptionsDialogBase$/;"	c
COptionsDialogBase	uibase.cpp	/^COptionsDialogBase::COptionsDialogBase( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style )$/;"	f	class:COptionsDialogBase
COptionsDialogBase	uibase.h	/^class COptionsDialogBase : public wxDialog $/;"	c
COrphan	main.cpp	/^    COrphan(CTransaction* ptxIn)$/;"	f	class:COrphan
COrphan	main.cpp	/^class COrphan$/;"	c	file:
COutPoint	main.h	/^    COutPoint() { SetNull(); }$/;"	f	class:COutPoint
COutPoint	main.h	/^    COutPoint(uint256 hashIn, unsigned int nIn) { hash = hashIn; n = nIn; }$/;"	f	class:COutPoint
COutPoint	main.h	/^class COutPoint$/;"	c
CPP_TYPENAME	cryptopp/config.h	217;"	d
CPrivKey	key.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;$/;"	t
CRITICAL_BLOCK	util.h	253;"	d
CRYPTOPP_ALIGN_DATA	cryptopp/config.h	192;"	d
CRYPTOPP_ALLOW_UNALIGNED_DATA_ACCESS	cryptopp/config.h	348;"	d
CRYPTOPP_API	cryptopp/config.h	425;"	d
CRYPTOPP_ASSERT_JOIN	cryptopp/misc.h	61;"	d
CRYPTOPP_BLOCKS_END	cryptopp/misc.h	1130;"	d
CRYPTOPP_BLOCK_1	cryptopp/misc.h	1122;"	d
CRYPTOPP_BLOCK_2	cryptopp/misc.h	1123;"	d
CRYPTOPP_BLOCK_3	cryptopp/misc.h	1124;"	d
CRYPTOPP_BLOCK_4	cryptopp/misc.h	1125;"	d
CRYPTOPP_BLOCK_5	cryptopp/misc.h	1126;"	d
CRYPTOPP_BLOCK_6	cryptopp/misc.h	1127;"	d
CRYPTOPP_BLOCK_7	cryptopp/misc.h	1128;"	d
CRYPTOPP_BLOCK_8	cryptopp/misc.h	1129;"	d
CRYPTOPP_BOOL_ALIGN16_ENABLED	cryptopp/config.h	299;"	d
CRYPTOPP_BOOL_SLOW_WORD64	cryptopp/config.h	154;"	d
CRYPTOPP_BOOL_SLOW_WORD64	cryptopp/config.h	161;"	d
CRYPTOPP_BOOL_SSE2_ASM_AVAILABLE	cryptopp/config.h	270;"	d
CRYPTOPP_BOOL_SSE2_ASM_AVAILABLE	cryptopp/cpu.h	8;"	d
CRYPTOPP_BOOL_SSE2_INTRINSICS_AVAILABLE	cryptopp/config.h	293;"	d
CRYPTOPP_BOOL_SSSE3_ASM_AVAILABLE	cryptopp/config.h	278;"	d
CRYPTOPP_BOOL_X64	cryptopp/config.h	335;"	d
CRYPTOPP_BOOL_X64	cryptopp/cpu.h	7;"	d
CRYPTOPP_BOOL_X86	cryptopp/config.h	342;"	d
CRYPTOPP_BYTESWAP_AVAILABLE	cryptopp/misc.h	41;"	d
CRYPTOPP_COMPILE_ASSERT	cryptopp/misc.h	55;"	d
CRYPTOPP_COMPILE_ASSERT_INSTANCE	cryptopp/misc.h	57;"	d
CRYPTOPP_COMPILE_ASSERT_INSTANCE	cryptopp/misc.h	59;"	d
CRYPTOPP_CONFIG_H	cryptopp/config.h	2;"	d
CRYPTOPP_CONSTANT	cryptopp/config.h	329;"	d
CRYPTOPP_CPUID_AVAILABLE	cryptopp/cpu.h	23;"	d
CRYPTOPP_CPU_H	cryptopp/cpu.h	2;"	d
CRYPTOPP_CRYPTLIB_H	cryptopp/cryptlib.h	80;"	d
CRYPTOPP_DISABLE_ASM	cryptopp/config.h	262;"	d
CRYPTOPP_DISABLE_SSE2	cryptopp/config.h	263;"	d
CRYPTOPP_DISABLE_SSE2	cryptopp/config.h	6;"	d
CRYPTOPP_DISABLE_UNCAUGHT_EXCEPTION	cryptopp/config.h	254;"	d
CRYPTOPP_DLL	cryptopp/config.h	417;"	d
CRYPTOPP_DLL_TEMPLATE_CLASS	cryptopp/config.h	443;"	d
CRYPTOPP_DO_ASSERT_JOIN	cryptopp/misc.h	62;"	d
CRYPTOPP_EXTERN_DLL_TEMPLATE_CLASS	cryptopp/config.h	435;"	d
CRYPTOPP_EXTERN_STATIC_TEMPLATE_CLASS	cryptopp/config.h	449;"	d
CRYPTOPP_FASTCALL	cryptopp/config.h	210;"	d
CRYPTOPP_FAST_ROTATE	cryptopp/misc.h	21;"	d
CRYPTOPP_FAST_ROTATE	cryptopp/misc.h	23;"	d
CRYPTOPP_FAST_ROTATE	cryptopp/misc.h	25;"	d
CRYPTOPP_FAST_ROTATE	cryptopp/misc.h	29;"	d
CRYPTOPP_FAST_ROTATE	cryptopp/misc.h	31;"	d
CRYPTOPP_FAST_ROTATE	cryptopp/misc.h	33;"	d
CRYPTOPP_GCC_VERSION	cryptopp/config.h	127;"	d
CRYPTOPP_GET_BYTE_AS_BYTE	cryptopp/misc.h	210;"	d
CRYPTOPP_INHERIT_ALLOCATOR_TYPES	cryptopp/secblock.h	50;"	d
CRYPTOPP_IS_DLL	cryptopp/config.h	416;"	d
CRYPTOPP_ITERHASH_H	cryptopp/iterhash.h	2;"	d
CRYPTOPP_L1_CACHE_LINE_SIZE	cryptopp/config.h	172;"	d
CRYPTOPP_MISC_H	cryptopp/misc.h	2;"	d
CRYPTOPP_MM_MALLOC_AVAILABLE	cryptopp/config.h	306;"	d
CRYPTOPP_MSVC6PP_OR_LATER	cryptopp/config.h	184;"	d
CRYPTOPP_MSVCRT6	cryptopp/stdcpp.h	24;"	d
CRYPTOPP_NAKED	cryptopp/cpu.h	135;"	d
CRYPTOPP_NAKED	cryptopp/cpu.h	145;"	d
CRYPTOPP_NATIVE_DWORD_AVAILABLE	cryptopp/config.h	136;"	d
CRYPTOPP_NOINLINE	cryptopp/config.h	318;"	d
CRYPTOPP_NOINLINE_DOTDOTDOT	cryptopp/config.h	317;"	d
CRYPTOPP_NO_VTABLE	cryptopp/config.h	230;"	d
CRYPTOPP_PCH_H	cryptopp/pch.h	2;"	d
CRYPTOPP_RIJNDAEL_NAME	cryptopp/config.h	59;"	d
CRYPTOPP_SECBLOCK_H	cryptopp/secblock.h	4;"	d
CRYPTOPP_SECTION_ALIGN16	cryptopp/config.h	203;"	d
CRYPTOPP_SECTION_ALIGN16	cryptopp/sha.cpp	/^CRYPTOPP_ALIGN_DATA(16) extern const word32 SHA256_K[64] CRYPTOPP_SECTION_ALIGN16 = {$/;"	v
CRYPTOPP_SECTION_ALIGN16	cryptopp/sha.cpp	/^CRYPTOPP_ALIGN_DATA(16) static const word64 SHA512_K[80] CRYPTOPP_SECTION_ALIGN16 = {$/;"	v	file:
CRYPTOPP_SHA_H	cryptopp/sha.h	2;"	d
CRYPTOPP_SMARTPTR_H	cryptopp/smartptr.h	2;"	d
CRYPTOPP_STATIC_TEMPLATE_CLASS	cryptopp/config.h	457;"	d
CRYPTOPP_STDCPP_H	cryptopp/stdcpp.h	2;"	d
CRYPTOPP_UNCAUGHT_EXCEPTION_AVAILABLE	cryptopp/config.h	258;"	d
CRYPTOPP_UNIX_AVAILABLE	cryptopp/config.h	362;"	d
CRYPTOPP_VC6_INT64	cryptopp/config.h	224;"	d
CRYPTOPP_VERSION	cryptopp/config.h	351;"	d
CRYPTOPP_WIN32_AVAILABLE	cryptopp/config.h	358;"	d
CRYPTOPP_WORD128_AVAILABLE	cryptopp/config.h	145;"	d
CRYPTOPP_X64_ASM_AVAILABLE	cryptopp/config.h	289;"	d
CRYPTOPP_X64_MASM_AVAILABLE	cryptopp/config.h	285;"	d
CRYPTOPP_X86_ASM_AVAILABLE	cryptopp/config.h	267;"	d
CRYPTOPP_X86_ASM_AVAILABLE	cryptopp/cpu.h	6;"	d
CRequestTracker	net.h	/^    explicit CRequestTracker(void (*fnIn)(void*, CDataStream&)=NULL, void* param1In=NULL)$/;"	f	class:CRequestTracker
CRequestTracker	net.h	/^class CRequestTracker$/;"	c
CReserveKey	wallet.h	/^    CReserveKey(CWallet* pwalletIn)$/;"	f	class:CReserveKey
CReserveKey	wallet.h	/^class CReserveKey$/;"	c
CScript	script.h	/^    CScript() { }$/;"	f	class:CScript
CScript	script.h	/^    CScript(const CScript& b) : std::vector<unsigned char>(b.begin(), b.end()) { }$/;"	f	class:CScript
CScript	script.h	/^    CScript(const unsigned char* pbegin, const unsigned char* pend) : std::vector<unsigned char>(pbegin, pend) { }$/;"	f	class:CScript
CScript	script.h	/^    CScript(const_iterator pbegin, const_iterator pend) : std::vector<unsigned char>(pbegin, pend) { }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(char b)           { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(const CBigNum& b) { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(const std::vector<unsigned char>& b) { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(const uint256& b) { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(int b)            { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(int64 b)          { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(long b)           { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(opcodetype b)     { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(short b)          { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(uint64 b)         { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(unsigned char b)  { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(unsigned int b)   { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(unsigned long b)  { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(unsigned short b) { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^class CScript : public std::vector<unsigned char>$/;"	c
CSecret	key.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CSecret;$/;"	t
CSendDialog	ui.cpp	/^CSendDialog::CSendDialog(wxWindow* parent, const wxString& strAddress) : CSendDialogBase(parent)$/;"	f	class:CSendDialog
CSendDialog	ui.h	/^class CSendDialog : public CSendDialogBase$/;"	c
CSendDialogBase	uibase.cpp	/^CSendDialogBase::CSendDialogBase( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style )$/;"	f	class:CSendDialogBase
CSendDialogBase	uibase.h	/^class CSendDialogBase : public wxDialog $/;"	c
CSendingDialog	ui.cpp	/^CSendingDialog::CSendingDialog(wxWindow* parent, const CAddress& addrIn, int64 nPriceIn, const CWalletTx& wtxIn) : CSendingDialogBase(NULL) \/\/ we have to give null so parent can't destroy us$/;"	f	class:CSendingDialog
CSendingDialog	ui.h	/^class CSendingDialog : public CSendingDialogBase$/;"	c
CSendingDialogBase	uibase.cpp	/^CSendingDialogBase::CSendingDialogBase( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style )$/;"	f	class:CSendingDialogBase
CSendingDialogBase	uibase.h	/^class CSendingDialogBase : public wxDialog $/;"	c
CSerActionGetSerializeSize	serialize.h	/^class CSerActionGetSerializeSize { };$/;"	c
CSerActionSerialize	serialize.h	/^class CSerActionSerialize { };$/;"	c
CSerActionUnserialize	serialize.h	/^class CSerActionUnserialize { };$/;"	c
CTransaction	main.h	/^    CTransaction()$/;"	f	class:CTransaction
CTransaction	main.h	/^class CTransaction$/;"	c
CTryCriticalBlock	util.h	/^    CTryCriticalBlock(CCriticalSection& csIn, const char* pszName, const char* pszFile, int nLine)$/;"	f	class:CTryCriticalBlock
CTryCriticalBlock	util.h	/^class CTryCriticalBlock$/;"	c
CTxDB	db.h	/^    CTxDB(const char* pszMode="r+") : CDB("blkindex.dat", pszMode) { }$/;"	f	class:CTxDB
CTxDB	db.h	/^class CTxDB : public CDB$/;"	c
CTxDetailsDialog	ui.cpp	/^CTxDetailsDialog::CTxDetailsDialog(wxWindow* parent, CWalletTx wtx) : CTxDetailsDialogBase(parent)$/;"	f	class:CTxDetailsDialog
CTxDetailsDialog	ui.h	/^class CTxDetailsDialog : public CTxDetailsDialogBase$/;"	c
CTxDetailsDialogBase	uibase.cpp	/^CTxDetailsDialogBase::CTxDetailsDialogBase( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style )$/;"	f	class:CTxDetailsDialogBase
CTxDetailsDialogBase	uibase.h	/^class CTxDetailsDialogBase : public wxDialog $/;"	c
CTxIn	main.h	/^    CTxIn()$/;"	f	class:CTxIn
CTxIn	main.h	/^    CTxIn(uint256 hashPrevTx, unsigned int nOut, CScript scriptSigIn=CScript(), unsigned int nSequenceIn=UINT_MAX)$/;"	f	class:CTxIn
CTxIn	main.h	/^    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), unsigned int nSequenceIn=UINT_MAX)$/;"	f	class:CTxIn
CTxIn	main.h	/^class CTxIn$/;"	c
CTxIndex	main.h	/^    CTxIndex()$/;"	f	class:CTxIndex
CTxIndex	main.h	/^    CTxIndex(const CDiskTxPos& posIn, unsigned int nOutputs)$/;"	f	class:CTxIndex
CTxIndex	main.h	/^class CTxIndex$/;"	c
CTxOut	main.h	/^    CTxOut()$/;"	f	class:CTxOut
CTxOut	main.h	/^    CTxOut(int64 nValueIn, CScript scriptPubKeyIn)$/;"	f	class:CTxOut
CTxOut	main.h	/^class CTxOut$/;"	c
CUnsignedAlert	main.h	/^class CUnsignedAlert$/;"	c
CWallet	wallet.h	/^    CWallet()$/;"	f	class:CWallet
CWallet	wallet.h	/^    CWallet(std::string strWalletFileIn)$/;"	f	class:CWallet
CWallet	wallet.h	/^class CWallet : public CCryptoKeyStore$/;"	c
CWalletDB	db.h	/^    CWalletDB(std::string strFilename, const char* pszMode="r+") : CDB(strFilename.c_str(), pszMode)$/;"	f	class:CWalletDB
CWalletDB	db.h	/^class CWalletDB : public CDB$/;"	c
CWalletKey	wallet.h	/^    CWalletKey(int64 nExpires=0)$/;"	f	class:CWalletKey
CWalletKey	wallet.h	/^class CWalletKey$/;"	c
CWalletTx	wallet.h	/^    CWalletTx()$/;"	f	class:CWalletTx
CWalletTx	wallet.h	/^    CWalletTx(const CWallet* pwalletIn)$/;"	f	class:CWalletTx
CWalletTx	wallet.h	/^    CWalletTx(const CWallet* pwalletIn, const CMerkleTx& txIn) : CMerkleTx(txIn)$/;"	f	class:CWalletTx
CWalletTx	wallet.h	/^    CWalletTx(const CWallet* pwalletIn, const CTransaction& txIn) : CMerkleTx(txIn)$/;"	f	class:CWalletTx
CWalletTx	wallet.h	/^class CWalletTx : public CMerkleTx$/;"	c
CXX	Makefile	/^CXX=g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS=-Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS)$/;"	m
CYourAddressDialogBase	uibase.cpp	/^CYourAddressDialogBase::CYourAddressDialogBase( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style )$/;"	f	class:CYourAddressDialogBase
CYourAddressDialogBase	uibase.h	/^class CYourAddressDialogBase : public wxDialog $/;"	c
CalculateDigest	cryptopp/cryptlib.h	/^	virtual void CalculateDigest(byte *digest, const byte *input, size_t length)$/;"	f	class:HashTransformation
CalculateTruncatedDigest	cryptopp/cryptlib.h	/^	virtual void CalculateTruncatedDigest(byte *digest, size_t digestSize, const byte *input, size_t length)$/;"	f	class:HashTransformation
CallRPC	rpc.cpp	/^Object CallRPC(const string& strMethod, const Array& params)$/;"	f
CalledMessageBox	ui.cpp	/^void CalledMessageBox(const string& message, const string& caption, int style, wxWindow* parent, int x, int y, int* pnRet, bool* pfDone)$/;"	f
CalledSetStatusBar	noui.h	/^inline void CalledSetStatusBar(const std::string& strText, int nField)$/;"	f
CalledSetStatusBar	ui.cpp	/^void CalledSetStatusBar(const string& strText, int nField)$/;"	f
CanIncorporateEntropy	cryptopp/cryptlib.h	/^	virtual bool CanIncorporateEntropy() const {return false;}$/;"	f	class:RandomNumberGenerator
CanModifyInput	cryptopp/cryptlib.h	/^		virtual bool CanModifyInput() const {return false;}$/;"	f	class:BufferedTransformation
CanUsePredictableIVs	cryptopp/cryptlib.h	/^	bool CanUsePredictableIVs() const {return IVRequirement() <= RANDOM_IV;}$/;"	f	class:SimpleKeyingInterface
CanUseRandomIVs	cryptopp/cryptlib.h	/^	bool CanUseRandomIVs() const {return IVRequirement() <= UNPREDICTABLE_RANDOM_IV;}$/;"	f	class:SimpleKeyingInterface
CanUseStructuredIVs	cryptopp/cryptlib.h	/^	bool CanUseStructuredIVs() const {return IVRequirement() <= UNIQUE_IV;}$/;"	f	class:SimpleKeyingInterface
CancelSubscribe	net.cpp	/^void CNode::CancelSubscribe(unsigned int nChannel)$/;"	f	class:CNode
Cancels	main.h	/^    bool Cancels(const CAlert& alert) const$/;"	f	class:CAlert
CannotFlush	cryptopp/cryptlib.h	/^	explicit CannotFlush(const std::string &s) : Exception(CANNOT_FLUSH, s) {}$/;"	f	class:CannotFlush
CannotFlush	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CannotFlush : public Exception$/;"	c
CastToBigNum	script.cpp	/^CBigNum CastToBigNum(const valtype& vch)$/;"	f
CastToBool	script.cpp	/^bool CastToBool(const valtype& vch)$/;"	f
Ch	cryptopp/sha.cpp	466;"	d	file:
ChangeWalletPassphrase	wallet.cpp	/^bool CWallet::ChangeWalletPassphrase(const string& strOldWalletPassphrase, const string& strNewWalletPassphrase)$/;"	f	class:CWallet
ChannelMessageEnd	cryptopp/cryptlib.h	/^		bool ChannelMessageEnd(const std::string &channel, int propagation=-1, bool blocking=true)$/;"	f	class:BufferedTransformation
ChannelPut	cryptopp/cryptlib.h	/^		size_t ChannelPut(const std::string &channel, byte inByte, bool blocking=true)$/;"	f	class:BufferedTransformation
ChannelPut	cryptopp/cryptlib.h	/^		size_t ChannelPut(const std::string &channel, const byte *inString, size_t length, bool blocking=true)$/;"	f	class:BufferedTransformation
ChannelPutMessageEnd	cryptopp/cryptlib.h	/^		size_t ChannelPutMessageEnd(const std::string &channel, const byte *inString, size_t length, int propagation=-1, bool blocking=true)$/;"	f	class:BufferedTransformation
ChannelPutModifiable	cryptopp/cryptlib.h	/^		size_t ChannelPutModifiable(const std::string &channel, byte *inString, size_t length, bool blocking=true)$/;"	f	class:BufferedTransformation
Char_type	json/json_spirit_reader_template.h	/^        typedef typename Istream_type::char_type Char_type;$/;"	t	struct:json_spirit::Multi_pass_iters
Char_type	json/json_spirit_reader_template.h	/^        typedef typename String_type::value_type Char_type;$/;"	t	class:json_spirit::Semantic_actions
Char_type	json/json_spirit_writer_template.h	/^        typedef typename String_type::value_type Char_type;$/;"	t	class:json_spirit::Generator
CheckBlock	main.cpp	/^bool CBlock::CheckBlock() const$/;"	f	class:CBlock
CheckDiskSpace	main.cpp	/^bool CheckDiskSpace(uint64 nAdditionalBytes)$/;"	f
CheckIfMine	ui.cpp	/^bool CAddressBookDialog::CheckIfMine(const string& strAddress, const string& strTitle)$/;"	f	class:CAddressBookDialog
CheckIndex	main.h	/^    bool CheckIndex() const$/;"	f	class:CBlockIndex
CheckMerkleBranch	main.h	/^    static uint256 CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex)$/;"	f	class:CBlock
CheckProofOfWork	main.cpp	/^bool CheckProofOfWork(uint256 hash, unsigned int nBits)$/;"	f
CheckSig	script.cpp	/^bool CheckSig(vector<unsigned char> vchSig, vector<unsigned char> vchPubKey, CScript scriptCode,$/;"	f
CheckSignature	main.h	/^    bool CheckSignature()$/;"	f	class:CAlert
CheckSize	cryptopp/secblock.h	/^	static void CheckSize(size_t n)$/;"	f	class:AllocatorBase
CheckTransaction	main.cpp	/^bool CTransaction::CheckTransaction() const$/;"	f	class:CTransaction
CheckWork	main.cpp	/^bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)$/;"	f
CipherDir	cryptopp/cryptlib.h	/^enum CipherDir {ENCRYPTION, DECRYPTION};$/;"	g
CipherTextLength	cryptopp/cryptlib.h	/^	size_t CipherTextLength(size_t plainTextLength) const {return CiphertextLength(plainTextLength);}$/;"	f	class:PK_CryptoSystem
CleanGrow	cryptopp/secblock.h	/^	void CleanGrow(size_type newSize)$/;"	f	class:SecBlock
CleanKey	crypter.h	/^    void CleanKey()$/;"	f	class:CCrypter
CleanNew	cryptopp/secblock.h	/^	void CleanNew(size_type newSize)$/;"	f	class:SecBlock
Cleanup	net.cpp	/^void CNode::Cleanup()$/;"	f	class:CNode
ClientAllowed	rpc.cpp	/^bool ClientAllowed(const string& strAddress)$/;"	f
ClientConnectInputs	main.cpp	/^bool CTransaction::ClientConnectInputs()$/;"	f	class:CTransaction
Clonable	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE Clonable$/;"	c
Clone	cryptopp/cryptlib.h	/^	virtual Clonable* Clone() const {throw NotImplemented("Clone() is not implemented yet.");}	\/\/ TODO: make this =0$/;"	f	class:Clonable
Close	cryptopp/cryptlib.h	/^		void Close() {MessageEnd();}$/;"	f	class:BufferedTransformation
Close	db.cpp	/^void CDB::Close()$/;"	f	class:CDB
Close	ui.cpp	/^void CSendingDialog::Close()$/;"	f	class:CSendingDialog
CloseDb	db.cpp	/^void static CloseDb(const string& strFile)$/;"	f	file:
CloseSocketDisconnect	net.cpp	/^void CNode::CloseSocketDisconnect()$/;"	f	class:CNode
CommandLineRPC	rpc.cpp	/^int CommandLineRPC(int argc, char *argv[])$/;"	f
CommitTransaction	wallet.cpp	/^bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)$/;"	f	class:CWallet
Compact	serialize.h	/^    inline void Compact()$/;"	f	class:CDataStream
CompareTo	base58.h	/^    int CompareTo(const CBase58Data& b58) const$/;"	f	class:CBase58Data
CompileAssert	cryptopp/misc.h	/^struct CompileAssert$/;"	s
ConditionalByteReverse	cryptopp/misc.h	/^inline T ConditionalByteReverse(ByteOrder order, T value)$/;"	f
ConditionalByteReverse	cryptopp/misc.h	/^inline void ConditionalByteReverse(ByteOrder order, T *out, const T *in, size_t byteCount)$/;"	f
Config	json/json_spirit_value.h	/^    typedef Config_vector< std::string > Config;$/;"	t	namespace:json_spirit
Config_map	json/json_spirit_value.h	/^    struct Config_map$/;"	s	namespace:json_spirit
Config_type	json/json_spirit_reader_template.h	/^        typedef typename Value_type::Config_type Config_type;$/;"	t	class:json_spirit::Semantic_actions
Config_type	json/json_spirit_value.h	/^        typedef Config Config_type;$/;"	t	class:json_spirit::Value_impl
Config_type	json/json_spirit_writer_template.h	/^        typedef typename Value_type::Config_type Config_type;$/;"	t	class:json_spirit::Generator
Config_vector	json/json_spirit_value.h	/^    struct Config_vector$/;"	s	namespace:json_spirit
ConnectBlock	main.cpp	/^bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)$/;"	f	class:CBlock
ConnectInputs	main.cpp	/^bool CTransaction::ConnectInputs(CTxDB& txdb, map<uint256, CTxIndex>& mapTestPool, CDiskTxPos posThisTx,$/;"	f	class:CTransaction
ConnectNode	net.cpp	/^CNode* ConnectNode(CAddress addrConnect, int64 nTimeout)$/;"	f
ConnectSocket	net.cpp	/^bool ConnectSocket(const CAddress& addrConnect, SOCKET& hSocketRet, int nTimeout)$/;"	f
Const_str_ptr	json/json_spirit_value.h	/^        typedef typename String_type::const_pointer Const_str_ptr;  \/\/ eg const char*$/;"	t	class:json_spirit::Value_impl
ContainsTx	db.cpp	/^bool CTxDB::ContainsTx(uint256 hash)$/;"	f	class:CTxDB
ConvertTo	rpc.cpp	/^void ConvertTo(Value& value)$/;"	f
CopyRangeTo	cryptopp/cryptlib.h	/^		lword CopyRangeTo(BufferedTransformation &target, lword position, lword copyMax=LWORD_MAX, const std::string &channel=DEFAULT_CHANNEL) const$/;"	f	class:BufferedTransformation
CopyTo	cryptopp/cryptlib.h	/^		lword CopyTo(BufferedTransformation &target, lword copyMax=LWORD_MAX, const std::string &channel=DEFAULT_CHANNEL) const$/;"	f	class:BufferedTransformation
CpuId	cryptopp/cpu.cpp	/^bool CpuId(word32 input, word32 *output)$/;"	f
CreateMainWindow	ui.cpp	/^void CreateMainWindow()$/;"	f
CreateNewBlock	main.cpp	/^CBlock* CreateNewBlock(CReserveKey& reservekey)$/;"	f
CreatePidFile	util.cpp	/^void CreatePidFile(string pidFile, pid_t pid)$/;"	f
CreatePopupMenu	ui.cpp	/^wxMenu* CMyTaskBarIcon::CreatePopupMenu()$/;"	f	class:CMyTaskBarIcon
CreatePutSpace	cryptopp/cryptlib.h	/^		virtual byte * CreatePutSpace(size_t &size) {size=0; return NULL;}$/;"	f	class:BufferedTransformation
CreateThread	util.h	/^inline pthread_t CreateThread(void(*pfn)(void*), void* parg, bool fWantHandle=false)$/;"	f
CreateTransaction	wallet.cpp	/^bool CWallet::CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet)$/;"	f	class:CWallet
CreateTransaction	wallet.cpp	/^bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet)$/;"	f	class:CWallet
CreateUpdateSpace	cryptopp/cryptlib.h	/^	virtual byte * CreateUpdateSpace(size_t &size) {size=0; return NULL;}$/;"	f	class:HashTransformation
Crop	cryptopp/misc.h	/^inline T Crop(T value, size_t size)$/;"	f
CryptedKeyMap	keystore.h	/^typedef std::map<CBitcoinAddress, std::pair<std::vector<unsigned char>, std::vector<unsigned char> > > CryptedKeyMap;$/;"	t
CryptoMaterial	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE CryptoMaterial : public NameValuePairs$/;"	c
CryptoPP	cryptopp/config.h	76;"	d
CryptoParameters	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE CryptoParameters : public GeneratableCryptoMaterial$/;"	c
D	cryptopp/sha.cpp	144;"	d	file:
DATA_END	cryptopp/sha.cpp	155;"	d	file:
DATA_INTEGRITY_CHECK_FAILED	cryptopp/cryptlib.h	/^		DATA_INTEGRITY_CHECK_FAILED,$/;"	e	enum:Exception::ErrorType
DATA_SAVE	cryptopp/sha.cpp	154;"	d	file:
DBErrors	db.h	/^enum DBErrors$/;"	g
DBFlush	db.cpp	/^void DBFlush(bool fShutdown)$/;"	f
DB_CORRUPT	db.h	/^    DB_CORRUPT,$/;"	e	enum:DBErrors
DB_LOAD_FAIL	db.h	/^    DB_LOAD_FAIL,$/;"	e	enum:DBErrors
DB_LOAD_OK	db.h	/^    DB_LOAD_OK,$/;"	e	enum:DBErrors
DB_TOO_NEW	db.h	/^    DB_TOO_NEW,$/;"	e	enum:DBErrors
DEBUGFLAGS	Makefile	/^DEBUGFLAGS=-g -D__WXDEBUG__$/;"	m
DECRYPTION	cryptopp/cryptlib.h	/^enum CipherDir {ENCRYPTION, DECRYPTION};$/;"	e	enum:CipherDir
DEFS	Makefile	/^DEFS=-DNOPCH -DUSE_SSL$/;"	m
DEREncode	cryptopp/cryptlib.h	/^	void DEREncode(BufferedTransformation &bt) const$/;"	f	class:AsymmetricAlgorithm
DNSAddressSeed	net.cpp	/^void DNSAddressSeed()$/;"	f
DOCUMENTED_NAMESPACE_BEGIN	cryptopp/config.h	88;"	d
DOCUMENTED_NAMESPACE_END	cryptopp/config.h	89;"	d
DOCUMENTED_TYPEDEF	cryptopp/config.h	80;"	d
DOCUMENTED_TYPEDEF	cryptopp/config.h	84;"	d
DSA_1024_BIT_MODULUS_ONLY	cryptopp/config.h	35;"	d
DateStr	ui.cpp	/^string DateStr(int64 nTime)$/;"	f
DateTimeStr	ui.cpp	/^string DateTimeStr(int64 nTime)$/;"	f
DateTimeStrFormat	util.h	/^inline std::string DateTimeStrFormat(const char* pszFormat, int64 nTime)$/;"	f
DecodeAddress	irc.cpp	/^bool DecodeAddress(string str, CAddress& addr)$/;"	f
DecodeBase58	base58.h	/^inline bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58	base58.h	/^inline bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58Check	base58.h	/^inline bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58Check	base58.h	/^inline bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase64	rpc.cpp	/^string DecodeBase64(string s)$/;"	f
DecodingResult	cryptopp/cryptlib.h	/^	explicit DecodingResult() : isValidCoding(false), messageLength(0) {}$/;"	f	struct:DecodingResult
DecodingResult	cryptopp/cryptlib.h	/^	explicit DecodingResult(size_t len) : isValidCoding(true), messageLength(len) {}$/;"	f	struct:DecodingResult
DecodingResult	cryptopp/cryptlib.h	/^struct CRYPTOPP_DLL DecodingResult$/;"	s
DecrementPropagation	cryptopp/cryptlib.h	/^	static int DecrementPropagation(int propagation)$/;"	f	class:BufferedTransformation
Decrypt	crypter.cpp	/^bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext)$/;"	f	class:CCrypter
DecryptSecret	crypter.cpp	/^bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CSecret& vchPlaintext)$/;"	f
DefaultIVLength	cryptopp/cryptlib.h	/^	unsigned int DefaultIVLength() const {return IVSize();}$/;"	f	class:SimpleKeyingInterface
DelAddressBookName	wallet.cpp	/^bool CWallet::DelAddressBookName(const CBitcoinAddress& address)$/;"	f	class:CWallet
DeleteLine	ui.cpp	/^bool CMainFrame::DeleteLine(uint256 hashKey)$/;"	f	class:CMainFrame
Detach	cryptopp/cryptlib.h	/^		virtual void Detach(BufferedTransformation *newAttachment = 0)$/;"	f	class:BufferedTransformation
DetectX86Features	cryptopp/cpu.cpp	/^void DetectX86Features()$/;"	f
DigestSize	cryptopp/cryptlib.h	/^	unsigned int DigestSize() const$/;"	f	class:PK_MessageAccumulator
DigestSize	cryptopp/iterhash.h	/^	unsigned int DigestSize() const {return DIGESTSIZE;};$/;"	f	class:IteratedHashWithStaticTransform
DisconnectBlock	main.cpp	/^bool CBlock::DisconnectBlock(CTxDB& txdb, CBlockIndex* pindex)$/;"	f	class:CBlock
DisconnectInputs	main.cpp	/^bool CTransaction::DisconnectInputs(CTxDB& txdb)$/;"	f	class:CTransaction
DoQuickSanityCheck	cryptopp/cryptlib.h	/^	void DoQuickSanityCheck() const	{ThrowIfInvalid(NullRNG(), 0);}$/;"	f	class:CryptoMaterial
E	cryptopp/sha.cpp	143;"	d	file:
EC_KEY_regenerate_key	key.h	/^int static inline EC_KEY_regenerate_key(EC_KEY *eckey, BIGNUM *priv_key)$/;"	f
ENCRYPTION	cryptopp/cryptlib.h	/^enum CipherDir {ENCRYPTION, DECRYPTION};$/;"	e	enum:CipherDir
END	util.h	44;"	d
Empty	cryptopp/misc.h	/^class CRYPTOPP_DLL Empty$/;"	c
EncodeAddress	irc.cpp	/^string EncodeAddress(const CAddress& addr)$/;"	f
EncodeBase58	base58.h	/^inline std::string EncodeBase58(const std::vector<unsigned char>& vch)$/;"	f
EncodeBase58	base58.h	/^inline std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)$/;"	f
EncodeBase58Check	base58.h	/^inline std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)$/;"	f
EncodeBase64	rpc.cpp	/^string EncodeBase64(string s)$/;"	f
Encrypt	crypter.cpp	/^bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext)$/;"	f	class:CCrypter
EncryptKeys	keystore.cpp	/^bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)$/;"	f	class:CCryptoKeyStore
EncryptSecret	crypter.cpp	/^bool EncryptSecret(CKeyingMaterial& vMasterKey, const CSecret &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext)$/;"	f
EncryptWallet	wallet.cpp	/^bool CWallet::EncryptWallet(const string& strWalletPassphrase)$/;"	f	class:CWallet
EndMessage	net.h	/^    void EndMessage()$/;"	f	class:CNode
EndMessageAbortIfEmpty	net.h	/^    void EndMessageAbortIfEmpty()$/;"	f	class:CNode
Enter	util.cpp	/^void CCriticalSection::Enter(const char* pszName, const char* pszFile, int nLine)$/;"	f	class:CCriticalSection
Enter	util.cpp	/^void CCriticalSection::Enter(const char*, const char*, int)$/;"	f	class:CCriticalSection
Entered	util.h	/^    bool Entered() { return pcs != NULL; }$/;"	f	class:CTryCriticalBlock
EnumToType	cryptopp/cryptlib.h	/^struct EnumToType$/;"	s
Erase	db.h	/^    bool Erase(const K& key)$/;"	f	class:CDB
EraseAddress	db.cpp	/^bool CAddrDB::EraseAddress(const CAddress& addr)$/;"	f	class:CAddrDB
EraseBlockFromDisk	main.h	/^    bool EraseBlockFromDisk()$/;"	f	class:CBlockIndex
EraseBlockIndex	db.cpp	/^bool CTxDB::EraseBlockIndex(uint256 hash)$/;"	f	class:CTxDB
EraseFromWallet	wallet.cpp	/^bool CWallet::EraseFromWallet(uint256 hash)$/;"	f	class:CWallet
EraseFromWallets	main.cpp	/^void static EraseFromWallets(uint256 hash)$/;"	f	file:
EraseName	db.cpp	/^bool CWalletDB::EraseName(const string& strAddress)$/;"	f	class:CWalletDB
EraseOrphanTx	main.cpp	/^void static EraseOrphanTx(uint256 hash)$/;"	f	file:
ErasePool	db.h	/^    bool ErasePool(int64 nPool)$/;"	f	class:CWalletDB
EraseTx	db.h	/^    bool EraseTx(uint256 hash)$/;"	f	class:CWalletDB
EraseTxIndex	db.cpp	/^bool CTxDB::EraseTxIndex(const CTransaction& tx)$/;"	f	class:CTxDB
Error	ui.cpp	/^bool CSendingDialog::Error(const string& str)$/;"	f	class:CSendingDialog
ErrorReply	rpc.cpp	/^void ErrorReply(std::ostream& stream, const Object& objError, const Value& id)$/;"	f
ErrorType	cryptopp/cryptlib.h	/^	enum ErrorType {$/;"	g	class:Exception
Error_position	json/json_spirit_error_position.h	/^    inline Error_position::Error_position( unsigned int line, unsigned int column, const std::string& reason )$/;"	f	class:json_spirit::Error_position
Error_position	json/json_spirit_error_position.h	/^    inline Error_position::Error_position()$/;"	f	class:json_spirit::Error_position
Error_position	json/json_spirit_error_position.h	/^    struct Error_position$/;"	s	namespace:json_spirit
EvalScript	script.cpp	/^bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f
Exception	cryptopp/cryptlib.h	/^	explicit Exception(ErrorType errorType, const std::string &s) : m_errorType(errorType), m_what(s) {}$/;"	f	class:Exception
Exception	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL Exception : public std::exception$/;"	c
Exists	db.h	/^    bool Exists(const K& key)$/;"	f	class:CDB
ExitThread	util.h	/^inline void ExitThread(size_t nExitCode)$/;"	f
ExitTimeout	init.cpp	/^void ExitTimeout(void* parg)$/;"	f
ExtractAddress	script.cpp	/^bool ExtractAddress(const CScript& scriptPubKey, const CKeyStore* keystore, CBitcoinAddress& addressRet)$/;"	f
ExtractAddressInner	script.cpp	/^bool static ExtractAddressInner(const CScript& scriptPubKey, const CKeyStore* keystore, CBitcoinAddress& addressRet)$/;"	f	file:
F	cryptopp/sha.cpp	142;"	d	file:
FLATDATA	serialize.h	277;"	d
Final	cryptopp/cryptlib.h	/^	virtual void Final(byte *digest)$/;"	f	class:HashTransformation
FindAndDelete	script.h	/^    void FindAndDelete(const CScript& b)$/;"	f	class:CScript
FindNode	net.cpp	/^CNode* FindNode(CAddress addr)$/;"	f
FindNode	net.cpp	/^CNode* FindNode(unsigned int ip)$/;"	f
FixedCiphertextLength	cryptopp/cryptlib.h	/^	virtual size_t FixedCiphertextLength() const {return 0;}$/;"	f	class:PK_CryptoSystem
FixedLengthDecrypt	cryptopp/cryptlib.h	/^	DecodingResult FixedLengthDecrypt(RandomNumberGenerator &rng, const byte *ciphertext, byte *plaintext, const NameValuePairs &parameters = g_nullNameValuePairs) const$/;"	f	class:PK_Decryptor
FixedMaxPlaintextLength	cryptopp/cryptlib.h	/^	virtual size_t FixedMaxPlaintextLength() const {return 0;}$/;"	f	class:PK_CryptoSystem
FixedSizeAlignedSecBlock	cryptopp/secblock.h	/^class FixedSizeAlignedSecBlock : public FixedSizeSecBlock<T, S, FixedSizeAllocatorWithCleanup<T, S, NullAllocator<T>, T_Align16> >$/;"	c
FixedSizeAllocatorWithCleanup	cryptopp/secblock.h	/^	FixedSizeAllocatorWithCleanup() : m_allocated(false) {}$/;"	f	class:FixedSizeAllocatorWithCleanup
FixedSizeAllocatorWithCleanup	cryptopp/secblock.h	/^class FixedSizeAllocatorWithCleanup : public AllocatorBase<T>$/;"	c
FixedSizeSecBlock	cryptopp/secblock.h	/^	explicit FixedSizeSecBlock() : SecBlock<T, A>(S) {}$/;"	f	class:FixedSizeSecBlock
FixedSizeSecBlock	cryptopp/secblock.h	/^class FixedSizeSecBlock : public SecBlock<T, A>$/;"	c
FlagsForAdvancedProcessBlocks	cryptopp/cryptlib.h	/^	enum {BT_InBlockIsCounter=1, BT_DontIncrementInOutPointers=2, BT_XorInput=4, BT_ReverseDirection=8} FlagsForAdvancedProcessBlocks;$/;"	m	class:BlockTransformation	typeref:enum:BlockTransformation::__anon2
FormatException	util.cpp	/^void FormatException(char* pszMessage, std::exception* pex, const char* pszThread)$/;"	f
FormatFullVersion	util.cpp	/^string FormatFullVersion()$/;"	f
FormatHashBlocks	main.cpp	/^int static FormatHashBlocks(void* pbuffer, unsigned int len)$/;"	f	file:
FormatHashBuffers	main.cpp	/^void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1)$/;"	f
FormatMoney	util.cpp	/^string FormatMoney(int64 n, bool fPlus)$/;"	f
FormatTxStatus	ui.cpp	/^string FormatTxStatus(const CWalletTx& wtx)$/;"	f
FormatVersion	util.cpp	/^string FormatVersion(int nVersion)$/;"	f
G	cryptopp/sha.cpp	141;"	d	file:
GETBYTE	cryptopp/misc.h	205;"	d
GNU_AS1	cryptopp/cpu.h	123;"	d
GNU_AS2	cryptopp/cpu.h	124;"	d
GNU_AS3	cryptopp/cpu.h	125;"	d
GNU_ASJ	cryptopp/cpu.h	127;"	d
GNU_ASL	cryptopp/cpu.h	126;"	d
GZIP_OS_CODE	cryptopp/config.h	43;"	d
GeneratableCryptoMaterial	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE GeneratableCryptoMaterial : virtual public CryptoMaterial$/;"	c
GenerateBitcoins	main.cpp	/^void GenerateBitcoins(bool fGenerate, CWallet* pwallet)$/;"	f
GenerateNewKey	keystore.cpp	/^std::vector<unsigned char> CCryptoKeyStore::GenerateNewKey()$/;"	f	class:CCryptoKeyStore
GenerateNewKey	keystore.cpp	/^std::vector<unsigned char> CKeyStore::GenerateNewKey()$/;"	f	class:CKeyStore
GenerateRandom	cryptopp/cryptlib.h	/^	virtual void GenerateRandom(RandomNumberGenerator &rng, const NameValuePairs &params = g_nullNameValuePairs)$/;"	f	class:GeneratableCryptoMaterial
Generator	json/json_spirit_writer_template.h	/^        Generator( const Value_type& value, Ostream_type& os, bool pretty )$/;"	f	class:json_spirit::Generator
Generator	json/json_spirit_writer_template.h	/^    class Generator$/;"	c	namespace:json_spirit
Get	cryptopp/misc.h	/^	static inline GetBlock<T, B, GA> Get(const void *block) {return GetBlock<T, B, GA>(block);}$/;"	f	struct:BlockGetAndPut
GetAccountAddress	rpc.cpp	/^CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)$/;"	f
GetAccountAddresses	rpc.cpp	/^void GetAccountAddresses(string strAccount, set<CBitcoinAddress>& setAddress)$/;"	f
GetAccountAmounts	wallet.cpp	/^void CWalletTx::GetAccountAmounts(const string& strAccount, int64& nGenerated, int64& nReceived, $/;"	f	class:CWalletTx
GetAccountBalance	rpc.cpp	/^int64 GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth)$/;"	f
GetAccountBalance	rpc.cpp	/^int64 GetAccountBalance(const string& strAccount, int nMinDepth)$/;"	f
GetAccountCreditDebit	db.cpp	/^int64 CWalletDB::GetAccountCreditDebit(const string& strAccount)$/;"	f	class:CWalletDB
GetAddress	key.h	/^    CBitcoinAddress GetAddress() const$/;"	f	class:CKey
GetAdjustedTime	util.cpp	/^int64 GetAdjustedTime()$/;"	f
GetAlgorithm	cryptopp/cryptlib.h	/^	const Algorithm & GetAlgorithm() const {return *static_cast<const MessageAuthenticationCode *>(this);}$/;"	f	class:AuthenticatedSymmetricCipher
GetAlgorithm	cryptopp/cryptlib.h	/^	const Algorithm & GetAlgorithm() const {return *this;}$/;"	f	class:BlockCipher
GetAlgorithm	cryptopp/cryptlib.h	/^	const Algorithm & GetAlgorithm() const {return *this;}$/;"	f	class:MessageAuthenticationCode
GetAlgorithm	cryptopp/cryptlib.h	/^	const Algorithm & GetAlgorithm() const {return *this;}$/;"	f	class:SymmetricCipher
GetAlignedArray	cryptopp/secblock.h	/^	T* GetAlignedArray() {return (CRYPTOPP_BOOL_ALIGN16_ENABLED && T_Align16) ? (T*)(((byte *)m_array) + (0-(size_t)m_array)%16) : m_array;}$/;"	f	class:FixedSizeAllocatorWithCleanup
GetAlignedArray	cryptopp/secblock.h	/^	T* GetAlignedArray() {return m_array;}$/;"	f	class:FixedSizeAllocatorWithCleanup
GetAlignmentOf	cryptopp/misc.h	/^inline unsigned int GetAlignmentOf(T *dummy=NULL)	\/\/ VC60 workaround$/;"	f
GetAmounts	wallet.cpp	/^void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, list<pair<CBitcoinAddress, int64> >& listReceived,$/;"	f	class:CWalletTx
GetArg	util.h	/^inline int64 GetArg(const std::string& strArg, int64 nDefault)$/;"	f
GetArg	util.h	/^inline std::string GetArg(const std::string& strArg, const std::string& strDefault)$/;"	f
GetAutoSignalPropagation	cryptopp/cryptlib.h	/^		virtual int GetAutoSignalPropagation() const {return 0;}$/;"	f	class:BufferedTransformation
GetAutostartDir	ui.cpp	/^boost::filesystem::path GetAutostartDir()$/;"	f
GetAutostartFilePath	ui.cpp	/^boost::filesystem::path GetAutostartFilePath()$/;"	f
GetAvailableCredit	wallet.h	/^    int64 GetAvailableCredit(bool fUseCache=true) const$/;"	f	class:CWalletTx
GetBalance	wallet.cpp	/^int64 CWallet::GetBalance() const$/;"	f	class:CWallet
GetBit	cryptopp/cryptlib.h	/^	unsigned int GetBit() {return GenerateBit();}$/;"	f	class:RandomNumberGenerator
GetBitcoinAddress	script.h	/^    CBitcoinAddress GetBitcoinAddress() const$/;"	f	class:CScript
GetBlock	cryptopp/cryptlib.h	/^	void GetBlock(byte *output, size_t size) {GenerateBlock(output, size);}$/;"	f	class:RandomNumberGenerator
GetBlock	cryptopp/misc.h	/^	GetBlock(const void *block)$/;"	f	class:GetBlock
GetBlock	cryptopp/misc.h	/^class GetBlock$/;"	c
GetBlockHash	main.h	/^    uint256 GetBlockHash() const$/;"	f	class:CBlockIndex
GetBlockHash	main.h	/^    uint256 GetBlockHash() const$/;"	f	class:CDiskBlockIndex
GetBlockHash	main.h	/^    uint256 GetBlockHash()$/;"	f	class:CBlockLocator
GetBlockHeader	main.h	/^    CBlock GetBlockHeader() const$/;"	f	class:CBlockIndex
GetBlockIndex	main.h	/^    CBlockIndex* GetBlockIndex()$/;"	f	class:CBlockLocator
GetBlockTime	main.h	/^    int64 GetBlockTime() const$/;"	f	class:CBlock
GetBlockTime	main.h	/^    int64 GetBlockTime() const$/;"	f	class:CBlockIndex
GetBlockValue	main.cpp	/^int64 static GetBlockValue(int nHeight, int64 nFees)$/;"	f	file:
GetBlockWork	main.h	/^    CBigNum GetBlockWork() const$/;"	f	class:CBlockIndex
GetBlocksToMaturity	main.cpp	/^int CMerkleTx::GetBlocksToMaturity() const$/;"	f	class:CMerkleTx
GetBoolArg	util.h	/^inline bool GetBoolArg(const std::string& strArg)$/;"	f
GetByte	cryptopp/cryptlib.h	/^	byte GetByte() {return GenerateByte();}$/;"	f	class:RandomNumberGenerator
GetByte	cryptopp/misc.h	/^inline unsigned int GetByte(ByteOrder order, T value, unsigned int index)$/;"	f
GetByte	protocol.cpp	/^unsigned char CAddress::GetByte(int n) const$/;"	f	class:CAddress
GetCacheLineSize	cryptopp/cpu.h	/^inline int GetCacheLineSize()$/;"	f
GetChange	wallet.h	/^    int64 GetChange() const$/;"	f	class:CWalletTx
GetChange	wallet.h	/^    int64 GetChange(const CTransaction& tx) const$/;"	f	class:CWallet
GetChange	wallet.h	/^    int64 GetChange(const CTxOut& txout) const$/;"	f	class:CWallet
GetCipherDir	cryptopp/misc.h	/^inline CipherDir GetCipherDir(const T &obj)$/;"	f
GetCipherDirection	cryptopp/cryptlib.h	/^	inline CipherDir GetCipherDirection() const {return IsForwardTransformation() ? ENCRYPTION : DECRYPTION;}$/;"	f	class:BlockTransformation
GetCommand	protocol.cpp	/^const char* CInv::GetCommand() const$/;"	f	class:CInv
GetCommand	protocol.cpp	/^std::string CMessageHeader::GetCommand() const$/;"	f	class:CMessageHeader
GetCompact	bignum.h	/^    unsigned int GetCompact() const$/;"	f	class:CBigNum
GetConfigFile	util.cpp	/^string GetConfigFile()$/;"	f
GetCredit	wallet.h	/^    int64 GetCredit(bool fUseCache=true) const$/;"	f	class:CWalletTx
GetCredit	wallet.h	/^    int64 GetCredit(const CTransaction& tx) const$/;"	f	class:CWallet
GetCredit	wallet.h	/^    int64 GetCredit(const CTxOut& txout) const$/;"	f	class:CWallet
GetCryptoParameters	cryptopp/cryptlib.h	/^	virtual const CryptoParameters & GetCryptoParameters() const {return const_cast<KeyAgreementAlgorithm *>(this)->AccessCryptoParameters();}$/;"	f	class:KeyAgreementAlgorithm
GetCursor	db.h	/^    Dbc* GetCursor()$/;"	f	class:CDB
GetDataDir	util.cpp	/^string GetDataDir()$/;"	f
GetDataDir	util.cpp	/^void GetDataDir(char* pszDir)$/;"	f
GetDebit	wallet.cpp	/^int64 CWallet::GetDebit(const CTxIn &txin) const$/;"	f	class:CWallet
GetDebit	wallet.h	/^    int64 GetDebit() const$/;"	f	class:CWalletTx
GetDebit	wallet.h	/^    int64 GetDebit(const CTransaction& tx) const$/;"	f	class:CWallet
GetDefaultDataDir	util.cpp	/^string GetDefaultDataDir()$/;"	f
GetDefaultPort	protocol.h	/^static inline unsigned short GetDefaultPort(const bool testnet = fTestNet)$/;"	f
GetDepthInMainChain	main.cpp	/^int CMerkleTx::GetDepthInMainChain(int& nHeightRet) const$/;"	f	class:CMerkleTx
GetDepthInMainChain	main.cpp	/^int CTxIndex::GetDepthInMainChain() const$/;"	f	class:CTxIndex
GetDepthInMainChain	main.h	/^    int GetDepthInMainChain() const { int nHeight; return GetDepthInMainChain(nHeight); }$/;"	f	class:CMerkleTx
GetDifficulty	rpc.cpp	/^double GetDifficulty()$/;"	f
GetDistanceBack	main.h	/^    int GetDistanceBack()$/;"	f	class:CBlockLocator
GetErrorCode	cryptopp/cryptlib.h	/^	int GetErrorCode() const {return m_errorCode;}$/;"	f	class:OS_Error
GetErrorType	cryptopp/cryptlib.h	/^	ErrorType GetErrorType() const {return m_errorType;}$/;"	f	class:Exception
GetFilesize	util.cpp	/^int GetFilesize(FILE* file)$/;"	f
GetHash	main.h	/^    uint256 GetHash() const$/;"	f	class:CAlert
GetHash	main.h	/^    uint256 GetHash() const$/;"	f	class:CBlock
GetHash	main.h	/^    uint256 GetHash() const$/;"	f	class:CTransaction
GetHash	main.h	/^    uint256 GetHash() const$/;"	f	class:CTxOut
GetHash160	base58.h	/^    uint160 GetHash160() const$/;"	f	class:CBitcoinAddress
GetHeight	main.h	/^    int GetHeight()$/;"	f	class:CBlockLocator
GetHex	bignum.h	/^    std::string GetHex() const$/;"	f	class:CBigNum
GetHex	uint256.h	/^    std::string GetHex() const$/;"	f	class:base_uint
GetIPFromIRC	irc.cpp	/^bool GetIPFromIRC(SOCKET hSocket, string strMyName, unsigned int& ipRet)$/;"	f
GetIntValue	cryptopp/cryptlib.h	/^	CRYPTOPP_DLL bool GetIntValue(const char *name, int &value) const$/;"	f	class:NameValuePairs
GetIntValueWithDefault	cryptopp/cryptlib.h	/^	CRYPTOPP_DLL int GetIntValueWithDefault(const char *name, int defaultValue) const$/;"	f	class:NameValuePairs
GetItemText	ui.cpp	/^wxString GetItemText(wxListCtrl* listCtrl, int nIndex, int nColumn)$/;"	f
GetKey	keystore.cpp	/^bool CCryptoKeyStore::GetKey(const CBitcoinAddress &address, CKey& keyOut) const$/;"	f	class:CCryptoKeyStore
GetKey	keystore.h	/^    bool GetKey(const CBitcoinAddress &address, CKey& keyOut) const$/;"	f	class:CBasicKeyStore
GetKey	protocol.cpp	/^std::vector<unsigned char> CAddress::GetKey() const$/;"	f	class:CAddress
GetKeyFromPool	wallet.cpp	/^bool CWallet::GetKeyFromPool(vector<unsigned char>& result, bool fAllowReuse)$/;"	f	class:CWallet
GetKeyPoolSize	wallet.h	/^    int GetKeyPoolSize()$/;"	f	class:CWallet
GetListenPort	net.cpp	/^unsigned short GetListenPort()$/;"	f
GetLong	cryptopp/cryptlib.h	/^	word32 GetLong(word32 a=0, word32 b=0xffffffffL) {return GenerateWord32(a, b);}$/;"	f	class:RandomNumberGenerator
GetMaterial	cryptopp/cryptlib.h	/^	const CryptoMaterial & GetMaterial() const {return GetCryptoParameters();}$/;"	f	class:KeyAgreementAlgorithm
GetMaterial	cryptopp/cryptlib.h	/^	const CryptoMaterial & GetMaterial() const {return GetPrivateKey();}$/;"	f	class:PrivateKeyAlgorithm
GetMaterial	cryptopp/cryptlib.h	/^	const CryptoMaterial & GetMaterial() const {return GetPublicKey();}$/;"	f	class:PublicKeyAlgorithm
GetMedianTime	main.h	/^    int64 GetMedianTime() const$/;"	f	class:CBlockIndex
GetMedianTimePast	main.h	/^    int64 GetMedianTimePast() const$/;"	f	class:CBlockIndex
GetMerkleBranch	main.h	/^    std::vector<uint256> GetMerkleBranch(int nIndex) const$/;"	f	class:CBlock
GetMinFee	main.h	/^    int64 GetMinFee(unsigned int nBlockSize=1, bool fAllowFree=true, bool fForRelay=false) const$/;"	f	class:CTransaction
GetMyExternalIP	net.cpp	/^bool GetMyExternalIP(unsigned int& ipRet)$/;"	f
GetMyExternalIP2	net.cpp	/^bool GetMyExternalIP2(const CAddress& addrConnect, const char* pszGet, const char* pszKeyword, unsigned int& ipRet)$/;"	f
GetNativeByteOrder	cryptopp/misc.h	/^inline ByteOrder GetNativeByteOrder()$/;"	f
GetNextMessageSeries	cryptopp/cryptlib.h	/^		virtual bool GetNextMessageSeries() {return false;}$/;"	f	class:BufferedTransformation
GetNextWorkRequired	main.cpp	/^unsigned int static GetNextWorkRequired(const CBlockIndex* pindexLast)$/;"	f	file:
GetOldestKeyPoolTime	wallet.cpp	/^int64 CWallet::GetOldestKeyPoolTime()$/;"	f	class:CWallet
GetOp	script.h	/^    bool GetOp(const_iterator& pc, opcodetype& opcodeRet) const$/;"	f	class:CScript
GetOp	script.h	/^    bool GetOp(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet) const$/;"	f	class:CScript
GetOp	script.h	/^    bool GetOp(iterator& pc, opcodetype& opcodeRet)$/;"	f	class:CScript
GetOp	script.h	/^    bool GetOp(iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet)$/;"	f	class:CScript
GetOp2	script.h	/^    bool GetOp2(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>* pvchRet) const$/;"	f	class:CScript
GetOpName	script.h	/^inline const char* GetOpName(opcodetype opcode)$/;"	f
GetOperation	cryptopp/cryptlib.h	/^	const std::string & GetOperation() const {return m_operation;}$/;"	f	class:OS_Error
GetOptimalBlockSizeUsed	cryptopp/cryptlib.h	/^	virtual unsigned int GetOptimalBlockSizeUsed() const {return 0;}$/;"	f	class:StreamTransformation
GetOrphanRoot	main.cpp	/^uint256 static GetOrphanRoot(const CBlock* pblock)$/;"	f	file:
GetPerformanceCounter	util.h	/^inline int64 GetPerformanceCounter()$/;"	f
GetPidFile	util.cpp	/^string GetPidFile()$/;"	f
GetPrivKey	key.h	/^    CPrivKey GetPrivKey() const$/;"	f	class:CKey
GetPrivateKey	cryptopp/cryptlib.h	/^	virtual const PrivateKey & GetPrivateKey() const {return const_cast<PrivateKeyAlgorithm *>(this)->AccessPrivateKey();}$/;"	f	class:PrivateKeyAlgorithm
GetProxyAddr	ui.cpp	/^CAddress COptionsDialog::GetProxyAddr()$/;"	f	class:COptionsDialog
GetPubKey	key.h	/^    std::vector<unsigned char> GetPubKey() const$/;"	f	class:CKey
GetPubKey	keystore.cpp	/^bool CCryptoKeyStore::GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char>& vchPubKeyOut) const$/;"	f	class:CCryptoKeyStore
GetPubKey	keystore.cpp	/^bool CKeyStore::GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char> &vchPubKeyOut) const$/;"	f	class:CKeyStore
GetPublicKey	cryptopp/cryptlib.h	/^	virtual const PublicKey & GetPublicKey() const {return const_cast<PublicKeyAlgorithm *>(this)->AccessPublicKey();}$/;"	f	class:PublicKeyAlgorithm
GetRand	util.cpp	/^uint64 GetRand(uint64 nMax)$/;"	f
GetRandInt	util.cpp	/^int GetRandInt(int nMax)$/;"	f
GetRefCount	net.h	/^    int GetRefCount()$/;"	f	class:CNode
GetRequestCount	wallet.cpp	/^int CWalletTx::GetRequestCount() const$/;"	f	class:CWalletTx
GetRequiredIntParameter	cryptopp/cryptlib.h	/^	CRYPTOPP_DLL void GetRequiredIntParameter(const char *className, const char *name, int &value) const$/;"	f	class:NameValuePairs
GetRequiredParameter	cryptopp/cryptlib.h	/^	void GetRequiredParameter(const char *className, const char *name, T &value) const$/;"	f	class:NameValuePairs
GetReservedKey	wallet.cpp	/^vector<unsigned char> CReserveKey::GetReservedKey()$/;"	f	class:CReserveKey
GetRetrievingTypeInfo	cryptopp/cryptlib.h	/^		const std::type_info & GetRetrievingTypeInfo() const {return m_retrieving;}$/;"	f	class:NameValuePairs::ValueTypeMismatch
GetSecret	key.h	/^    CSecret GetSecret() const$/;"	f	class:CKey
GetSelectedAddress	ui.cpp	/^wxString CAddressBookDialog::GetSelectedAddress()$/;"	f	class:CAddressBookDialog
GetSelectedReceivingAddress	ui.cpp	/^wxString CAddressBookDialog::GetSelectedReceivingAddress()$/;"	f	class:CAddressBookDialog
GetSelectedSendingAddress	ui.cpp	/^wxString CAddressBookDialog::GetSelectedSendingAddress()$/;"	f	class:CAddressBookDialog
GetSelection	ui.cpp	/^int GetSelection(wxListCtrl* listCtrl)$/;"	f
GetSerializeSize	bignum.h	/^    unsigned int GetSerializeSize(int nType=0, int nVersion=VERSION) const$/;"	f	class:CBigNum
GetSerializeSize	serialize.h	/^    unsigned int GetSerializeSize(const T& obj)$/;"	f	class:CAutoFile
GetSerializeSize	serialize.h	/^    unsigned int GetSerializeSize(const T& obj)$/;"	f	class:CDataStream
GetSerializeSize	serialize.h	/^    unsigned int GetSerializeSize(int, int=0) const$/;"	f	class:CFixedFieldString
GetSerializeSize	serialize.h	/^    unsigned int GetSerializeSize(int, int=0) const$/;"	f	class:CFlatData
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(bool a, int, int=0)                          { return sizeof(char); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(char a,           int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(const CScript& v, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(const T& a, long nType, int nVersion=VERSION)$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(const std::vector<T, A>& v, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(double a,         int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(float a,          int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(int64 a,          int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(signed char a,    int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(signed int a,     int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(signed long a,    int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(signed short a,   int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(uint64 a,         int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(unsigned char a,  int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(unsigned int a,   int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(unsigned long a,  int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(unsigned short a, int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2>& item, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const std::basic_string<C>& str, int, int)$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const std::map<K, T, Pred, A>& m, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const std::pair<K, T>& item, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const std::set<K, Pred, A>& m, int nType, int nVersion)$/;"	f
GetSerializeSize	uint256.h	/^    unsigned int GetSerializeSize(int nType=0, int nVersion=VERSION) const$/;"	f	class:base_uint
GetSerializeSize_impl	serialize.h	/^unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&)$/;"	f
GetSerializeSize_impl	serialize.h	/^unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&)$/;"	f
GetShort	cryptopp/cryptlib.h	/^	word16 GetShort(word16 a=0, word16 b=0xffff) {return (word16)GenerateWord32(a, b);}$/;"	f	class:RandomNumberGenerator
GetSigOpCount	main.h	/^    int GetSigOpCount() const$/;"	f	class:CBlock
GetSigOpCount	main.h	/^    int GetSigOpCount() const$/;"	f	class:CTransaction
GetSigOpCount	script.h	/^    int GetSigOpCount() const$/;"	f	class:CScript
GetSizeOfCompactSize	serialize.h	/^inline unsigned int GetSizeOfCompactSize(uint64 nSize)$/;"	f
GetSockAddr	protocol.cpp	/^struct sockaddr_in CAddress::GetSockAddr() const$/;"	f	class:CAddress
GetSortIndex	ui.cpp	/^int CMainFrame::GetSortIndex(const string& strSort)$/;"	f	class:CMainFrame
GetStartOnSystemStartup	ui.cpp	/^bool GetStartOnSystemStartup() { return false; }$/;"	f
GetStartOnSystemStartup	ui.cpp	/^bool GetStartOnSystemStartup()$/;"	f
GetStoredTypeInfo	cryptopp/cryptlib.h	/^		const std::type_info & GetStoredTypeInfo() const {return m_stored;}$/;"	f	class:NameValuePairs::ValueTypeMismatch
GetThisObject	cryptopp/cryptlib.h	/^	bool GetThisObject(T &object) const$/;"	f	class:NameValuePairs
GetThisPointer	cryptopp/cryptlib.h	/^	bool GetThisPointer(T *&p) const$/;"	f	class:NameValuePairs
GetTime	util.cpp	/^int64 GetTime()$/;"	f
GetTimeMillis	util.h	/^inline int64 GetTimeMillis()$/;"	f
GetTotalBlocksEstimate	main.cpp	/^int GetTotalBlocksEstimate()$/;"	f
GetTransaction	main.cpp	/^bool static GetTransaction(const uint256& hashTx, CWalletTx& wtx)$/;"	f	file:
GetTransaction	wallet.cpp	/^bool CWallet::GetTransaction(const uint256 &hashTx, CWalletTx& wtx)$/;"	f	class:CWallet
GetTxTime	wallet.cpp	/^int64 CWalletTx::GetTxTime() const$/;"	f	class:CWalletTx
GetTxn	db.h	/^    DbTxn* GetTxn()$/;"	f	class:CDB
GetType	serialize.h	/^    int GetType()                { return nType; }$/;"	f	class:CAutoFile
GetType	serialize.h	/^    int GetType()                { return nType; }$/;"	f	class:CDataStream
GetUserKey	cryptopp/misc.h	/^inline void GetUserKey(ByteOrder order, T *out, size_t outlen, const byte *in, size_t inlen)$/;"	f
GetValue	cryptopp/cryptlib.h	/^	bool GetValue(const char *name, T &value) const$/;"	f	class:NameValuePairs
GetValue	ui.h	/^    std::string GetValue()  { return (std::string)m_textCtrl1->GetValue(); }$/;"	f	class:CGetTextFromUserDialog
GetValue1	ui.h	/^    std::string GetValue1() { return (std::string)m_textCtrl1->GetValue(); }$/;"	f	class:CGetTextFromUserDialog
GetValue2	ui.h	/^    std::string GetValue2() { return (std::string)m_textCtrl2->GetValue(); }$/;"	f	class:CGetTextFromUserDialog
GetValueNames	cryptopp/cryptlib.h	/^	CRYPTOPP_DLL std::string GetValueNames() const$/;"	f	class:NameValuePairs
GetValueOut	main.h	/^    int64 GetValueOut() const$/;"	f	class:CTransaction
GetValueWithDefault	cryptopp/cryptlib.h	/^	T GetValueWithDefault(const char *name, T defaultValue) const$/;"	f	class:NameValuePairs
GetVersion	serialize.h	/^    int GetVersion()             { return nVersion; }$/;"	f	class:CAutoFile
GetVersion	serialize.h	/^    int GetVersion()             { return nVersion; }$/;"	f	class:CDataStream
GetVoidValue	cryptopp/cryptlib.h	/^	bool GetVoidValue(const char *name, const std::type_info &valueType, void *pValue) const {return false;}$/;"	f	class:NullNameValuePairs
GetWalletFile	wallet.cpp	/^bool GetWalletFile(CWallet* pwallet, string &strWalletFileOut)$/;"	f
GetWalletPassphrase	ui.cpp	/^bool GetWalletPassphrase()$/;"	f
GetWarnings	main.cpp	/^string GetWarnings(string strFor)$/;"	f
GetWhat	cryptopp/cryptlib.h	/^	const std::string &GetWhat() const {return m_what;}$/;"	f	class:Exception
GetWord	cryptopp/misc.h	/^inline T GetWord(bool assumeAligned, ByteOrder order, const byte *block)$/;"	f
GetWord	cryptopp/misc.h	/^inline void GetWord(bool assumeAligned, ByteOrder order, T &result, const byte *block)$/;"	f
Grow	cryptopp/secblock.h	/^	void Grow(size_type newSize)$/;"	f	class:SecBlock
H	cryptopp/sha.cpp	140;"	d	file:
HAS_BERKELEY_STYLE_SOCKETS	cryptopp/config.h	370;"	d
HAS_PTHREADS	cryptopp/config.h	400;"	d
HAS_WINDOWS_STYLE_SOCKETS	cryptopp/config.h	374;"	d
HAS_WINTHREADS	cryptopp/config.h	405;"	d
HEADERS	Makefile	/^HEADERS = \\$/;"	m
HIGHRES_TIMER_AVAILABLE	cryptopp/config.h	366;"	d
HTTPAuthorized	rpc.cpp	/^bool HTTPAuthorized(map<string, string>& mapHeaders)$/;"	f
HTTPPost	rpc.cpp	/^string HTTPPost(const string& strMsg, const map<string,string>& mapRequestHeaders)$/;"	f
HTTPReply	rpc.cpp	/^static string HTTPReply(int nStatus, const string& strMsg)$/;"	f	file:
H_BITCOIN_SCRIPT	script.h	6;"	d
HandleCtrlA	ui.cpp	/^void HandleCtrlA(wxKeyEvent& event)$/;"	f
HandleSIGTERM	init.cpp	/^void HandleSIGTERM(int)$/;"	f
HasISSE	cryptopp/cpu.h	/^inline bool HasISSE()	{return true;}$/;"	f
HasISSE	cryptopp/cpu.h	/^inline bool HasISSE()$/;"	f
HasMMX	cryptopp/cpu.h	/^inline bool HasMMX()	{return true;}$/;"	f
HasMMX	cryptopp/cpu.h	/^inline bool HasMMX()$/;"	f
HasSSE2	cryptopp/cpu.h	/^inline bool HasSSE2()	{return true;}$/;"	f
HasSSE2	cryptopp/cpu.h	/^inline bool HasSSE2()$/;"	f
HasSSSE3	cryptopp/cpu.h	/^inline bool HasSSSE3()$/;"	f
Hash	util.h	/^inline uint256 Hash(const T1 p1begin, const T1 p1end,$/;"	f
Hash	util.h	/^inline uint256 Hash(const T1 pbegin, const T1 pend)$/;"	f
Hash160	util.h	/^inline uint160 Hash160(const std::vector<unsigned char>& vch)$/;"	f
HashEndianCorrectedBlock	cryptopp/iterhash.h	/^	void HashEndianCorrectedBlock(const T_HashWordType *data) {T_Transform::Transform(this->m_state, data);}$/;"	f	class:IteratedHashWithStaticTransform
HashFunction	cryptopp/cryptlib.h	/^typedef HashTransformation HashFunction;$/;"	t
HashMultipleBlocks	cryptopp/sha.cpp	/^size_t SHA224::HashMultipleBlocks(const word32 *input, size_t length)$/;"	f	class:SHA224
HashMultipleBlocks	cryptopp/sha.cpp	/^size_t SHA256::HashMultipleBlocks(const word32 *input, size_t length)$/;"	f	class:SHA256
HashTransformation	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE HashTransformation : public Algorithm$/;"	c
HashWordType	cryptopp/iterhash.h	/^    typedef T_HashWordType HashWordType;$/;"	t	class:IteratedHashWithStaticTransform
HaveKey	keystore.h	/^    bool HaveKey(const CBitcoinAddress &address) const$/;"	f	class:CBasicKeyStore
HaveKey	keystore.h	/^    bool HaveKey(const CBitcoinAddress &address) const$/;"	f	class:CCryptoKeyStore
HexNumStr	util.h	/^inline std::string HexNumStr(const std::vector<unsigned char>& vch, bool f0x=true)$/;"	f
HexNumStr	util.h	/^std::string HexNumStr(const T itbegin, const T itend, bool f0x=true)$/;"	f
HexStr	util.h	/^inline std::string HexStr(const std::vector<unsigned char>& vch, bool fSpaces=false)$/;"	f
HexStr	util.h	/^std::string HexStr(const T itbegin, const T itend, bool fSpaces=false)$/;"	f
Hide	ui.cpp	/^void CMyTaskBarIcon::Hide()$/;"	f	class:CMyTaskBarIcon
HtmlEscape	ui.cpp	/^string HtmlEscape(const char* psz, bool fMultiLine=false)$/;"	f
HtmlEscape	ui.cpp	/^string HtmlEscape(const string& str, bool fMultiLine=false)$/;"	f
ID_TASKBAR_EXIT	ui.cpp	/^    ID_TASKBAR_EXIT,$/;"	e	enum:__anon9	file:
ID_TASKBAR_GENERATE	ui.cpp	/^    ID_TASKBAR_GENERATE,$/;"	e	enum:__anon9	file:
ID_TASKBAR_OPTIONS	ui.cpp	/^    ID_TASKBAR_OPTIONS,$/;"	e	enum:__anon9	file:
ID_TASKBAR_RESTORE	ui.cpp	/^    ID_TASKBAR_RESTORE = 10001,$/;"	e	enum:__anon9	file:
ID_TASKBAR_SEND	ui.cpp	/^    ID_TASKBAR_SEND,$/;"	e	enum:__anon9	file:
IF0	cryptopp/cpu.h	149;"	d
IF1	cryptopp/cpu.h	150;"	d
IMPLEMENT_RANDOMIZE_STACK	util.h	475;"	d
IMPLEMENT_SERIALIZE	serialize.h	92;"	d
INFINITE_TIME	cryptopp/cryptlib.h	/^const unsigned long INFINITE_TIME = ULONG_MAX;$/;"	v
INT64_MAX	util.h	89;"	d
INT64_MIN	util.h	90;"	d
INTERNALLY_GENERATED_IV	cryptopp/cryptlib.h	/^	enum IV_Requirement {UNIQUE_IV = 0, RANDOM_IV, UNPREDICTABLE_RANDOM_IV, INTERNALLY_GENERATED_IV, NOT_RESYNCHRONIZABLE};$/;"	e	enum:SimpleKeyingInterface::IV_Requirement
INVALID_ARGUMENT	cryptopp/cryptlib.h	/^		INVALID_ARGUMENT,$/;"	e	enum:Exception::ErrorType
INVALID_DATA_FORMAT	cryptopp/cryptlib.h	/^		INVALID_DATA_FORMAT,$/;"	e	enum:Exception::ErrorType
INVALID_SOCKET	util.h	108;"	d
IO_ERROR	cryptopp/cryptlib.h	/^		IO_ERROR,$/;"	e	enum:Exception::ErrorType
IS_BIG_ENDIAN	cryptopp/config.h	15;"	d
IS_LITTLE_ENDIAN	cryptopp/config.h	21;"	d
IVSize	cryptopp/cryptlib.h	/^	virtual unsigned int IVSize() const {throw NotImplemented(GetAlgorithm().AlgorithmName() + ": this object doesn't support resynchronization");}$/;"	f	class:SimpleKeyingInterface
IV_Requirement	cryptopp/cryptlib.h	/^	enum IV_Requirement {UNIQUE_IV = 0, RANDOM_IV, UNPREDICTABLE_RANDOM_IV, INTERNALLY_GENERATED_IV, NOT_RESYNCHRONIZABLE};$/;"	g	class:SimpleKeyingInterface
IncorporateEntropy	cryptopp/cryptlib.h	/^	virtual void IncorporateEntropy(const byte *input, size_t length) {throw NotImplemented("RandomNumberGenerator: IncorporateEntropy not implemented");}$/;"	f	class:RandomNumberGenerator
IncrementCounterByOne	cryptopp/misc.h	/^inline void IncrementCounterByOne(byte *inout, unsigned int s)$/;"	f
IncrementCounterByOne	cryptopp/misc.h	/^inline void IncrementCounterByOne(byte *output, const byte *input, unsigned int s)$/;"	f
IncrementExtraNonce	main.cpp	/^void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce, int64& nPrevTime)$/;"	f
Init	cryptopp/iterhash.h	/^	void Init() {T_Transform::InitState(this->m_state);}$/;"	f	class:IteratedHashWithStaticTransform
Init	main.h	/^    void Init()$/;"	f	class:CMerkleTx
Init	protocol.cpp	/^void CAddress::Init()$/;"	f	class:CAddress
Init	serialize.h	/^    void Init(int nTypeIn=SER_NETWORK, int nVersionIn=VERSION)$/;"	f	class:CDataStream
Init	wallet.h	/^    void Init(const CWallet* pwalletIn)$/;"	f	class:CWalletTx
InitState	cryptopp/sha.cpp	/^void SHA1::InitState(HashWordType *state)$/;"	f	class:SHA1
InitState	cryptopp/sha.cpp	/^void SHA224::InitState(HashWordType *state)$/;"	f	class:SHA224
InitState	cryptopp/sha.cpp	/^void SHA256::InitState(HashWordType *state)$/;"	f	class:SHA256
InitState	cryptopp/sha.cpp	/^void SHA384::InitState(HashWordType *state)$/;"	f	class:SHA384
InitState	cryptopp/sha.cpp	/^void SHA512::InitState(HashWordType *state)$/;"	f	class:SHA512
Initialize	ui.cpp	/^bool CMyApp::Initialize(int& argc, wxChar** argv)$/;"	f	class:CMyApp
InsertBlockIndex	db.cpp	/^CBlockIndex static * InsertBlockIndex(uint256 hash)$/;"	f	file:
InsertLine	ui.cpp	/^int InsertLine(wxListCtrl* listCtrl, const wxString& str0, const wxString& str1)$/;"	f
InsertLine	ui.cpp	/^int InsertLine(wxListCtrl* listCtrl, const wxString& str0, const wxString& str1, const wxString& str2, const wxString& str3, const wxString& str4)$/;"	f
InsertLine	ui.cpp	/^int InsertLine(wxListCtrl* listCtrl, void* pdata, const wxString& str0, const wxString& str1, const wxString& str2, const wxString& str3, const wxString& str4)$/;"	f
InsertLine	ui.cpp	/^void CMainFrame::InsertLine(bool fNew, int nIndex, uint256 hashKey, string strSort, const wxColour& colour, const wxString& str2, const wxString& str3, const wxString& str4, const wxString& str5, const wxString& str6)$/;"	f	class:CMainFrame
InsertTransaction	ui.cpp	/^bool CMainFrame::InsertTransaction(const CWalletTx& wtx, bool fNew, int nIndex)$/;"	f	class:CMainFrame
IntToString	cryptopp/misc.h	/^std::string IntToString(T a, unsigned int base = 10)$/;"	f
InvalidArgument	cryptopp/cryptlib.h	/^	explicit InvalidArgument(const std::string &s) : Exception(INVALID_ARGUMENT, s) {}$/;"	f	class:InvalidArgument
InvalidArgument	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL InvalidArgument : public Exception$/;"	c
InvalidChainFound	main.cpp	/^void static InvalidChainFound(CBlockIndex* pindexNew)$/;"	f	file:
InvalidChannelName	cryptopp/cryptlib.h	/^			{InvalidChannelName(const std::string &name, const std::string &channel) : InvalidArgument(name + ": unexpected channel name \\"" + channel + "\\"") {}};$/;"	f	struct:BufferedTransformation::InvalidChannelName
InvalidChannelName	cryptopp/cryptlib.h	/^		struct InvalidChannelName : public InvalidArgument$/;"	s	class:BufferedTransformation
InvalidCiphertext	cryptopp/cryptlib.h	/^	explicit InvalidCiphertext(const std::string &s) : InvalidDataFormat(s) {}$/;"	f	class:InvalidCiphertext
InvalidCiphertext	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL InvalidCiphertext : public InvalidDataFormat$/;"	c
InvalidDataFormat	cryptopp/cryptlib.h	/^	explicit InvalidDataFormat(const std::string &s) : Exception(INVALID_DATA_FORMAT, s) {}$/;"	f	class:InvalidDataFormat
InvalidDataFormat	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL InvalidDataFormat : public Exception$/;"	c
InvalidKeyLength	cryptopp/cryptlib.h	/^		InvalidKeyLength(const std::string &message) : Exception(OTHER_ERROR, message) {}$/;"	f	class:PK_SignatureScheme::InvalidKeyLength
InvalidKeyLength	cryptopp/cryptlib.h	/^	class CRYPTOPP_DLL InvalidKeyLength : public Exception$/;"	c	class:PK_SignatureScheme
InvalidMaterial	cryptopp/cryptlib.h	/^		explicit InvalidMaterial(const std::string &s) : InvalidDataFormat(s) {}$/;"	f	class:CryptoMaterial::InvalidMaterial
InvalidMaterial	cryptopp/cryptlib.h	/^	class CRYPTOPP_DLL InvalidMaterial : public InvalidDataFormat$/;"	c	class:CryptoMaterial
InvalidPlaintextLength	cryptopp/cryptlib.h	/^		InvalidPlaintextLength() : Exception(OTHER_ERROR, "PK_Encryptor: invalid plaintext length") {}$/;"	f	class:PK_Encryptor::InvalidPlaintextLength
InvalidPlaintextLength	cryptopp/cryptlib.h	/^	class CRYPTOPP_DLL InvalidPlaintextLength : public Exception$/;"	c	class:PK_Encryptor
Inventory	main.cpp	/^void static Inventory(const uint256& hash)$/;"	f	file:
Inventory	wallet.h	/^    void Inventory(const uint256 &hash)$/;"	f	class:CWallet
Is24HourTime	ui.cpp	/^bool Is24HourTime()$/;"	f
IsAligned	cryptopp/misc.h	/^inline bool IsAligned(const void *p, T *dummy=NULL)	\/\/ VC60 workaround$/;"	f
IsAlignedOn	cryptopp/misc.h	/^inline bool IsAlignedOn(const void *p, unsigned int alignment)$/;"	f
IsChange	wallet.h	/^    bool IsChange(const CTxOut& txout) const$/;"	f	class:CWallet
IsCoinBase	main.h	/^    bool IsCoinBase() const$/;"	f	class:CTransaction
IsConfirmed	wallet.h	/^    bool IsConfirmed() const$/;"	f	class:CWalletTx
IsCrypted	keystore.h	/^    bool IsCrypted() const$/;"	f	class:CCryptoKeyStore
IsFinal	main.h	/^    bool IsFinal() const$/;"	f	class:CTxIn
IsFinal	main.h	/^    bool IsFinal(int nBlockHeight=0, int64 nBlockTime=0) const$/;"	f	class:CTransaction
IsFromMe	main.cpp	/^bool static IsFromMe(CTransaction& tx)$/;"	f	file:
IsFromMe	wallet.h	/^    bool IsFromMe() const$/;"	f	class:CWalletTx
IsFromMe	wallet.h	/^    bool IsFromMe(const CTransaction& tx) const$/;"	f	class:CWallet
IsIPv4	protocol.cpp	/^bool CAddress::IsIPv4() const$/;"	f	class:CAddress
IsInEffect	main.h	/^    bool IsInEffect() const$/;"	f	class:CAlert
IsInMainChain	main.h	/^    bool IsInMainChain() const { return GetDepthInMainChain() > 0; }$/;"	f	class:CMerkleTx
IsInMainChain	main.h	/^    bool IsInMainChain() const$/;"	f	class:CBlockIndex
IsInitialBlockDownload	main.cpp	/^bool IsInitialBlockDownload()$/;"	f
IsKnownType	protocol.cpp	/^bool CInv::IsKnownType() const$/;"	f	class:CInv
IsLocal	protocol.cpp	/^bool CAddress::IsLocal() const$/;"	f	class:CAddress
IsLocked	keystore.h	/^    bool IsLocked() const$/;"	f	class:CCryptoKeyStore
IsMine	script.cpp	/^bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)$/;"	f
IsMine	wallet.cpp	/^bool CWallet::IsMine(const CTxIn &txin) const$/;"	f	class:CWallet
IsMine	wallet.h	/^    bool IsMine(const CTransaction& tx) const$/;"	f	class:CWallet
IsMine	wallet.h	/^    bool IsMine(const CTxOut& txout) const$/;"	f	class:CWallet
IsNewerThan	main.h	/^    bool IsNewerThan(const CTransaction& old) const$/;"	f	class:CTransaction
IsNull	key.h	/^    bool IsNull() const$/;"	f	class:CKey
IsNull	main.h	/^    bool IsNull() const { return (hash == 0 && n == -1); }$/;"	f	class:COutPoint
IsNull	main.h	/^    bool IsNull() const { return (nFile == -1); }$/;"	f	class:CDiskTxPos
IsNull	main.h	/^    bool IsNull() const { return (ptx == NULL && n == -1); }$/;"	f	class:CInPoint
IsNull	main.h	/^    bool IsNull() const$/;"	f	class:CAlert
IsNull	main.h	/^    bool IsNull() const$/;"	f	class:CBlock
IsNull	main.h	/^    bool IsNull() const$/;"	f	class:CTransaction
IsNull	main.h	/^    bool IsNull()$/;"	f	class:CBlockLocator
IsNull	main.h	/^    bool IsNull()$/;"	f	class:CTxIndex
IsNull	main.h	/^    bool IsNull()$/;"	f	class:CTxOut
IsNull	net.h	/^    bool IsNull()$/;"	f	class:CRequestTracker
IsP4	cryptopp/cpu.h	/^inline bool IsP4()$/;"	f
IsPermutation	cryptopp/cryptlib.h	/^	virtual bool IsPermutation() const {return true;}$/;"	f	class:BlockTransformation
IsPowerOf2	cryptopp/misc.h	/^inline bool IsPowerOf2(const T &n)$/;"	f
IsPushOnly	script.h	/^    bool IsPushOnly() const$/;"	f	class:CScript
IsRFC1918	protocol.cpp	/^bool CAddress::IsRFC1918() const$/;"	f	class:CAddress
IsRFC3927	protocol.cpp	/^bool CAddress::IsRFC3927() const$/;"	f	class:CAddress
IsResynchronizable	cryptopp/cryptlib.h	/^	bool IsResynchronizable() const {return IVRequirement() < NOT_RESYNCHRONIZABLE;}$/;"	f	class:SimpleKeyingInterface
IsRoutable	protocol.cpp	/^bool CAddress::IsRoutable() const$/;"	f	class:CAddress
IsSpent	wallet.h	/^    bool IsSpent(unsigned int nOut) const$/;"	f	class:CWalletTx
IsStandard	main.h	/^    bool IsStandard() const$/;"	f	class:CTransaction
IsStandard	script.cpp	/^bool IsStandard(const CScript& scriptPubKey)$/;"	f
IsSubscribed	net.cpp	/^bool CNode::IsSubscribed(unsigned int nChannel)$/;"	f	class:CNode
IsSwitchChar	util.h	/^inline bool IsSwitchChar(char c)$/;"	f
IsValid	base58.h	/^    bool IsValid() const$/;"	f	class:CBitcoinAddress
IsValid	protocol.cpp	/^bool CAddress::IsValid() const$/;"	f	class:CAddress
IsValid	protocol.cpp	/^bool CMessageHeader::IsValid() const$/;"	f	class:CMessageHeader
IsValidKeyLength	cryptopp/cryptlib.h	/^	virtual bool IsValidKeyLength(size_t n) const$/;"	f	class:SimpleKeyingInterface
IsolatedInitialize	cryptopp/cryptlib.h	/^		virtual void IsolatedInitialize(const NameValuePairs &parameters) {throw NotImplemented("BufferedTransformation: this object can't be reinitialized");}$/;"	f	class:BufferedTransformation
IsolatedMessageSeriesEnd	cryptopp/cryptlib.h	/^		virtual bool IsolatedMessageSeriesEnd(bool blocking) {return false;}$/;"	f	class:BufferedTransformation
IteratedHashWithStaticTransform	cryptopp/iterhash.h	/^	IteratedHashWithStaticTransform() {this->Init();}$/;"	f	class:IteratedHashWithStaticTransform
IteratedHashWithStaticTransform	cryptopp/iterhash.h	/^class CRYPTOPP_NO_VTABLE IteratedHashWithStaticTransform$/;"	c
JSONRPCError	rpc.cpp	/^Object JSONRPCError(int code, const string& message)$/;"	f
JSONRPCReply	rpc.cpp	/^string JSONRPCReply(const Value& result, const Value& error, const Value& id)$/;"	f
JSONRPCRequest	rpc.cpp	/^string JSONRPCRequest(const string& strMethod, const Array& params, const Value& id)$/;"	f
JSON_SPIRIT	json/json_spirit.h	2;"	d
JSON_SPIRIT_ERROR_POSITION	json/json_spirit_error_position.h	2;"	d
JSON_SPIRIT_READER	json/json_spirit_reader.h	2;"	d
JSON_SPIRIT_READER_TEMPLATE	json/json_spirit_reader_template.h	2;"	d
JSON_SPIRIT_READ_STREAM	json/json_spirit_stream_reader.h	2;"	d
JSON_SPIRIT_UTILS	json/json_spirit_utils.h	2;"	d
JSON_SPIRIT_VALUE	json/json_spirit_value.h	2;"	d
JSON_SPIRIT_WRITER	json/json_spirit_writer.h	2;"	d
JSON_SPIRIT_WRITER_TEMPLATE	json/json_spirit_writer_template.h	2;"	d
Json_grammer	json/json_spirit_reader_template.h	/^        Json_grammer( Semantic_actions_t& semantic_actions )$/;"	f	class:json_spirit::Json_grammer
Json_grammer	json/json_spirit_reader_template.h	/^    class Json_grammer : public spirit_namespace::grammar< Json_grammer< Value_type, Iter_type > >$/;"	c	namespace:json_spirit
K_END	cryptopp/sha.cpp	152;"	d	file:
KeepKey	wallet.cpp	/^void CReserveKey::KeepKey()$/;"	f	class:CReserveKey
KeepKey	wallet.cpp	/^void CWallet::KeepKey(int64 nIndex)$/;"	f	class:CWallet
KeyAgreementAlgorithm	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE KeyAgreementAlgorithm : public AsymmetricAlgorithm$/;"	c
KeyMap	keystore.h	/^typedef std::map<CBitcoinAddress, CSecret> KeyMap;$/;"	t
KeyTooShort	cryptopp/cryptlib.h	/^		KeyTooShort() : InvalidKeyLength("PK_Signer: key too short for this signature scheme") {}$/;"	f	class:PK_SignatureScheme::KeyTooShort
KeyTooShort	cryptopp/cryptlib.h	/^	class CRYPTOPP_DLL KeyTooShort : public InvalidKeyLength$/;"	c	class:PK_SignatureScheme
Kt	cryptopp/sha.cpp	156;"	d	file:
LIBS	Makefile	/^LIBS= \\$/;"	m
LITTLE_ENDIAN_ORDER	cryptopp/cryptlib.h	/^enum ByteOrder {LITTLE_ENDIAN_ORDER = 0, BIG_ENDIAN_ORDER = 1};$/;"	e	enum:ByteOrder
LOCALS_SIZE	cryptopp/sha.cpp	139;"	d	file:
LOCKTIME_THRESHOLD	main.h	/^static const int LOCKTIME_THRESHOLD = 500000000; \/\/ Tue Nov  5 00:53:20 1985 UTC$/;"	v
LWORD_MAX	cryptopp/config.h	/^const lword LWORD_MAX = W64LIT(0xffffffffffffffff);$/;"	v
Leave	util.cpp	/^void CCriticalSection::Leave()$/;"	f	class:CCriticalSection
LeftShift	cryptopp/misc.h	/^	static inline T LeftShift(T value, unsigned int bits)$/;"	f	struct:SafeShifter
ListAccountCreditDebit	db.cpp	/^void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountingEntry>& entries)$/;"	f	class:CWalletDB
ListMined	rpc.cpp	/^Value ListMined(const Array& params, bool fByAccounts)$/;"	f
ListReceived	rpc.cpp	/^Value ListReceived(const Array& params, bool fByAccounts)$/;"	f
ListTransactions	rpc.cpp	/^void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret)$/;"	f
LittleEndian	cryptopp/cryptlib.h	/^typedef EnumToType<ByteOrder, LITTLE_ENDIAN_ORDER> LittleEndian;$/;"	t
Load	cryptopp/cryptlib.h	/^	virtual void Load(BufferedTransformation &bt)$/;"	f	class:CryptoMaterial
LoadAddresses	db.cpp	/^bool CAddrDB::LoadAddresses()$/;"	f	class:CAddrDB
LoadAddresses	db.cpp	/^bool LoadAddresses()$/;"	f
LoadBlockIndex	db.cpp	/^bool CTxDB::LoadBlockIndex()$/;"	f	class:CTxDB
LoadBlockIndex	main.cpp	/^bool LoadBlockIndex(bool fAllowNew)$/;"	f
LoadCryptedKey	wallet.h	/^    bool LoadCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) { return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret); }$/;"	f	class:CWallet
LoadKey	wallet.h	/^    bool LoadKey(const CKey& key) { return CCryptoKeyStore::AddKey(key); }$/;"	f	class:CWallet
LoadPrecomputation	cryptopp/cryptlib.h	/^	virtual void LoadPrecomputation(BufferedTransformation &storedPrecomputation)$/;"	f	class:CryptoMaterial
LoadWallet	db.cpp	/^int CWalletDB::LoadWallet(CWallet* pwallet)$/;"	f	class:CWalletDB
LoadWallet	wallet.cpp	/^int CWallet::LoadWallet(bool& fFirstRunRet)$/;"	f	class:CWallet
Lock	keystore.h	/^    bool Lock()$/;"	f	class:CCryptoKeyStore
LockStack	util.cpp	/^typedef std::vector< std::pair<CCriticalSection*, CLockLocation> > LockStack;$/;"	t	file:
LogException	util.cpp	/^void LogException(std::exception* pex, const char* pszThread)$/;"	f
Lookup	net.cpp	/^bool Lookup(const char *pszName, CAddress& addr, int nServices, bool fAllowLookup, int portDefault, bool fAllowPort)$/;"	f
Lookup	net.cpp	/^bool Lookup(const char *pszName, vector<CAddress>& vaddr, int nServices, int nMaxSolutions, bool fAllowLookup, int portDefault, bool fAllowPort)$/;"	f
MAX_BLOCK_SIGOPS	main.h	/^static const int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE\/50;$/;"	v
MAX_BLOCK_SIZE	main.h	/^static const unsigned int MAX_BLOCK_SIZE = 1000000;$/;"	v
MAX_BLOCK_SIZE_GEN	main.h	/^static const unsigned int MAX_BLOCK_SIZE_GEN = MAX_BLOCK_SIZE\/2;$/;"	v
MAX_MONEY	main.h	/^static const int64 MAX_MONEY = 21000000 * COIN;$/;"	v
MAX_OUTBOUND_CONNECTIONS	net.cpp	/^static const int MAX_OUTBOUND_CONNECTIONS = 8;$/;"	v	file:
MAX_PATH	util.h	114;"	d
MAX_SIZE	serialize.h	/^static const unsigned int MAX_SIZE = 0x02000000;$/;"	v
MIN_RELAY_TX_FEE	main.h	/^static const int64 MIN_RELAY_TX_FEE = 10000;$/;"	v
MIN_TX_FEE	main.h	/^static const int64 MIN_TX_FEE = 50000;$/;"	v
MSG_BLOCK	net.h	/^    MSG_BLOCK,$/;"	e	enum:__anon5
MSG_DONTWAIT	util.h	86;"	d
MSG_NOSIGNAL	util.h	85;"	d
MSG_TX	net.h	/^    MSG_TX = 1,$/;"	e	enum:__anon5
MainFrameRepaint	noui.h	/^inline void MainFrameRepaint()$/;"	f
MainFrameRepaint	ui.cpp	/^void MainFrameRepaint()$/;"	f
Maj	cryptopp/sha.cpp	467;"	d	file:
MakeNewKey	key.h	/^    void MakeNewKey()$/;"	f	class:CKey
MakeSameSize	script.cpp	/^void MakeSameSize(valtype& vch1, valtype& vch2)$/;"	f
MandatoryBlockSize	cryptopp/cryptlib.h	/^	virtual unsigned int MandatoryBlockSize() const {return 1;}$/;"	f	class:StreamTransformation
MapPort	net.cpp	/^void MapPort(bool \/* unused fMapPort *\/)$/;"	f
MapPort	net.cpp	/^void MapPort(bool fMapPort)$/;"	f
Mapped_obj	json/json_spirit_utils.h	/^    typedef std::map< std::string, Value > Mapped_obj;$/;"	t	namespace:json_spirit
MarkDirty	wallet.h	/^    void MarkDirty()$/;"	f	class:CWalletTx
MarkSpent	wallet.h	/^    void MarkSpent(unsigned int nOut)$/;"	f	class:CWalletTx
MasterKeyMap	wallet.h	/^    typedef std::map<unsigned int, CMasterKey> MasterKeyMap;$/;"	t	class:CWallet
MaxFooterLength	cryptopp/cryptlib.h	/^	virtual lword MaxFooterLength() const {return 0;}$/;"	f	class:AuthenticatedSymmetricCipher
MaxIVLength	cryptopp/cryptlib.h	/^	virtual unsigned int MaxIVLength() const {return IVSize();}$/;"	f	class:SimpleKeyingInterface
MaxPlainTextLength	cryptopp/cryptlib.h	/^	size_t MaxPlainTextLength(size_t cipherTextLength) const {return MaxPlaintextLength(cipherTextLength);}$/;"	f	class:PK_CryptoSystem
MaxRetrieveable	cryptopp/cryptlib.h	/^		unsigned long MaxRetrieveable() const {return MaxRetrievable();}$/;"	f	class:BufferedTransformation
MaxSignatureLength	cryptopp/cryptlib.h	/^	virtual size_t MaxSignatureLength(size_t recoverablePartLength = 0) const {return SignatureLength();}$/;"	f	class:PK_SignatureScheme
MessageAuthenticationCode	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE MessageAuthenticationCode : public SimpleKeyingInterface, public HashTransformation$/;"	c
MessageEnd	cryptopp/cryptlib.h	/^		bool MessageEnd(int propagation=-1, bool blocking=true)$/;"	f	class:BufferedTransformation
MinIVLength	cryptopp/cryptlib.h	/^	virtual unsigned int MinIVLength() const {return IVSize();}$/;"	f	class:SimpleKeyingInterface
MinLastBlockSize	cryptopp/cryptlib.h	/^	virtual unsigned int MinLastBlockSize() const {return 0;}$/;"	f	class:StreamTransformation
ModPowerOf2	cryptopp/misc.h	/^inline T2 ModPowerOf2(const T1 &a, const T2 &b)$/;"	f
MoneyRange	main.h	/^inline bool MoneyRange(int64 nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }$/;"	f
Mp_iter	json/json_spirit_reader_template.h	/^        typedef spirit_namespace::multi_pass< istream_iter > Mp_iter;$/;"	t	struct:json_spirit::Multi_pass_iters
Mp_iters	json/json_spirit_stream_reader.h	/^        typedef Multi_pass_iters< Istream_type > Mp_iters;$/;"	t	class:json_spirit::Stream_reader
Mp_iters	json/json_spirit_stream_reader.h	/^        typedef Multi_pass_iters< Istream_type > Mp_iters;$/;"	t	class:json_spirit::Stream_reader_thrower
Multi_pass_iters	json/json_spirit_reader_template.h	/^        Multi_pass_iters( Istream_type& is )$/;"	f	struct:json_spirit::Multi_pass_iters
Multi_pass_iters	json/json_spirit_reader_template.h	/^    struct Multi_pass_iters$/;"	s	namespace:json_spirit
MyGetSpecialFolderPath	util.cpp	/^string MyGetSpecialFolderPath(int nFolder, bool fCreate)$/;"	f
MyMessageBox	noui.h	/^inline int MyMessageBox(const std::string& message, const std::string& caption="Message", int style=wxOK, wxWindow* parent=NULL, int x=-1, int y=-1)$/;"	f
MyMessageBox	ui.h	/^inline int MyMessageBox(const wxString& message, const wxString& caption="Message", int style=wxOK, wxWindow* parent=NULL, int x=-1, int y=-1)$/;"	f
NAMESPACE_BEGIN	cryptopp/config.h	77;"	d
NAMESPACE_BEGIN	cryptopp/config.h	82;"	d
NAMESPACE_END	cryptopp/config.h	78;"	d
NAMESPACE_END	cryptopp/config.h	83;"	d
NAMESPACE_END	cryptopp/cpu.h	9;"	d
NODE_NETWORK	protocol.h	/^    NODE_NETWORK = (1 << 0),$/;"	e	enum:__anon11
NONBLOCKING_RNG_AVAILABLE	cryptopp/config.h	392;"	d
NONBLOCKING_RNG_AVAILABLE	cryptopp/config.h	397;"	d
NOT_IMPLEMENTED	cryptopp/cryptlib.h	/^		NOT_IMPLEMENTED,$/;"	e	enum:Exception::ErrorType
NOT_RESYNCHRONIZABLE	cryptopp/cryptlib.h	/^	enum IV_Requirement {UNIQUE_IV = 0, RANDOM_IV, UNPREDICTABLE_RANDOM_IV, INTERNALLY_GENERATED_IV, NOT_RESYNCHRONIZABLE};$/;"	e	enum:SimpleKeyingInterface::IV_Requirement
NULL_CHANNEL	cryptopp/cryptlib.h	/^	static const std::string &NULL_CHANNEL;	\/\/ same as DEFAULT_CHANNEL, for backwards compatibility$/;"	m	class:BufferedTransformation
NameValuePairs	cryptopp/cryptlib.h	/^class CRYPTOPP_NO_VTABLE NameValuePairs$/;"	c
NativeByteOrder	cryptopp/misc.h	/^	typedef BigEndian NativeByteOrder;$/;"	t
NativeByteOrder	cryptopp/misc.h	/^	typedef LittleEndian NativeByteOrder;$/;"	t
NativeByteOrderIs	cryptopp/misc.h	/^inline bool NativeByteOrderIs(ByteOrder order)$/;"	f
NeedsPrespecifiedDataLengths	cryptopp/cryptlib.h	/^	virtual bool NeedsPrespecifiedDataLengths() const {return false;}$/;"	f	class:AuthenticatedSymmetricCipher
New	cryptopp/secblock.h	/^	void New(size_type newSize)$/;"	f	class:SecBlock
NewObject	cryptopp/misc.h	/^struct NewObject$/;"	s
NoChannelSupport	cryptopp/cryptlib.h	/^			{NoChannelSupport(const std::string &name) : NotImplemented(name + ": this object doesn't support multiple channels") {}};$/;"	f	struct:BufferedTransformation::NoChannelSupport
NoChannelSupport	cryptopp/cryptlib.h	/^		struct NoChannelSupport : public NotImplemented$/;"	s	class:BufferedTransformation
NotCopyable	cryptopp/misc.h	/^	NotCopyable() {}$/;"	f	class:NotCopyable
NotCopyable	cryptopp/misc.h	/^class NotCopyable$/;"	c
NotImplemented	cryptopp/cryptlib.h	/^	explicit NotImplemented(const std::string &s) : Exception(NOT_IMPLEMENTED, s) {}$/;"	f	class:NotImplemented
NotImplemented	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL NotImplemented : public Exception$/;"	c
NullAllocator	cryptopp/secblock.h	/^class NullAllocator : public AllocatorBase<T>$/;"	c
NullNameValuePairs	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL NullNameValuePairs : public NameValuePairs$/;"	c
NumberOfMessageSeries	cryptopp/cryptlib.h	/^		virtual unsigned int NumberOfMessageSeries() const {return 0;}$/;"	f	class:BufferedTransformation
NumberOfMessagesInThisSeries	cryptopp/cryptlib.h	/^		virtual unsigned int NumberOfMessagesInThisSeries() const {return NumberOfMessages();}$/;"	f	class:BufferedTransformation
OBJS	Makefile	/^OBJS= \\$/;"	m
OP_0	script.h	/^    OP_0=0,$/;"	e	enum:opcodetype
OP_0NOTEQUAL	script.h	/^    OP_0NOTEQUAL,$/;"	e	enum:opcodetype
OP_1	script.h	/^    OP_1,$/;"	e	enum:opcodetype
OP_10	script.h	/^    OP_10,$/;"	e	enum:opcodetype
OP_11	script.h	/^    OP_11,$/;"	e	enum:opcodetype
OP_12	script.h	/^    OP_12,$/;"	e	enum:opcodetype
OP_13	script.h	/^    OP_13,$/;"	e	enum:opcodetype
OP_14	script.h	/^    OP_14,$/;"	e	enum:opcodetype
OP_15	script.h	/^    OP_15,$/;"	e	enum:opcodetype
OP_16	script.h	/^    OP_16,$/;"	e	enum:opcodetype
OP_1ADD	script.h	/^    OP_1ADD,$/;"	e	enum:opcodetype
OP_1NEGATE	script.h	/^    OP_1NEGATE,$/;"	e	enum:opcodetype
OP_1SUB	script.h	/^    OP_1SUB,$/;"	e	enum:opcodetype
OP_2	script.h	/^    OP_2,$/;"	e	enum:opcodetype
OP_2DIV	script.h	/^    OP_2DIV,$/;"	e	enum:opcodetype
OP_2DROP	script.h	/^    OP_2DROP,$/;"	e	enum:opcodetype
OP_2DUP	script.h	/^    OP_2DUP,$/;"	e	enum:opcodetype
OP_2MUL	script.h	/^    OP_2MUL,$/;"	e	enum:opcodetype
OP_2OVER	script.h	/^    OP_2OVER,$/;"	e	enum:opcodetype
OP_2ROT	script.h	/^    OP_2ROT,$/;"	e	enum:opcodetype
OP_2SWAP	script.h	/^    OP_2SWAP,$/;"	e	enum:opcodetype
OP_3	script.h	/^    OP_3,$/;"	e	enum:opcodetype
OP_3DUP	script.h	/^    OP_3DUP,$/;"	e	enum:opcodetype
OP_4	script.h	/^    OP_4,$/;"	e	enum:opcodetype
OP_5	script.h	/^    OP_5,$/;"	e	enum:opcodetype
OP_6	script.h	/^    OP_6,$/;"	e	enum:opcodetype
OP_7	script.h	/^    OP_7,$/;"	e	enum:opcodetype
OP_8	script.h	/^    OP_8,$/;"	e	enum:opcodetype
OP_9	script.h	/^    OP_9,$/;"	e	enum:opcodetype
OP_ABS	script.h	/^    OP_ABS,$/;"	e	enum:opcodetype
OP_ADD	script.h	/^    OP_ADD,$/;"	e	enum:opcodetype
OP_AND	script.h	/^    OP_AND,$/;"	e	enum:opcodetype
OP_BOOLAND	script.h	/^    OP_BOOLAND,$/;"	e	enum:opcodetype
OP_BOOLOR	script.h	/^    OP_BOOLOR,$/;"	e	enum:opcodetype
OP_CAT	script.h	/^    OP_CAT,$/;"	e	enum:opcodetype
OP_CHECKMULTISIG	script.h	/^    OP_CHECKMULTISIG,$/;"	e	enum:opcodetype
OP_CHECKMULTISIGVERIFY	script.h	/^    OP_CHECKMULTISIGVERIFY,$/;"	e	enum:opcodetype
OP_CHECKSIG	script.h	/^    OP_CHECKSIG,$/;"	e	enum:opcodetype
OP_CHECKSIGVERIFY	script.h	/^    OP_CHECKSIGVERIFY,$/;"	e	enum:opcodetype
OP_CODESEPARATOR	script.h	/^    OP_CODESEPARATOR,$/;"	e	enum:opcodetype
OP_DEPTH	script.h	/^    OP_DEPTH,$/;"	e	enum:opcodetype
OP_DIV	script.h	/^    OP_DIV,$/;"	e	enum:opcodetype
OP_DROP	script.h	/^    OP_DROP,$/;"	e	enum:opcodetype
OP_DUP	script.h	/^    OP_DUP,$/;"	e	enum:opcodetype
OP_ELSE	script.h	/^    OP_ELSE,$/;"	e	enum:opcodetype
OP_ENDIF	script.h	/^    OP_ENDIF,$/;"	e	enum:opcodetype
OP_EQUAL	script.h	/^    OP_EQUAL,$/;"	e	enum:opcodetype
OP_EQUALVERIFY	script.h	/^    OP_EQUALVERIFY,$/;"	e	enum:opcodetype
OP_FALSE	script.h	/^    OP_FALSE=OP_0,$/;"	e	enum:opcodetype
OP_FROMALTSTACK	script.h	/^    OP_FROMALTSTACK,$/;"	e	enum:opcodetype
OP_GREATERTHAN	script.h	/^    OP_GREATERTHAN,$/;"	e	enum:opcodetype
OP_GREATERTHANOREQUAL	script.h	/^    OP_GREATERTHANOREQUAL,$/;"	e	enum:opcodetype
OP_HASH160	script.h	/^    OP_HASH160,$/;"	e	enum:opcodetype
OP_HASH256	script.h	/^    OP_HASH256,$/;"	e	enum:opcodetype
OP_IF	script.h	/^    OP_IF,$/;"	e	enum:opcodetype
OP_IFDUP	script.h	/^    OP_IFDUP,$/;"	e	enum:opcodetype
OP_INVALIDOPCODE	script.h	/^    OP_INVALIDOPCODE = 0xff,$/;"	e	enum:opcodetype
OP_INVERT	script.h	/^    OP_INVERT,$/;"	e	enum:opcodetype
OP_LEFT	script.h	/^    OP_LEFT,$/;"	e	enum:opcodetype
OP_LESSTHAN	script.h	/^    OP_LESSTHAN,$/;"	e	enum:opcodetype
OP_LESSTHANOREQUAL	script.h	/^    OP_LESSTHANOREQUAL,$/;"	e	enum:opcodetype
OP_LSHIFT	script.h	/^    OP_LSHIFT,$/;"	e	enum:opcodetype
OP_MAX	script.h	/^    OP_MAX,$/;"	e	enum:opcodetype
OP_MIN	script.h	/^    OP_MIN,$/;"	e	enum:opcodetype
OP_MOD	script.h	/^    OP_MOD,$/;"	e	enum:opcodetype
OP_MUL	script.h	/^    OP_MUL,$/;"	e	enum:opcodetype
OP_NEGATE	script.h	/^    OP_NEGATE,$/;"	e	enum:opcodetype
OP_NIP	script.h	/^    OP_NIP,$/;"	e	enum:opcodetype
OP_NOP	script.h	/^    OP_NOP,$/;"	e	enum:opcodetype
OP_NOP1	script.h	/^    OP_NOP1,$/;"	e	enum:opcodetype
OP_NOP10	script.h	/^    OP_NOP10,$/;"	e	enum:opcodetype
OP_NOP2	script.h	/^    OP_NOP2,$/;"	e	enum:opcodetype
OP_NOP3	script.h	/^    OP_NOP3,$/;"	e	enum:opcodetype
OP_NOP4	script.h	/^    OP_NOP4,$/;"	e	enum:opcodetype
OP_NOP5	script.h	/^    OP_NOP5,$/;"	e	enum:opcodetype
OP_NOP6	script.h	/^    OP_NOP6,$/;"	e	enum:opcodetype
OP_NOP7	script.h	/^    OP_NOP7,$/;"	e	enum:opcodetype
OP_NOP8	script.h	/^    OP_NOP8,$/;"	e	enum:opcodetype
OP_NOP9	script.h	/^    OP_NOP9,$/;"	e	enum:opcodetype
OP_NOT	script.h	/^    OP_NOT,$/;"	e	enum:opcodetype
OP_NOTIF	script.h	/^    OP_NOTIF,$/;"	e	enum:opcodetype
OP_NUMEQUAL	script.h	/^    OP_NUMEQUAL,$/;"	e	enum:opcodetype
OP_NUMEQUALVERIFY	script.h	/^    OP_NUMEQUALVERIFY,$/;"	e	enum:opcodetype
OP_NUMNOTEQUAL	script.h	/^    OP_NUMNOTEQUAL,$/;"	e	enum:opcodetype
OP_OR	script.h	/^    OP_OR,$/;"	e	enum:opcodetype
OP_OVER	script.h	/^    OP_OVER,$/;"	e	enum:opcodetype
OP_PICK	script.h	/^    OP_PICK,$/;"	e	enum:opcodetype
OP_PUBKEY	script.h	/^    OP_PUBKEY = 0xfe,$/;"	e	enum:opcodetype
OP_PUBKEYHASH	script.h	/^    OP_PUBKEYHASH = 0xfd,$/;"	e	enum:opcodetype
OP_PUSHDATA1	script.h	/^    OP_PUSHDATA1=76,$/;"	e	enum:opcodetype
OP_PUSHDATA2	script.h	/^    OP_PUSHDATA2,$/;"	e	enum:opcodetype
OP_PUSHDATA4	script.h	/^    OP_PUSHDATA4,$/;"	e	enum:opcodetype
OP_RESERVED	script.h	/^    OP_RESERVED,$/;"	e	enum:opcodetype
OP_RESERVED1	script.h	/^    OP_RESERVED1,$/;"	e	enum:opcodetype
OP_RESERVED2	script.h	/^    OP_RESERVED2,$/;"	e	enum:opcodetype
OP_RETURN	script.h	/^    OP_RETURN,$/;"	e	enum:opcodetype
OP_RIGHT	script.h	/^    OP_RIGHT,$/;"	e	enum:opcodetype
OP_RIPEMD160	script.h	/^    OP_RIPEMD160,$/;"	e	enum:opcodetype
OP_ROLL	script.h	/^    OP_ROLL,$/;"	e	enum:opcodetype
OP_ROT	script.h	/^    OP_ROT,$/;"	e	enum:opcodetype
OP_RSHIFT	script.h	/^    OP_RSHIFT,$/;"	e	enum:opcodetype
OP_SHA1	script.h	/^    OP_SHA1,$/;"	e	enum:opcodetype
OP_SHA256	script.h	/^    OP_SHA256,$/;"	e	enum:opcodetype
OP_SIZE	script.h	/^    OP_SIZE,$/;"	e	enum:opcodetype
OP_SUB	script.h	/^    OP_SUB,$/;"	e	enum:opcodetype
OP_SUBSTR	script.h	/^    OP_SUBSTR,$/;"	e	enum:opcodetype
OP_SWAP	script.h	/^    OP_SWAP,$/;"	e	enum:opcodetype
OP_TOALTSTACK	script.h	/^    OP_TOALTSTACK,$/;"	e	enum:opcodetype
OP_TRUE	script.h	/^    OP_TRUE=OP_1,$/;"	e	enum:opcodetype
OP_TUCK	script.h	/^    OP_TUCK,$/;"	e	enum:opcodetype
OP_VER	script.h	/^    OP_VER,$/;"	e	enum:opcodetype
OP_VERIF	script.h	/^    OP_VERIF,$/;"	e	enum:opcodetype
OP_VERIFY	script.h	/^    OP_VERIFY,$/;"	e	enum:opcodetype
OP_VERNOTIF	script.h	/^    OP_VERNOTIF,$/;"	e	enum:opcodetype
OP_WITHIN	script.h	/^    OP_WITHIN,$/;"	e	enum:opcodetype
OP_XOR	script.h	/^    OP_XOR,$/;"	e	enum:opcodetype
OS_Error	cryptopp/cryptlib.h	/^	OS_Error(ErrorType errorType, const std::string &s, const std::string& operation, int errorCode)$/;"	f	class:OS_Error
OS_Error	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL OS_Error : public Exception$/;"	c
OS_RNG_AVAILABLE	cryptopp/config.h	393;"	d
OS_RNG_AVAILABLE	cryptopp/config.h	399;"	d
OTHER_ERROR	cryptopp/cryptlib.h	/^		OTHER_ERROR$/;"	e	enum:Exception::ErrorType
Obj_member_type	json/json_spirit_writer_template.h	/^        typedef typename Object_type::value_type Obj_member_type;$/;"	t	class:json_spirit::Generator
Object	json/json_spirit_value.h	/^        typedef typename Config::Object_type Object;$/;"	t	class:json_spirit::Value_impl
Object	json/json_spirit_value.h	/^    typedef Config::Object_type Object;$/;"	t	namespace:json_spirit
ObjectHolder	cryptopp/misc.h	/^class ObjectHolder$/;"	c
Object_type	json/json_spirit_reader_template.h	/^        typedef typename Config_type::Object_type Object_type;$/;"	t	class:json_spirit::Semantic_actions
Object_type	json/json_spirit_value.h	/^        typedef std::map< String_type, Value_type > Object_type;$/;"	t	struct:json_spirit::Config_map
Object_type	json/json_spirit_value.h	/^        typedef std::vector< Pair_type > Object_type;$/;"	t	struct:json_spirit::Config_vector
Object_type	json/json_spirit_writer_template.h	/^        typedef typename Config_type::Object_type Object_type;$/;"	t	class:json_spirit::Generator
OnButtonAddressBook	ui.cpp	/^void CMainFrame::OnButtonAddressBook(wxCommandEvent& event)$/;"	f	class:CMainFrame
OnButtonAddressBook	ui.cpp	/^void CSendDialog::OnButtonAddressBook(wxCommandEvent& event)$/;"	f	class:CSendDialog
OnButtonAddressBook	uibase.h	/^		virtual void OnButtonAddressBook( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnButtonAddressBook	uibase.h	/^		virtual void OnButtonAddressBook( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CSendDialogBase
OnButtonApply	ui.cpp	/^void COptionsDialog::OnButtonApply(wxCommandEvent& event)$/;"	f	class:COptionsDialog
OnButtonApply	uibase.h	/^		virtual void OnButtonApply( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:COptionsDialogBase
OnButtonCancel	ui.cpp	/^void CAddressBookDialog::OnButtonCancel(wxCommandEvent& event)$/;"	f	class:CAddressBookDialog
OnButtonCancel	ui.cpp	/^void COptionsDialog::OnButtonCancel(wxCommandEvent& event)$/;"	f	class:COptionsDialog
OnButtonCancel	ui.cpp	/^void CSendDialog::OnButtonCancel(wxCommandEvent& event)$/;"	f	class:CSendDialog
OnButtonCancel	ui.cpp	/^void CSendingDialog::OnButtonCancel(wxCommandEvent& event)$/;"	f	class:CSendingDialog
OnButtonCancel	ui.h	/^    void OnButtonCancel(wxCommandEvent& event) { EndModal(false); }$/;"	f	class:CGetTextFromUserDialog
OnButtonCancel	uibase.h	/^		virtual void OnButtonCancel( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CAddressBookDialogBase
OnButtonCancel	uibase.h	/^		virtual void OnButtonCancel( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CGetTextFromUserDialogBase
OnButtonCancel	uibase.h	/^		virtual void OnButtonCancel( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:COptionsDialogBase
OnButtonCancel	uibase.h	/^		virtual void OnButtonCancel( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CSendDialogBase
OnButtonCancel	uibase.h	/^		virtual void OnButtonCancel( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CSendingDialogBase
OnButtonCancel	uibase.h	/^		virtual void OnButtonCancel( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CYourAddressDialogBase
OnButtonCopy	ui.cpp	/^void CAddressBookDialog::OnButtonCopy(wxCommandEvent& event)$/;"	f	class:CAddressBookDialog
OnButtonCopy	ui.cpp	/^void CMainFrame::OnButtonCopy(wxCommandEvent& event)$/;"	f	class:CMainFrame
OnButtonCopy	uibase.h	/^		virtual void OnButtonCopy( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CAddressBookDialogBase
OnButtonCopy	uibase.h	/^		virtual void OnButtonCopy( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnButtonCopy	uibase.h	/^		virtual void OnButtonCopy( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CYourAddressDialogBase
OnButtonDelete	ui.cpp	/^void CAddressBookDialog::OnButtonDelete(wxCommandEvent& event)$/;"	f	class:CAddressBookDialog
OnButtonDelete	uibase.h	/^		virtual void OnButtonDelete( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CAddressBookDialogBase
OnButtonEdit	ui.cpp	/^void CAddressBookDialog::OnButtonEdit(wxCommandEvent& event)$/;"	f	class:CAddressBookDialog
OnButtonEdit	uibase.h	/^		virtual void OnButtonEdit( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CAddressBookDialogBase
OnButtonNew	ui.cpp	/^void CAddressBookDialog::OnButtonNew(wxCommandEvent& event)$/;"	f	class:CAddressBookDialog
OnButtonNew	ui.cpp	/^void CMainFrame::OnButtonNew(wxCommandEvent& event)$/;"	f	class:CMainFrame
OnButtonNew	uibase.h	/^		virtual void OnButtonNew( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CAddressBookDialogBase
OnButtonNew	uibase.h	/^		virtual void OnButtonNew( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnButtonNew	uibase.h	/^		virtual void OnButtonNew( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CYourAddressDialogBase
OnButtonOK	ui.cpp	/^void CAboutDialog::OnButtonOK(wxCommandEvent& event)$/;"	f	class:CAboutDialog
OnButtonOK	ui.cpp	/^void CAddressBookDialog::OnButtonOK(wxCommandEvent& event)$/;"	f	class:CAddressBookDialog
OnButtonOK	ui.cpp	/^void COptionsDialog::OnButtonOK(wxCommandEvent& event)$/;"	f	class:COptionsDialog
OnButtonOK	ui.cpp	/^void CSendingDialog::OnButtonOK(wxCommandEvent& event)$/;"	f	class:CSendingDialog
OnButtonOK	ui.cpp	/^void CTxDetailsDialog::OnButtonOK(wxCommandEvent& event)$/;"	f	class:CTxDetailsDialog
OnButtonOK	ui.h	/^    void OnButtonOK(wxCommandEvent& event)     { EndModal(true); }$/;"	f	class:CGetTextFromUserDialog
OnButtonOK	uibase.h	/^		virtual void OnButtonOK( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CAboutDialogBase
OnButtonOK	uibase.h	/^		virtual void OnButtonOK( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CAddressBookDialogBase
OnButtonOK	uibase.h	/^		virtual void OnButtonOK( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CGetTextFromUserDialogBase
OnButtonOK	uibase.h	/^		virtual void OnButtonOK( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:COptionsDialogBase
OnButtonOK	uibase.h	/^		virtual void OnButtonOK( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CSendingDialogBase
OnButtonOK	uibase.h	/^		virtual void OnButtonOK( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CTxDetailsDialogBase
OnButtonOK	uibase.h	/^		virtual void OnButtonOK( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CYourAddressDialogBase
OnButtonPaste	ui.cpp	/^void CSendDialog::OnButtonPaste(wxCommandEvent& event)$/;"	f	class:CSendDialog
OnButtonPaste	uibase.h	/^		virtual void OnButtonPaste( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CSendDialogBase
OnButtonRename	uibase.h	/^		virtual void OnButtonRename( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CYourAddressDialogBase
OnButtonSend	ui.cpp	/^void CMainFrame::OnButtonSend(wxCommandEvent& event)$/;"	f	class:CMainFrame
OnButtonSend	ui.cpp	/^void CSendDialog::OnButtonSend(wxCommandEvent& event)$/;"	f	class:CSendDialog
OnButtonSend	uibase.h	/^		virtual void OnButtonSend( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnButtonSend	uibase.h	/^		virtual void OnButtonSend( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CSendDialogBase
OnCheckBoxMinimizeToTray	uibase.h	/^		virtual void OnCheckBoxMinimizeToTray( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:COptionsDialogBase
OnCheckBoxUseProxy	ui.cpp	/^void COptionsDialog::OnCheckBoxUseProxy(wxCommandEvent& event)$/;"	f	class:COptionsDialog
OnCheckBoxUseProxy	uibase.h	/^		virtual void OnCheckBoxUseProxy( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:COptionsDialogBase
OnClose	ui.cpp	/^void CAddressBookDialog::OnClose(wxCloseEvent& event)$/;"	f	class:CAddressBookDialog
OnClose	ui.cpp	/^void CMainFrame::OnClose(wxCloseEvent& event)$/;"	f	class:CMainFrame
OnClose	ui.cpp	/^void CSendingDialog::OnClose(wxCloseEvent& event)$/;"	f	class:CSendingDialog
OnClose	ui.h	/^    void OnClose(wxCloseEvent& event)          { EndModal(false); }$/;"	f	class:CGetTextFromUserDialog
OnClose	uibase.h	/^		virtual void OnClose( wxCloseEvent& event ) { event.Skip(); }$/;"	f	class:CAddressBookDialogBase
OnClose	uibase.h	/^		virtual void OnClose( wxCloseEvent& event ) { event.Skip(); }$/;"	f	class:CGetTextFromUserDialogBase
OnClose	uibase.h	/^		virtual void OnClose( wxCloseEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnClose	uibase.h	/^		virtual void OnClose( wxCloseEvent& event ) { event.Skip(); }$/;"	f	class:CSendingDialogBase
OnClose	uibase.h	/^		virtual void OnClose( wxCloseEvent& event ) { event.Skip(); }$/;"	f	class:CYourAddressDialogBase
OnExceptionInMainLoop	ui.cpp	/^bool CMyApp::OnExceptionInMainLoop()$/;"	f	class:CMyApp
OnExit	ui.cpp	/^int CMyApp::OnExit()$/;"	f	class:CMyApp
OnFatalException	ui.cpp	/^void CMyApp::OnFatalException()$/;"	f	class:CMyApp
OnIconize	ui.cpp	/^void CMainFrame::OnIconize(wxIconizeEvent& event)$/;"	f	class:CMainFrame
OnIconize	uibase.h	/^		virtual void OnIconize( wxIconizeEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnIdle	ui.cpp	/^void CMainFrame::OnIdle(wxIdleEvent& event)$/;"	f	class:CMainFrame
OnIdle	uibase.h	/^		virtual void OnIdle( wxIdleEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnInit	ui.cpp	/^bool CMyApp::OnInit()$/;"	f	class:CMyApp
OnKeyDown	ui.h	/^    void OnKeyDown(wxKeyEvent& event) { HandleCtrlA(event); }$/;"	f	class:CMainFrame
OnKeyDown	ui.h	/^    void OnKeyDown(wxKeyEvent& event) { HandleCtrlA(event); }$/;"	f	class:CSendDialog
OnKeyDown	ui.h	/^    void OnKeyDown(wxKeyEvent& event)$/;"	f	class:CGetTextFromUserDialog
OnKeyDown	uibase.h	/^		virtual void OnKeyDown( wxKeyEvent& event ) { event.Skip(); }$/;"	f	class:CGetTextFromUserDialogBase
OnKeyDown	uibase.h	/^		virtual void OnKeyDown( wxKeyEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnKeyDown	uibase.h	/^		virtual void OnKeyDown( wxKeyEvent& event ) { event.Skip(); }$/;"	f	class:CSendDialogBase
OnKillFocusAmount	ui.cpp	/^void CSendDialog::OnKillFocusAmount(wxFocusEvent& event)$/;"	f	class:CSendDialog
OnKillFocusAmount	uibase.h	/^		virtual void OnKillFocusAmount( wxFocusEvent& event ) { event.Skip(); }$/;"	f	class:CSendDialogBase
OnKillFocusProxy	ui.cpp	/^void COptionsDialog::OnKillFocusProxy(wxFocusEvent& event)$/;"	f	class:COptionsDialog
OnKillFocusProxy	uibase.h	/^		virtual void OnKillFocusProxy( wxFocusEvent& event ) { event.Skip(); }$/;"	f	class:COptionsDialogBase
OnKillFocusTransactionFee	ui.cpp	/^void COptionsDialog::OnKillFocusTransactionFee(wxFocusEvent& event)$/;"	f	class:COptionsDialog
OnKillFocusTransactionFee	uibase.h	/^		virtual void OnKillFocusTransactionFee( wxFocusEvent& event ) { event.Skip(); }$/;"	f	class:COptionsDialogBase
OnLeftButtonDClick	ui.cpp	/^void CMyTaskBarIcon::OnLeftButtonDClick(wxTaskBarIconEvent& event)$/;"	f	class:CMyTaskBarIcon
OnListBox	ui.cpp	/^void COptionsDialog::OnListBox(wxCommandEvent& event)$/;"	f	class:COptionsDialog
OnListBox	uibase.h	/^		virtual void OnListBox( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:COptionsDialogBase
OnListColBeginDrag	ui.cpp	/^void CMainFrame::OnListColBeginDrag(wxListEvent& event)$/;"	f	class:CMainFrame
OnListColBeginDrag	uibase.h	/^		virtual void OnListColBeginDrag( wxListEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnListEndLabelEdit	ui.cpp	/^void CAddressBookDialog::OnListEndLabelEdit(wxListEvent& event)$/;"	f	class:CAddressBookDialog
OnListEndLabelEdit	uibase.h	/^		virtual void OnListEndLabelEdit( wxListEvent& event ) { event.Skip(); }$/;"	f	class:CAddressBookDialogBase
OnListEndLabelEdit	uibase.h	/^		virtual void OnListEndLabelEdit( wxListEvent& event ) { event.Skip(); }$/;"	f	class:CYourAddressDialogBase
OnListItemActivated	ui.cpp	/^void CAddressBookDialog::OnListItemActivated(wxListEvent& event)$/;"	f	class:CAddressBookDialog
OnListItemActivated	ui.cpp	/^void CMainFrame::OnListItemActivated(wxListEvent& event)$/;"	f	class:CMainFrame
OnListItemActivated	uibase.h	/^		virtual void OnListItemActivated( wxListEvent& event ) { event.Skip(); }$/;"	f	class:CAddressBookDialogBase
OnListItemActivated	uibase.h	/^		virtual void OnListItemActivated( wxListEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnListItemActivated	uibase.h	/^		virtual void OnListItemActivated( wxListEvent& event ) { event.Skip(); }$/;"	f	class:CYourAddressDialogBase
OnListItemSelected	ui.cpp	/^void CAddressBookDialog::OnListItemSelected(wxListEvent& event)$/;"	f	class:CAddressBookDialog
OnListItemSelected	uibase.h	/^		virtual void OnListItemSelected( wxListEvent& event ) { event.Skip(); }$/;"	f	class:CAddressBookDialogBase
OnListItemSelected	uibase.h	/^		virtual void OnListItemSelected( wxListEvent& event ) { event.Skip(); }$/;"	f	class:CYourAddressDialogBase
OnMenuExit	ui.cpp	/^void CMyTaskBarIcon::OnMenuExit(wxCommandEvent& event)$/;"	f	class:CMyTaskBarIcon
OnMenuFileExit	ui.cpp	/^void CMainFrame::OnMenuFileExit(wxCommandEvent& event)$/;"	f	class:CMainFrame
OnMenuFileExit	uibase.h	/^		virtual void OnMenuFileExit( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnMenuHelpAbout	ui.cpp	/^void CMainFrame::OnMenuHelpAbout(wxCommandEvent& event)$/;"	f	class:CMainFrame
OnMenuHelpAbout	uibase.h	/^		virtual void OnMenuHelpAbout( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnMenuOptions	ui.cpp	/^void CMyTaskBarIcon::OnMenuOptions(wxCommandEvent& event)$/;"	f	class:CMyTaskBarIcon
OnMenuOptionsChangeWalletPassphrase	ui.cpp	/^void CMainFrame::OnMenuOptionsChangeWalletPassphrase(wxCommandEvent& event)$/;"	f	class:CMainFrame
OnMenuOptionsChangeWalletPassphrase	uibase.h	/^		virtual void OnMenuOptionsChangeWalletPassphrase( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnMenuOptionsChangeYourAddress	ui.cpp	/^void CMainFrame::OnMenuOptionsChangeYourAddress(wxCommandEvent& event)$/;"	f	class:CMainFrame
OnMenuOptionsChangeYourAddress	uibase.h	/^		virtual void OnMenuOptionsChangeYourAddress( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnMenuOptionsEncryptWallet	ui.cpp	/^void CMainFrame::OnMenuOptionsEncryptWallet(wxCommandEvent& event)$/;"	f	class:CMainFrame
OnMenuOptionsEncryptWallet	uibase.h	/^		virtual void OnMenuOptionsEncryptWallet( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnMenuOptionsOptions	ui.cpp	/^void CMainFrame::OnMenuOptionsOptions(wxCommandEvent& event)$/;"	f	class:CMainFrame
OnMenuOptionsOptions	uibase.h	/^		virtual void OnMenuOptionsOptions( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnMenuRestore	ui.cpp	/^void CMyTaskBarIcon::OnMenuRestore(wxCommandEvent& event)$/;"	f	class:CMyTaskBarIcon
OnMenuSend	ui.cpp	/^void CMyTaskBarIcon::OnMenuSend(wxCommandEvent& event)$/;"	f	class:CMyTaskBarIcon
OnMouseEvents	ui.cpp	/^void CMainFrame::OnMouseEvents(wxMouseEvent& event)$/;"	f	class:CMainFrame
OnMouseEvents	uibase.h	/^		virtual void OnMouseEvents( wxMouseEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnMouseEventsAddress	ui.cpp	/^void CMainFrame::OnMouseEventsAddress(wxMouseEvent& event)$/;"	f	class:CMainFrame
OnMouseEventsAddress	uibase.h	/^		virtual void OnMouseEventsAddress( wxMouseEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnNotebookPageChanged	ui.cpp	/^void CAddressBookDialog::OnNotebookPageChanged(wxNotebookEvent& event)$/;"	f	class:CAddressBookDialog
OnNotebookPageChanged	ui.cpp	/^void CMainFrame::OnNotebookPageChanged(wxNotebookEvent& event)$/;"	f	class:CMainFrame
OnNotebookPageChanged	uibase.h	/^		virtual void OnNotebookPageChanged( wxNotebookEvent& event ) { event.Skip(); }$/;"	f	class:CAddressBookDialogBase
OnNotebookPageChanged	uibase.h	/^		virtual void OnNotebookPageChanged( wxNotebookEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnPaint	ui.cpp	/^void CMainFrame::OnPaint(wxPaintEvent& event)$/;"	f	class:CMainFrame
OnPaint	ui.cpp	/^void CSendingDialog::OnPaint(wxPaintEvent& event)$/;"	f	class:CSendingDialog
OnPaint	uibase.h	/^		virtual void OnPaint( wxPaintEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnPaint	uibase.h	/^		virtual void OnPaint( wxPaintEvent& event ) { event.Skip(); }$/;"	f	class:CSendingDialogBase
OnPaintListCtrl	ui.cpp	/^void CMainFrame::OnPaintListCtrl(wxPaintEvent& event)$/;"	f	class:CMainFrame
OnPaintListCtrl	uibase.h	/^		virtual void OnPaintListCtrl( wxPaintEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnReply2	ui.cpp	/^void CSendingDialog::OnReply2(CDataStream& vRecv)$/;"	f	class:CSendingDialog
OnReply3	ui.cpp	/^void CSendingDialog::OnReply3(CDataStream& vRecv)$/;"	f	class:CSendingDialog
OnSetFocusAddress	ui.cpp	/^void CMainFrame::OnSetFocusAddress(wxFocusEvent& event)$/;"	f	class:CMainFrame
OnSetFocusAddress	uibase.h	/^		virtual void OnSetFocusAddress( wxFocusEvent& event ) { event.Skip(); }$/;"	f	class:CMainFrameBase
OnTextAddress	uibase.h	/^		virtual void OnTextAddress( wxCommandEvent& event ) { event.Skip(); }$/;"	f	class:CSendDialogBase
OnUIThreadCall	ui.cpp	/^void CMainFrame::OnUIThreadCall(wxCommandEvent& event)$/;"	f	class:CMainFrame
OnUnhandledException	ui.cpp	/^void CMyApp::OnUnhandledException()$/;"	f	class:CMyApp
OnUpdateUIGenerate	ui.cpp	/^void CMyTaskBarIcon::OnUpdateUIGenerate(wxUpdateUIEvent& event)$/;"	f	class:CMyTaskBarIcon
OnUpdateUIOptionsGenerate	ui.cpp	/^void CMainFrame::OnUpdateUIOptionsGenerate(wxUpdateUIEvent& event)$/;"	f	class:CMainFrame
OpenBlockFile	main.cpp	/^FILE* OpenBlockFile(unsigned int nFile, unsigned int nBlockPos, const char* pszMode)$/;"	f
OpenNetworkConnection	net.cpp	/^bool OpenNetworkConnection(const CAddress& addrConnect)$/;"	f
OptimalBlockSize	cryptopp/cryptlib.h	/^	virtual unsigned int OptimalBlockSize() const {return 1;}$/;"	f	class:HashTransformation
OptimalBlockSize	cryptopp/cryptlib.h	/^	virtual unsigned int OptimalBlockSize() const {return MandatoryBlockSize();}$/;"	f	class:StreamTransformation
OptimalNumberOfParallelBlocks	cryptopp/cryptlib.h	/^	virtual unsigned int OptimalNumberOfParallelBlocks() const {return 1;}$/;"	f	class:BlockTransformation
OutputDebugStringF	util.cpp	/^inline int OutputDebugStringF(const char* pszFormat, ...)$/;"	f
PAGESIZE	serialize.h	47;"	d
PAIRTYPE	util.h	68;"	d
PK_AuthenticatedKeyAgreementDomain	cryptopp/cryptlib.h	/^typedef AuthenticatedKeyAgreementDomain PK_AuthenticatedKeyAgreementDomain;$/;"	t
PK_CryptoSystem	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE PK_CryptoSystem$/;"	c
PK_Decryptor	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE PK_Decryptor : public PK_CryptoSystem, public PrivateKeyAlgorithm$/;"	c
PK_Encryptor	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE PK_Encryptor : public PK_CryptoSystem, public PublicKeyAlgorithm$/;"	c
PK_FixedLengthCryptoSystem	cryptopp/cryptlib.h	/^typedef PK_CryptoSystem PK_FixedLengthCryptoSystem;$/;"	t
PK_FixedLengthDecryptor	cryptopp/cryptlib.h	/^typedef PK_Decryptor PK_FixedLengthDecryptor;$/;"	t
PK_FixedLengthEncryptor	cryptopp/cryptlib.h	/^typedef PK_Encryptor PK_FixedLengthEncryptor;$/;"	t
PK_MessageAccumulator	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE PK_MessageAccumulator : public HashTransformation$/;"	c
PK_SignatureScheme	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE PK_SignatureScheme$/;"	c
PK_SignatureSystem	cryptopp/cryptlib.h	/^typedef PK_SignatureScheme PK_SignatureSystem;$/;"	t
PK_Signer	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE PK_Signer : public PK_SignatureScheme, public PrivateKeyAlgorithm$/;"	c
PK_SimpleKeyAgreementDomain	cryptopp/cryptlib.h	/^typedef SimpleKeyAgreementDomain PK_SimpleKeyAgreementDomain;$/;"	t
PK_Verifier	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE PK_Verifier : public PK_SignatureScheme, public PublicKeyAlgorithm$/;"	c
PREFER_BERKELEY_STYLE_SOCKETS	cryptopp/config.h	55;"	d
PRI64d	util.h	57;"	d
PRI64d	util.h	61;"	d
PRI64u	util.h	58;"	d
PRI64u	util.h	62;"	d
PRI64x	util.h	59;"	d
PRI64x	util.h	63;"	d
PSHGETSPECIALFOLDERPATHA	util.cpp	/^typedef WINSHELLAPI BOOL (WINAPI *PSHGETSPECIALFOLDERPATHA)(HWND hwndOwner, LPSTR lpszPath, int nFolder, BOOL fCreate);$/;"	t	file:
PUBLISH_HOPS	net.h	/^static const unsigned int PUBLISH_HOPS = 5;$/;"	v
Pair	json/json_spirit_value.h	/^    typedef Config::Pair_type   Pair;$/;"	t	namespace:json_spirit
Pair_impl	json/json_spirit_value.h	/^    Pair_impl< Config >::Pair_impl( const String_type& name, const Value_type& value )$/;"	f	class:json_spirit::Pair_impl
Pair_impl	json/json_spirit_value.h	/^    struct Pair_impl$/;"	s	namespace:json_spirit
Pair_type	json/json_spirit_value.h	/^        typedef Pair_impl < Config_vector > Pair_type;$/;"	t	struct:json_spirit::Config_vector
Pair_type	json/json_spirit_value.h	/^        typedef typename Object_type::value_type Pair_type;$/;"	t	struct:json_spirit::Config_map
Parity	cryptopp/misc.h	/^unsigned int Parity(T value)$/;"	f
ParseHex	util.cpp	/^vector<unsigned char> ParseHex(const char* psz)$/;"	f
ParseHex	util.cpp	/^vector<unsigned char> ParseHex(const string& str)$/;"	f
ParseMoney	util.cpp	/^bool ParseMoney(const char* pszIn, int64& nRet)$/;"	f
ParseMoney	util.cpp	/^bool ParseMoney(const string& str, int64& nRet)$/;"	f
ParseParameters	util.cpp	/^void ParseParameters(int argc, char* argv[])$/;"	f
ParseString	util.cpp	/^void ParseString(const string& str, char c, vector<string>& v)$/;"	f
Posn_iter_t	json/json_spirit_stream_reader.h	/^        typedef spirit_namespace::position_iterator< typename Mp_iters::Mp_iter > Posn_iter_t;$/;"	t	class:json_spirit::Stream_reader_thrower
Precompute	cryptopp/cryptlib.h	/^	virtual void Precompute(unsigned int n)$/;"	f	class:CryptoMaterial
PrintBlockTree	main.cpp	/^void PrintBlockTree()$/;"	f
PrintConsole	rpc.cpp	/^void PrintConsole(const char* format, ...)$/;"	f
PrintException	util.cpp	/^void PrintException(std::exception* pex, const char* pszThread)$/;"	f
PrintExceptionContinue	util.cpp	/^void PrintExceptionContinue(std::exception* pex, const char* pszThread)$/;"	f
PrintHex	script.h	/^    void PrintHex() const$/;"	f	class:CScript
PrintHex	util.h	/^inline void PrintHex(const std::vector<unsigned char>& vch, const char* pszFormat="%s", bool fSpaces=true)$/;"	f
PrintHex	util.h	/^void PrintHex(const T pbegin, const T pend, const char* pszFormat="%s", bool fSpaces=true)$/;"	f
PrintWallet	wallet.cpp	/^void CWallet::PrintWallet(const CBlock& block)$/;"	f	class:CWallet
PrintWallets	main.cpp	/^void static PrintWallets(const CBlock& block)$/;"	f	file:
PrivateKey	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE PrivateKey : public GeneratableCryptoMaterial$/;"	c
PrivateKeyAlgorithm	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE PrivateKeyAlgorithm : public AsymmetricAlgorithm$/;"	c
ProcessAlert	main.cpp	/^bool CAlert::ProcessAlert()$/;"	f	class:CAlert
ProcessBlock	cryptopp/cryptlib.h	/^	void ProcessBlock(byte *inoutBlock) const$/;"	f	class:BlockTransformation
ProcessBlock	cryptopp/cryptlib.h	/^	void ProcessBlock(const byte *inBlock, byte *outBlock) const$/;"	f	class:BlockTransformation
ProcessBlock	main.cpp	/^bool static ProcessBlock(CNode* pfrom, CBlock* pblock)$/;"	f	file:
ProcessByte	cryptopp/cryptlib.h	/^	inline byte ProcessByte(byte input)$/;"	f	class:StreamTransformation
ProcessMessage	main.cpp	/^bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)$/;"	f	file:
ProcessMessages	main.cpp	/^bool ProcessMessages(CNode* pfrom)$/;"	f
ProcessString	cryptopp/cryptlib.h	/^	inline void ProcessString(byte *inoutString, size_t length)$/;"	f	class:StreamTransformation
ProcessString	cryptopp/cryptlib.h	/^	inline void ProcessString(byte *outString, const byte *inString, size_t length)$/;"	f	class:StreamTransformation
PublicKey	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE PublicKey : virtual public CryptoMaterial$/;"	c
PublicKeyAlgorithm	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE PublicKeyAlgorithm : public AsymmetricAlgorithm$/;"	c
PushAddress	net.h	/^    void PushAddress(const CAddress& addr)$/;"	f	class:CNode
PushGetBlocks	net.cpp	/^void CNode::PushGetBlocks(CBlockIndex* pindexBegin, uint256 hashEnd)$/;"	f	class:CNode
PushInventory	net.h	/^    void PushInventory(const CInv& inv)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6, const T7& a7)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6, const T7& a7, const T8& a8)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6, const T7& a7, const T8& a8, const T9& a9)$/;"	f	class:CNode
PushRequest	net.h	/^    void PushRequest(const char* pszCommand, const T1& a1, const T2& a2,$/;"	f	class:CNode
PushRequest	net.h	/^    void PushRequest(const char* pszCommand, const T1& a1,$/;"	f	class:CNode
PushRequest	net.h	/^    void PushRequest(const char* pszCommand,$/;"	f	class:CNode
PushVersion	net.h	/^    void PushVersion()$/;"	f	class:CNode
Put	cryptopp/cryptlib.h	/^		size_t Put(byte inByte, bool blocking=true)$/;"	f	class:BufferedTransformation
Put	cryptopp/cryptlib.h	/^		size_t Put(const byte *inString, size_t length, bool blocking=true)$/;"	f	class:BufferedTransformation
Put	cryptopp/misc.h	/^	typedef PutBlock<T, B, PA> Put;$/;"	t	struct:BlockGetAndPut
PutBlock	cryptopp/misc.h	/^	PutBlock(const void *xorBlock, void *block)$/;"	f	class:PutBlock
PutBlock	cryptopp/misc.h	/^class PutBlock$/;"	c
PutMessageEnd	cryptopp/cryptlib.h	/^		size_t PutMessageEnd(const byte *inString, size_t length, int propagation=-1, bool blocking=true)$/;"	f	class:BufferedTransformation
PutModifiable	cryptopp/cryptlib.h	/^		size_t PutModifiable(byte *inString, size_t length, bool blocking=true)$/;"	f	class:BufferedTransformation
PutModifiable2	cryptopp/cryptlib.h	/^		virtual size_t PutModifiable2(byte *inString, size_t length, int messageEnd, bool blocking)$/;"	f	class:BufferedTransformation
PutWord	cryptopp/misc.h	/^inline void PutWord(bool assumeAligned, ByteOrder order, byte *block, T value, const byte *xorBlock = NULL)$/;"	f
R	cryptopp/sha.cpp	478;"	d	file:
R	cryptopp/sha.cpp	597;"	d	file:
R	cryptopp/sha.cpp	870;"	d	file:
R0	cryptopp/sha.cpp	39;"	d	file:
R1	cryptopp/sha.cpp	40;"	d	file:
R2	cryptopp/sha.cpp	41;"	d	file:
R3	cryptopp/sha.cpp	42;"	d	file:
R4	cryptopp/sha.cpp	43;"	d	file:
RA0	cryptopp/sha.cpp	165;"	d	file:
RA1	cryptopp/sha.cpp	170;"	d	file:
RANDOM_IV	cryptopp/cryptlib.h	/^	enum IV_Requirement {UNIQUE_IV = 0, RANDOM_IV, UNPREDICTABLE_RANDOM_IV, INTERNALLY_GENERATED_IV, NOT_RESYNCHRONIZABLE};$/;"	e	enum:SimpleKeyingInterface::IV_Requirement
RB0	cryptopp/sha.cpp	172;"	d	file:
RB1	cryptopp/sha.cpp	174;"	d	file:
READDATA	serialize.h	138;"	d
READWRITE	serialize.h	127;"	d
RECEIVED	ui.h	/^        RECEIVED = 3,$/;"	e	enum:CMainFrame::__anon6
RECEIVING	ui.h	/^        RECEIVING = 1,$/;"	e	enum:CAddressBookDialog::__anon7
REF	serialize.h	/^inline T& REF(const T& val)$/;"	f
RETURN_IF_NONZERO	cryptopp/misc.h	202;"	d
ROUND	cryptopp/sha.cpp	197;"	d	file:
RandAddSeed	util.cpp	/^void RandAddSeed()$/;"	f
RandAddSeedPerfmon	util.cpp	/^void RandAddSeedPerfmon()$/;"	f
RandomNumberGenerator	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE RandomNumberGenerator : public Algorithm$/;"	c
ReacceptWalletTransactions	wallet.cpp	/^void CWallet::ReacceptWalletTransactions()$/;"	f	class:CWallet
Read	db.h	/^    bool Read(const K& key, T& value)$/;"	f	class:CDB
ReadAccount	db.cpp	/^bool CWalletDB::ReadAccount(const string& strAccount, CAccount& account)$/;"	f	class:CWalletDB
ReadAtCursor	db.h	/^    int ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& ssValue, unsigned int fFlags=DB_NEXT)$/;"	f	class:CDB
ReadBestBlock	db.h	/^    bool ReadBestBlock(CBlockLocator& locator)$/;"	f	class:CWalletDB
ReadBestInvalidWork	db.cpp	/^bool CTxDB::ReadBestInvalidWork(CBigNum& bnBestInvalidWork)$/;"	f	class:CTxDB
ReadCompactSize	serialize.h	/^uint64 ReadCompactSize(Stream& is)$/;"	f
ReadConfigFile	util.cpp	/^void ReadConfigFile(map<string, string>& mapSettingsRet,$/;"	f
ReadDefaultKey	db.h	/^    bool ReadDefaultKey(std::vector<unsigned char>& vchPubKey)$/;"	f	class:CWalletDB
ReadDiskTx	db.cpp	/^bool CTxDB::ReadDiskTx(COutPoint outpoint, CTransaction& tx)$/;"	f	class:CTxDB
ReadDiskTx	db.cpp	/^bool CTxDB::ReadDiskTx(COutPoint outpoint, CTransaction& tx, CTxIndex& txindex)$/;"	f	class:CTxDB
ReadDiskTx	db.cpp	/^bool CTxDB::ReadDiskTx(uint256 hash, CTransaction& tx)$/;"	f	class:CTxDB
ReadDiskTx	db.cpp	/^bool CTxDB::ReadDiskTx(uint256 hash, CTransaction& tx, CTxIndex& txindex)$/;"	f	class:CTxDB
ReadFromDisk	main.cpp	/^bool CBlock::ReadFromDisk(const CBlockIndex* pindex, bool fReadTransactions)$/;"	f	class:CBlock
ReadFromDisk	main.cpp	/^bool CTransaction::ReadFromDisk(COutPoint prevout)$/;"	f	class:CTransaction
ReadFromDisk	main.cpp	/^bool CTransaction::ReadFromDisk(CTxDB& txdb, COutPoint prevout)$/;"	f	class:CTransaction
ReadFromDisk	main.cpp	/^bool CTransaction::ReadFromDisk(CTxDB& txdb, COutPoint prevout, CTxIndex& txindexRet)$/;"	f	class:CTransaction
ReadFromDisk	main.h	/^    bool ReadFromDisk(CDiskTxPos pos, FILE** pfileRet=NULL)$/;"	f	class:CTransaction
ReadFromDisk	main.h	/^    bool ReadFromDisk(unsigned int nFile, unsigned int nBlockPos, bool fReadTransactions=true)$/;"	f	class:CBlock
ReadHTTP	rpc.cpp	/^int ReadHTTP(std::basic_istream<char>& stream, map<string, string>& mapHeadersRet, string& strMessageRet)$/;"	f
ReadHTTPHeader	rpc.cpp	/^int ReadHTTPHeader(std::basic_istream<char>& stream, map<string, string>& mapHeadersRet)$/;"	f
ReadHTTPStatus	rpc.cpp	/^int ReadHTTPStatus(std::basic_istream<char>& stream)$/;"	f
ReadHashBestChain	db.cpp	/^bool CTxDB::ReadHashBestChain(uint256& hashBestChain)$/;"	f	class:CTxDB
ReadKey	db.h	/^    bool ReadKey(const std::vector<unsigned char>& vchPubKey, CPrivKey& vchPrivKey)$/;"	f	class:CWalletDB
ReadName	db.h	/^    bool ReadName(const std::string& strAddress, std::string& strName)$/;"	f	class:CWalletDB
ReadOwnerTxes	db.cpp	/^bool CTxDB::ReadOwnerTxes(uint160 hash160, int nMinHeight, vector<CTransaction>& vtx)$/;"	f	class:CTxDB
ReadPool	db.h	/^    bool ReadPool(int64 nPool, CKeyPool& keypool)$/;"	f	class:CWalletDB
ReadSetting	db.h	/^    bool ReadSetting(const std::string& strKey, T& value)$/;"	f	class:CWalletDB
ReadTx	db.h	/^    bool ReadTx(uint256 hash, CWalletTx& wtx)$/;"	f	class:CWalletDB
ReadTxIndex	db.cpp	/^bool CTxDB::ReadTxIndex(uint256 hash, CTxIndex& txindex)$/;"	f	class:CTxDB
ReadVersion	db.h	/^    bool ReadVersion(int& nVersion)$/;"	f	class:CDB
ReadVersion	serialize.h	/^    void ReadVersion()           { *this >> nVersion; }$/;"	f	class:CAutoFile
ReadVersion	serialize.h	/^    void ReadVersion()           { *this >> nVersion; }$/;"	f	class:CDataStream
ReceiveBufferSize	net.h	/^inline unsigned int ReceiveBufferSize() { return 1000*GetArg("-maxreceivebuffer", 10*1000); }$/;"	f
RecvCodeLine	irc.cpp	/^bool RecvCodeLine(SOCKET hSocket, const char* psz1, string& strRet)$/;"	f
RecvLine	irc.cpp	/^bool RecvLine(SOCKET hSocket, string& strLine)$/;"	f
RecvLineIRC	irc.cpp	/^bool RecvLineIRC(SOCKET hSocket, string& strLine)$/;"	f
RecvUntil	irc.cpp	/^int RecvUntil(SOCKET hSocket, const char* psz1, const char* psz2=NULL, const char* psz3=NULL, const char* psz4=NULL)$/;"	f
Ref	cryptopp/cryptlib.h	/^	BufferedTransformation& Ref() {return *this;}$/;"	f	class:BufferedTransformation
Ref	cryptopp/cryptlib.h	/^	HashTransformation& Ref() {return *this;}$/;"	f	class:HashTransformation
Ref	cryptopp/cryptlib.h	/^	StreamTransformation& Ref() {return *this;}$/;"	f	class:StreamTransformation
Ref	cryptopp/misc.h	/^const T & Singleton<T, F, instance>::Ref(CRYPTOPP_NOINLINE_DOTDOTDOT) const$/;"	f	class:Singleton
RefreshListCtrl	ui.cpp	/^void CMainFrame::RefreshListCtrl()$/;"	f	class:CMainFrame
RefreshStatusColumn	ui.cpp	/^void CMainFrame::RefreshStatusColumn()$/;"	f	class:CMainFrame
RegisterWallet	main.cpp	/^void RegisterWallet(CWallet* pwalletIn)$/;"	f
RelayInventory	net.h	/^inline void RelayInventory(const CInv& inv)$/;"	f
RelayMessage	net.h	/^inline void RelayMessage<>(const CInv& inv, const CDataStream& ss)$/;"	f
RelayMessage	net.h	/^void RelayMessage(const CInv& inv, const T& a)$/;"	f
RelayTo	main.h	/^    bool RelayTo(CNode* pnode) const$/;"	f	class:CAlert
RelayWalletTransaction	wallet.cpp	/^void CWalletTx::RelayWalletTransaction()$/;"	f	class:CWalletTx
RelayWalletTransaction	wallet.cpp	/^void CWalletTx::RelayWalletTransaction(CTxDB& txdb)$/;"	f	class:CWalletTx
Release	net.h	/^    void Release()$/;"	f	class:CNode
RemoveFromMemoryPool	main.cpp	/^bool CTransaction::RemoveFromMemoryPool()$/;"	f	class:CTransaction
Reorganize	main.cpp	/^bool static Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)$/;"	f	file:
Repaint	ui.cpp	/^void CSendingDialog::Repaint()$/;"	f	class:CSendingDialog
ResendWalletTransactions	main.cpp	/^void static ResendWalletTransactions()$/;"	f	file:
ResendWalletTransactions	wallet.cpp	/^void CWallet::ResendWalletTransactions()$/;"	f	class:CWallet
ReserveKeyFromKeyPool	wallet.cpp	/^void CWallet::ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool)$/;"	f	class:CWallet
Restart	cryptopp/cryptlib.h	/^	virtual void Restart()$/;"	f	class:HashTransformation
Restore	ui.cpp	/^void CMyTaskBarIcon::Restore()$/;"	f	class:CMyTaskBarIcon
Resynchronize	cryptopp/cryptlib.h	/^	virtual void Resynchronize(const byte *iv, int ivLength=-1) {throw NotImplemented(GetAlgorithm().AlgorithmName() + ": this object doesn't support resynchronization");}$/;"	f	class:SimpleKeyingInterface
ReturnKey	wallet.cpp	/^void CReserveKey::ReturnKey()$/;"	f	class:CReserveKey
ReturnKey	wallet.cpp	/^void CWallet::ReturnKey(int64 nIndex)$/;"	f	class:CWallet
Rewind	serialize.h	/^    bool Rewind(size_type n)$/;"	f	class:CDataStream
RightShift	cryptopp/misc.h	/^	static inline T RightShift(T value, unsigned int bits)$/;"	f	struct:SafeShifter
RoundDownToMultipleOf	cryptopp/misc.h	/^inline T1 RoundDownToMultipleOf(const T1 &n, const T2 &m)$/;"	f
RoundUpToMultipleOf	cryptopp/misc.h	/^inline T1 RoundUpToMultipleOf(const T1 &n, const T2 &m)$/;"	f
S0	cryptopp/sha.cpp	482;"	d	file:
S0	cryptopp/sha.cpp	593;"	d	file:
S0	cryptopp/sha.cpp	865;"	d	file:
S1	cryptopp/sha.cpp	483;"	d	file:
S1	cryptopp/sha.cpp	594;"	d	file:
S1	cryptopp/sha.cpp	866;"	d	file:
SENDING	ui.h	/^        SENDING = 0,$/;"	e	enum:CAddressBookDialog::__anon7
SENT	ui.h	/^        SENT = 2,$/;"	e	enum:CMainFrame::__anon6
SENTRECEIVED	ui.h	/^        SENTRECEIVED = 1,$/;"	e	enum:CMainFrame::__anon6
SER_BLOCKHEADERONLY	serialize.h	/^    SER_BLOCKHEADERONLY = (1 << 17),$/;"	e	enum:__anon4
SER_DISK	serialize.h	/^    SER_DISK            = (1 << 1),$/;"	e	enum:__anon4
SER_GETHASH	serialize.h	/^    SER_GETHASH         = (1 << 2),$/;"	e	enum:__anon4
SER_NETWORK	serialize.h	/^    SER_NETWORK         = (1 << 0),$/;"	e	enum:__anon4
SER_SKIPSIG	serialize.h	/^    SER_SKIPSIG         = (1 << 16),$/;"	e	enum:__anon4
SHA	cryptopp/sha.h	/^typedef SHA1 SHA;	\/\/ for backwards compatibility$/;"	t
SHA1	cryptopp/sha.h	/^class CRYPTOPP_DLL SHA1 : public IteratedHashWithStaticTransform<word32, BigEndian, 64, 20, SHA1>$/;"	c
SHA224	cryptopp/sha.h	/^class CRYPTOPP_DLL SHA224 : public IteratedHashWithStaticTransform<word32, BigEndian, 64, 32, SHA224, 28, true>$/;"	c
SHA256	cryptopp/sha.h	/^class CRYPTOPP_DLL SHA256 : public IteratedHashWithStaticTransform<word32, BigEndian, 64, 32, SHA256, 32, true>$/;"	c
SHA256Transform	main.cpp	/^inline void SHA256Transform(void* pstate, void* pinput, const void* pinit)$/;"	f
SHA384	cryptopp/sha.h	/^class CRYPTOPP_DLL SHA384 : public IteratedHashWithStaticTransform<word64, BigEndian, 128, 64, SHA384, 48, CRYPTOPP_BOOL_X86>$/;"	c
SHA512	cryptopp/sha.h	/^class CRYPTOPP_DLL SHA512 : public IteratedHashWithStaticTransform<word64, BigEndian, 128, 64, SHA512, 64, CRYPTOPP_BOOL_X86>$/;"	c
SHA512_SSE2_Transform	cryptopp/sha.cpp	/^CRYPTOPP_NAKED static void CRYPTOPP_FASTCALL SHA512_SSE2_Transform(word64 *state, const word64 *data)$/;"	f	file:
SIGHASH_ALL	script.h	/^    SIGHASH_ALL = 1,$/;"	e	enum:__anon3
SIGHASH_ANYONECANPAY	script.h	/^    SIGHASH_ANYONECANPAY = 0x80,$/;"	e	enum:__anon3
SIGHASH_NONE	script.h	/^    SIGHASH_NONE = 2,$/;"	e	enum:__anon3
SIGHASH_SINGLE	script.h	/^    SIGHASH_SINGLE = 3,$/;"	e	enum:__anon3
SOCKET	util.h	/^typedef u_int SOCKET;$/;"	t
SOCKETS_AVAILABLE	cryptopp/config.h	378;"	d
SOCKET_ERROR	util.h	109;"	d
SSE2_CombineState	cryptopp/sha.cpp	826;"	d	file:
SSE2_S0_S1	cryptopp/sha.cpp	705;"	d	file:
SSE2_s0	cryptopp/sha.cpp	720;"	d	file:
SSE2_s1	cryptopp/sha.cpp	733;"	d	file:
SSLIOStreamDevice	rpc.cpp	/^    SSLIOStreamDevice(SSLStream &streamIn, bool fUseSSLIn) : stream(streamIn)$/;"	f	class:SSLIOStreamDevice
SSLIOStreamDevice	rpc.cpp	/^class SSLIOStreamDevice : public iostreams::device<iostreams::bidirectional> {$/;"	c	file:
SSLStream	rpc.cpp	/^typedef boost::asio::ssl::stream<boost::asio::ip::tcp::socket> SSLStream;$/;"	t	file:
STATE_SAVE	cryptopp/sha.cpp	153;"	d	file:
STDMAX	cryptopp/misc.h	/^template <class T> inline const T& STDMAX(const T& a, const T& b)$/;"	f
STDMIN	cryptopp/misc.h	/^template <class T> inline const T& STDMIN(const T& a, const T& b)$/;"	f
SWAP_COPY	cryptopp/sha.cpp	231;"	d	file:
S_IRUSR	util.h	93;"	d
S_IWUSR	util.h	94;"	d
SafeConvert	cryptopp/misc.h	/^inline bool SafeConvert(T1 from, T2 &to)$/;"	f
SafeLeftShift	cryptopp/misc.h	/^inline T SafeLeftShift(T value)$/;"	f
SafeRightShift	cryptopp/misc.h	/^inline T SafeRightShift(T value)$/;"	f
SafeShifter	cryptopp/misc.h	/^template<> struct SafeShifter<false>$/;"	s
SafeShifter	cryptopp/misc.h	/^template<> struct SafeShifter<true>$/;"	s
SaturatingSubtract	cryptopp/misc.h	/^inline T1 SaturatingSubtract(const T1 &a, const T2 &b)$/;"	f
Save	cryptopp/cryptlib.h	/^	virtual void Save(BufferedTransformation &bt) const$/;"	f	class:CryptoMaterial
SavePrecomputation	cryptopp/cryptlib.h	/^	virtual void SavePrecomputation(BufferedTransformation &storedPrecomputation) const$/;"	f	class:CryptoMaterial
ScanForWalletTransactions	wallet.cpp	/^int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)$/;"	f	class:CWallet
ScanHash_CryptoPP	main.cpp	/^unsigned int static ScanHash_CryptoPP(char* pmidstate, char* pdata, char* phash1, char* phash, unsigned int& nHashesDone)$/;"	f	file:
SecBlock	cryptopp/secblock.h	/^	SecBlock(const SecBlock<T, A> &t)$/;"	f	class:SecBlock
SecBlock	cryptopp/secblock.h	/^	SecBlock(const T *t, size_type len)$/;"	f	class:SecBlock
SecBlock	cryptopp/secblock.h	/^	explicit SecBlock(size_type size=0)$/;"	f	class:SecBlock
SecBlock	cryptopp/secblock.h	/^class SecBlock$/;"	c
SecBlockWithHint	cryptopp/secblock.h	/^	explicit SecBlockWithHint(size_t size) : SecBlock<T, A>(size) {}$/;"	f	class:SecBlockWithHint
SecBlockWithHint	cryptopp/secblock.h	/^class SecBlockWithHint : public SecBlock<T, A>$/;"	c
SecByteBlock	cryptopp/secblock.h	/^typedef SecBlock<byte> SecByteBlock;$/;"	t
SecWordBlock	cryptopp/secblock.h	/^typedef SecBlock<word> SecWordBlock;$/;"	t
Seek	cryptopp/cryptlib.h	/^	virtual void Seek(lword n)$/;"	f	class:StreamTransformation
SelectCoins	wallet.cpp	/^bool CWallet::SelectCoins(int64 nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet) const$/;"	f	class:CWallet
SelectCoinsMinConf	wallet.cpp	/^bool CWallet::SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfTheirs, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet) const$/;"	f	class:CWallet
SelectPage	ui.cpp	/^void COptionsDialog::SelectPage(int nPage)$/;"	f	class:COptionsDialog
Semantic_actions	json/json_spirit_reader_template.h	/^        Semantic_actions( Value_type& value )$/;"	f	class:json_spirit::Semantic_actions
Semantic_actions	json/json_spirit_reader_template.h	/^    class Semantic_actions $/;"	c	namespace:json_spirit
Semantic_actions_t	json/json_spirit_reader_template.h	/^        typedef Semantic_actions< Value_type, Iter_type > Semantic_actions_t;$/;"	t	class:json_spirit::Json_grammer
Send	irc.cpp	/^static bool Send(SOCKET hSocket, const char* pszSend)$/;"	f	file:
SendBufferSize	net.h	/^inline unsigned int SendBufferSize() { return 1000*GetArg("-maxsendbuffer", 10*1000); }$/;"	f
SendMessages	main.cpp	/^bool SendMessages(CNode* pto, bool fSendTrickle)$/;"	f
SendMoney	wallet.cpp	/^string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee)$/;"	f	class:CWallet
SendMoneyToBitcoinAddress	wallet.cpp	/^string CWallet::SendMoneyToBitcoinAddress(const CBitcoinAddress& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee)$/;"	f	class:CWallet
SendingDialogOnReply2	ui.cpp	/^void SendingDialogOnReply2(void* parg, CDataStream& vRecv)$/;"	f
SendingDialogOnReply3	ui.cpp	/^void SendingDialogOnReply3(void* parg, CDataStream& vRecv)$/;"	f
SendingDialogStartTransfer	ui.cpp	/^void SendingDialogStartTransfer(void* parg)$/;"	f
SerReadWrite	serialize.h	/^inline unsigned int SerReadWrite(Stream& s, T& obj, int nType, int nVersion, CSerActionUnserialize ser_action)$/;"	f
SerReadWrite	serialize.h	/^inline unsigned int SerReadWrite(Stream& s, const T& obj, int nType, int nVersion, CSerActionGetSerializeSize ser_action)$/;"	f
SerReadWrite	serialize.h	/^inline unsigned int SerReadWrite(Stream& s, const T& obj, int nType, int nVersion, CSerActionSerialize ser_action)$/;"	f
Serialize	bignum.h	/^    void Serialize(Stream& s, int nType=0, int nVersion=VERSION) const$/;"	f	class:CBigNum
Serialize	serialize.h	/^    void Serialize(Stream& s, int nType=0, int nVersion=VERSION) const$/;"	f	class:CDataStream
Serialize	serialize.h	/^    void Serialize(Stream& s, int, int=0) const$/;"	f	class:CFixedFieldString
Serialize	serialize.h	/^    void Serialize(Stream& s, int, int=0) const$/;"	f	class:CFlatData
Serialize	serialize.h	/^inline void Serialize(Stream& os, const T& a, long nType, int nVersion=VERSION)$/;"	f
Serialize	serialize.h	/^inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; WRITEDATA(s, f); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, char a,           int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, double a,         int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, float a,          int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int64 a,          int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, signed char a,    int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, signed int a,     int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, signed long a,    int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, signed short a,   int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint64 a,         int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, unsigned char a,  int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, unsigned int a,   int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, unsigned long a,  int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, unsigned short a, int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const CScript& v, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const boost::tuple<T0, T1, T2>& item, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::basic_string<C>& str, int, int)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::pair<K, T>& item, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::set<K, Pred, A>& m, int nType, int nVersion)$/;"	f
Serialize	uint256.h	/^    void Serialize(Stream& s, int nType=0, int nVersion=VERSION) const$/;"	f	class:base_uint
SerializeHash	util.h	/^uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=VERSION)$/;"	f
Serialize_impl	serialize.h	/^void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&)$/;"	f
Serialize_impl	serialize.h	/^void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&)$/;"	f
Set	main.h	/^    void Set(const CBlockIndex* pindex)$/;"	f	class:CBlockLocator
SetAddressBookName	wallet.cpp	/^bool CWallet::SetAddressBookName(const CBitcoinAddress& address, const string& strName)$/;"	f	class:CWallet
SetAutoSignalPropagation	cryptopp/cryptlib.h	/^		virtual void SetAutoSignalPropagation(int propagation) {}$/;"	f	class:BufferedTransformation
SetBestChain	main.cpp	/^bool CBlock::SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew)$/;"	f	class:CBlock
SetBestChain	main.cpp	/^void static SetBestChain(const CBlockLocator& loc)$/;"	f	file:
SetBestChain	wallet.h	/^    void SetBestChain(const CBlockLocator& loc)$/;"	f	class:CWallet
SetBitcoinAddress	script.h	/^    void SetBitcoinAddress(const CBitcoinAddress& address)$/;"	f	class:CScript
SetBitcoinAddress	script.h	/^    void SetBitcoinAddress(const std::vector<unsigned char>& vchPubKey)$/;"	f	class:CScript
SetCompact	bignum.h	/^    CBigNum& SetCompact(unsigned int nCompact)$/;"	f	class:CBigNum
SetCrypted	keystore.cpp	/^bool CCryptoKeyStore::SetCrypted()$/;"	f	class:CCryptoKeyStore
SetData	base58.h	/^    void SetData(int nVersionIn, const unsigned char *pbegin, const unsigned char *pend)$/;"	f	class:CBase58Data
SetData	base58.h	/^    void SetData(int nVersionIn, const void* pdata, size_t nSize)$/;"	f	class:CBase58Data
SetDefaultKey	wallet.cpp	/^bool CWallet::SetDefaultKey(const std::vector<unsigned char> &vchPubKey)$/;"	f	class:CWallet
SetDefaultReceivingAddress	ui.cpp	/^void SetDefaultReceivingAddress(const string& strAddress)$/;"	f
SetErrorType	cryptopp/cryptlib.h	/^	void SetErrorType(ErrorType errorType) {m_errorType = errorType;}$/;"	f	class:Exception
SetHash160	base58.h	/^    bool SetHash160(const uint160& hash160)$/;"	f	class:CBitcoinAddress
SetHex	bignum.h	/^    void SetHex(const std::string& str)$/;"	f	class:CBigNum
SetHex	uint256.h	/^    void SetHex(const char* psz)$/;"	f	class:base_uint
SetHex	uint256.h	/^    void SetHex(const std::string& str)$/;"	f	class:base_uint
SetItemTextColour	ui.cpp	/^void SetItemTextColour(wxListCtrl* listCtrl, int nIndex, const wxColour& colour)$/;"	f
SetKey	crypter.cpp	/^bool CCrypter::SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigned char>& chNewIV)$/;"	f	class:CCrypter
SetKeyFromPassphrase	crypter.cpp	/^bool CCrypter::SetKeyFromPassphrase(const std::string& strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod)$/;"	f	class:CCrypter
SetKeyWithIV	cryptopp/cryptlib.h	/^	void SetKeyWithIV(const byte *key, size_t length, const byte *iv)$/;"	f	class:SimpleKeyingInterface
SetMerkleBranch	main.cpp	/^int CMerkleTx::SetMerkleBranch(const CBlock* pblock)$/;"	f	class:CMerkleTx
SetNull	main.h	/^    void SetNull() { hash = 0; n = -1; }$/;"	f	class:COutPoint
SetNull	main.h	/^    void SetNull() { nFile = -1; nBlockPos = 0; nTxPos = 0; }$/;"	f	class:CDiskTxPos
SetNull	main.h	/^    void SetNull() { ptx = NULL; n = -1; }$/;"	f	class:CInPoint
SetNull	main.h	/^    void SetNull()$/;"	f	class:CAlert
SetNull	main.h	/^    void SetNull()$/;"	f	class:CBlock
SetNull	main.h	/^    void SetNull()$/;"	f	class:CBlockLocator
SetNull	main.h	/^    void SetNull()$/;"	f	class:CTransaction
SetNull	main.h	/^    void SetNull()$/;"	f	class:CTxIndex
SetNull	main.h	/^    void SetNull()$/;"	f	class:CTxOut
SetNull	main.h	/^    void SetNull()$/;"	f	class:CUnsignedAlert
SetNull	wallet.h	/^    void SetNull()$/;"	f	class:CAccount
SetNull	wallet.h	/^    void SetNull()$/;"	f	class:CAccountingEntry
SetPrivKey	key.h	/^    bool SetPrivKey(const CPrivKey& vchPrivKey)$/;"	f	class:CKey
SetPubKey	base58.h	/^    bool SetPubKey(const std::vector<unsigned char>& vchPubKey)$/;"	f	class:CBitcoinAddress
SetPubKey	key.h	/^    bool SetPubKey(const std::vector<unsigned char>& vchPubKey)$/;"	f	class:CKey
SetSecret	key.h	/^    bool SetSecret(const CSecret& vchSecret)$/;"	f	class:CKey
SetSelection	ui.cpp	/^void SetSelection(wxListCtrl* listCtrl, int nIndex)$/;"	f
SetStartOnSystemStartup	ui.cpp	/^void SetStartOnSystemStartup(bool fAutoStart) { }$/;"	f
SetStartOnSystemStartup	ui.cpp	/^void SetStartOnSystemStartup(bool fAutoStart)$/;"	f
SetString	base58.h	/^    bool SetString(const char* psz)$/;"	f	class:CBase58Data
SetString	base58.h	/^    bool SetString(const std::string& str)$/;"	f	class:CBase58Data
SetThreadPriority	util.h	/^inline void SetThreadPriority(int nPriority)$/;"	f
SetType	serialize.h	/^    void SetType(int n)          { nType = n; }$/;"	f	class:CAutoFile
SetType	serialize.h	/^    void SetType(int n)          { nType = n; }$/;"	f	class:CDataStream
SetVersion	serialize.h	/^    void SetVersion(int n)       { nVersion = n; }$/;"	f	class:CAutoFile
SetVersion	serialize.h	/^    void SetVersion(int n)       { nVersion = n; }$/;"	f	class:CDataStream
SetWhat	cryptopp/cryptlib.h	/^	void SetWhat(const std::string &s) {m_what = s;}$/;"	f	class:Exception
Show	ui.cpp	/^void CMyTaskBarIcon::Show(bool fShow)$/;"	f	class:CMyTaskBarIcon
ShrinkDebugFile	util.cpp	/^void ShrinkDebugFile()$/;"	f
Shuffle	cryptopp/cryptlib.h	/^	template <class IT> void Shuffle(IT begin, IT end)$/;"	f	class:RandomNumberGenerator
Shutdown	init.cpp	/^void Shutdown(void* parg)$/;"	f
Shutdown	test/test_bitcoin.cpp	/^void Shutdown(void* parg)$/;"	f
SigHandler	cryptopp/cpu.cpp	/^typedef void (*SigHandler)(int);$/;"	t	file:
SigIllHandlerCPUID	cryptopp/cpu.cpp	/^static void SigIllHandlerCPUID(int)$/;"	f	file:
SigIllHandlerSSE2	cryptopp/cpu.cpp	/^static void SigIllHandlerSSE2(int)$/;"	f	file:
Sign	key.h	/^    bool Sign(uint256 hash, std::vector<unsigned char>& vchSig)$/;"	f	class:CKey
SignSignature	script.cpp	/^bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CTransaction& txTo, unsigned int nIn, int nHashType, CScript scriptPrereq)$/;"	f
SignatureHash	script.cpp	/^uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f
SignatureUpfront	cryptopp/cryptlib.h	/^	virtual bool SignatureUpfront() const {return false;}$/;"	f	class:PK_SignatureScheme
SimpleKeyAgreementDomain	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE SimpleKeyAgreementDomain : public KeyAgreementAlgorithm$/;"	c
SimpleKeyingInterface	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE SimpleKeyingInterface$/;"	c
SingleLine	ui.cpp	/^string SingleLine(const string& strIn)$/;"	f
Singleton	cryptopp/misc.h	/^	Singleton(F objectFactory = F()) : m_objectFactory(objectFactory) {}$/;"	f	class:Singleton
Singleton	cryptopp/misc.h	/^class Singleton$/;"	c
SizeInBytes	cryptopp/secblock.h	/^	size_type SizeInBytes() const {return m_size*sizeof(T);}$/;"	f	class:SecBlock
Sleep	util.h	/^inline void Sleep(int64 n)$/;"	f
Solver	script.cpp	/^bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash, int nHashType, CScript& scriptSigRet)$/;"	f
Solver	script.cpp	/^bool Solver(const CScript& scriptPubKey, vector<pair<opcodetype, valtype> >& vSolutionRet)$/;"	f
StackString	script.h	/^inline std::string StackString(const std::vector<std::vector<unsigned char> >& vStack)$/;"	f
StandardReallocate	cryptopp/secblock.h	/^typename A::pointer StandardReallocate(A& a, T *p, typename A::size_type oldSize, typename A::size_type newSize, bool preserve)$/;"	f
StartNode	net.cpp	/^void StartNode(void* parg)$/;"	f
StartTransfer	ui.cpp	/^void CSendingDialog::StartTransfer()$/;"	f	class:CSendingDialog
StartupShortcutPath	ui.cpp	/^string StartupShortcutPath()$/;"	f
StateBuf	cryptopp/iterhash.h	/^	T_HashWordType* StateBuf() {return this->m_state;}$/;"	f	class:IteratedHashWithStaticTransform
StaticAlgorithmName	cryptopp/sha.h	/^	static const char * CRYPTOPP_API StaticAlgorithmName() {return "SHA-1";}$/;"	f	class:SHA1
StaticAlgorithmName	cryptopp/sha.h	/^	static const char * CRYPTOPP_API StaticAlgorithmName() {return "SHA-224";}$/;"	f	class:SHA224
StaticAlgorithmName	cryptopp/sha.h	/^	static const char * CRYPTOPP_API StaticAlgorithmName() {return "SHA-256";}$/;"	f	class:SHA256
StaticAlgorithmName	cryptopp/sha.h	/^	static const char * CRYPTOPP_API StaticAlgorithmName() {return "SHA-384";}$/;"	f	class:SHA384
StaticAlgorithmName	cryptopp/sha.h	/^	static const char * CRYPTOPP_API StaticAlgorithmName() {return "SHA-512";}$/;"	f	class:SHA512
Status	ui.cpp	/^bool CSendingDialog::Status()$/;"	f	class:CSendingDialog
Status	ui.cpp	/^bool CSendingDialog::Status(const string& str)$/;"	f	class:CSendingDialog
StopNode	net.cpp	/^bool StopNode()$/;"	f
StreamCipher	cryptopp/cryptlib.h	/^typedef SymmetricCipher StreamCipher;$/;"	t
StreamTransformation	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE StreamTransformation : public Algorithm$/;"	c
Stream_reader	json/json_spirit_stream_reader.h	/^        Stream_reader( Istream_type& is )$/;"	f	class:json_spirit::Stream_reader
Stream_reader	json/json_spirit_stream_reader.h	/^    class Stream_reader$/;"	c	namespace:json_spirit
Stream_reader_thrower	json/json_spirit_stream_reader.h	/^        Stream_reader_thrower( Istream_type& is )$/;"	f	class:json_spirit::Stream_reader_thrower
Stream_reader_thrower	json/json_spirit_stream_reader.h	/^    class Stream_reader_thrower$/;"	c	namespace:json_spirit
StringToWord	cryptopp/misc.h	/^T StringToWord(const std::string &str, ByteOrder order = BIG_ENDIAN_ORDER)$/;"	f
String_type	json/json_spirit_reader_template.h	/^        typedef typename Config_type::String_type String_type;$/;"	t	class:json_spirit::Semantic_actions
String_type	json/json_spirit_value.h	/^        typedef String String_type;$/;"	t	struct:json_spirit::Config_map
String_type	json/json_spirit_value.h	/^        typedef String String_type;$/;"	t	struct:json_spirit::Config_vector
String_type	json/json_spirit_value.h	/^        typedef typename Config::String_type String_type;$/;"	t	class:json_spirit::Value_impl
String_type	json/json_spirit_value.h	/^        typedef typename Config::String_type String_type;$/;"	t	struct:json_spirit::Pair_impl
String_type	json/json_spirit_writer_template.h	/^        typedef typename Config_type::String_type String_type;$/;"	t	class:json_spirit::Generator
Subscribe	net.cpp	/^void CNode::Subscribe(unsigned int nChannel, unsigned int nHops)$/;"	f	class:CNode
SupportsPrecomputation	cryptopp/cryptlib.h	/^	virtual bool SupportsPrecomputation() const {return false;}$/;"	f	class:CryptoMaterial
SymmetricCipher	cryptopp/cryptlib.h	/^class CRYPTOPP_DLL CRYPTOPP_NO_VTABLE SymmetricCipher : public SimpleKeyingInterface, public StreamTransformation$/;"	c
SyncWithWallets	main.cpp	/^void static SyncWithWallets(const CTransaction& tx, const CBlock* pblock = NULL, bool fUpdate = false)$/;"	f	file:
THREADS_AVAILABLE	cryptopp/config.h	401;"	d
THREADS_AVAILABLE	cryptopp/config.h	406;"	d
THREAD_PRIORITY_ABOVE_NORMAL	util.h	633;"	d
THREAD_PRIORITY_BELOW_NORMAL	util.h	631;"	d
THREAD_PRIORITY_LOWEST	util.h	630;"	d
THREAD_PRIORITY_NORMAL	util.h	632;"	d
TRY_CRITICAL_BLOCK	util.h	277;"	d
TYPE_OF_SOCKLEN_T	cryptopp/config.h	97;"	d
TYPE_OF_SOCKLEN_T	cryptopp/config.h	99;"	d
TagSize	cryptopp/cryptlib.h	/^	unsigned int TagSize() const {return DigestSize();}$/;"	f	class:HashTransformation
TerminateThread	util.h	/^inline bool TerminateThread(pthread_t hthread, unsigned int nExitCode)$/;"	f
Testuint256AdHoc	uint256.h	/^inline int Testuint256AdHoc(std::vector<std::string> vArg)$/;"	f
ThreadBitcoinMiner	main.cpp	/^void static ThreadBitcoinMiner(void* parg)$/;"	f	file:
ThreadCleanWalletPassphrase	rpc.cpp	/^void ThreadCleanWalletPassphrase(void* parg)$/;"	f
ThreadDelayedRepaint	ui.cpp	/^void ThreadDelayedRepaint(void* parg)$/;"	f
ThreadFlushWalletDB	db.cpp	/^void ThreadFlushWalletDB(void* parg)$/;"	f
ThreadGetMyExternalIP	net.cpp	/^void ThreadGetMyExternalIP(void* parg)$/;"	f
ThreadIRCSeed	irc.cpp	/^void ThreadIRCSeed(void* parg)$/;"	f
ThreadIRCSeed2	irc.cpp	/^void ThreadIRCSeed2(void* parg)$/;"	f
ThreadMapPort	net.cpp	/^void ThreadMapPort(void* parg)$/;"	f
ThreadMapPort2	net.cpp	/^void ThreadMapPort2(void* parg)$/;"	f
ThreadMessageHandler	net.cpp	/^void ThreadMessageHandler(void* parg)$/;"	f
ThreadMessageHandler2	net.cpp	/^void ThreadMessageHandler2(void* parg)$/;"	f
ThreadOneMessageBox	util.cpp	/^void ThreadOneMessageBox(string strMessage)$/;"	f
ThreadOpenConnections	net.cpp	/^void ThreadOpenConnections(void* parg)$/;"	f
ThreadOpenConnections2	net.cpp	/^void ThreadOpenConnections2(void* parg)$/;"	f
ThreadRPCServer	rpc.cpp	/^void ThreadRPCServer(void* parg)$/;"	f
ThreadRPCServer2	rpc.cpp	/^void ThreadRPCServer2(void* parg)$/;"	f
ThreadSafeAskFee	noui.h	/^inline bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption, wxWindow* parent)$/;"	f
ThreadSafeAskFee	ui.cpp	/^bool ThreadSafeAskFee(int64 nFeeRequired, const string& strCaption, wxWindow* parent)$/;"	f
ThreadSafeMessageBox	noui.h	/^inline int ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style=wxOK, wxWindow* parent=NULL, int x=-1, int y=-1)$/;"	f
ThreadSafeMessageBox	ui.cpp	/^int ThreadSafeMessageBox(const string& message, const string& caption, int style, wxWindow* parent, int x, int y)$/;"	f
ThreadSocketHandler	net.cpp	/^void ThreadSocketHandler(void* parg)$/;"	f
ThreadSocketHandler2	net.cpp	/^void ThreadSocketHandler2(void* parg)$/;"	f
ThreadTopUpKeyPool	rpc.cpp	/^void ThreadTopUpKeyPool(void* parg)$/;"	f
ThreeBases	cryptopp/misc.h	/^class CRYPTOPP_NO_VTABLE ThreeBases : public BASE1, public BASE2, public BASE3$/;"	c
ThrowIfInvalid	cryptopp/cryptlib.h	/^	virtual void ThrowIfInvalid(RandomNumberGenerator &rng, unsigned int level) const$/;"	f	class:CryptoMaterial
ThrowIfTypeMismatch	cryptopp/cryptlib.h	/^	CRYPTOPP_DLL static void CRYPTOPP_API ThrowIfTypeMismatch(const char *name, const std::type_info &stored, const std::type_info &retrieving)$/;"	f	class:NameValuePairs
ToEnum	cryptopp/cryptlib.h	/^	static ENUM_TYPE ToEnum() {return (ENUM_TYPE)VALUE;}$/;"	f	struct:EnumToType
ToString	base58.h	/^    std::string ToString() const$/;"	f	class:CBase58Data
ToString	bignum.h	/^    std::string ToString(int nBase=10) const$/;"	f	class:CBigNum
ToString	main.h	/^    std::string ToString() const$/;"	f	class:CBlockIndex
ToString	main.h	/^    std::string ToString() const$/;"	f	class:CDiskBlockIndex
ToString	main.h	/^    std::string ToString() const$/;"	f	class:CDiskTxPos
ToString	main.h	/^    std::string ToString() const$/;"	f	class:COutPoint
ToString	main.h	/^    std::string ToString() const$/;"	f	class:CTransaction
ToString	main.h	/^    std::string ToString() const$/;"	f	class:CTxIn
ToString	main.h	/^    std::string ToString() const$/;"	f	class:CTxOut
ToString	main.h	/^    std::string ToString() const$/;"	f	class:CUnsignedAlert
ToString	protocol.cpp	/^std::string CAddress::ToString() const$/;"	f	class:CAddress
ToString	protocol.cpp	/^std::string CInv::ToString() const$/;"	f	class:CInv
ToString	script.h	/^    std::string ToString() const$/;"	f	class:CScript
ToString	uint256.h	/^    std::string ToString() const$/;"	f	class:base_uint
ToString	util.cpp	/^    std::string ToString() const$/;"	f	struct:CLockLocation
ToStringIP	protocol.cpp	/^std::string CAddress::ToStringIP() const$/;"	f	class:CAddress
ToStringIPPort	protocol.cpp	/^std::string CAddress::ToStringIPPort() const$/;"	f	class:CAddress
ToStringPort	protocol.cpp	/^std::string CAddress::ToStringPort() const$/;"	f	class:CAddress
TopUpKeyPool	wallet.cpp	/^bool CWallet::TopUpKeyPool()$/;"	f	class:CWallet
TransferAllTo	cryptopp/cryptlib.h	/^		void TransferAllTo(BufferedTransformation &target, const std::string &channel=DEFAULT_CHANNEL)$/;"	f	class:BufferedTransformation
TransferMessagesTo	cryptopp/cryptlib.h	/^		unsigned int TransferMessagesTo(BufferedTransformation &target, unsigned int count=UINT_MAX, const std::string &channel=DEFAULT_CHANNEL)$/;"	f	class:BufferedTransformation
TransferTo	cryptopp/cryptlib.h	/^		lword TransferTo(BufferedTransformation &target, lword transferMax=LWORD_MAX, const std::string &channel=DEFAULT_CHANNEL)$/;"	f	class:BufferedTransformation
Transform	cryptopp/sha.cpp	/^void SHA1::Transform(word32 *state, const word32 *data)$/;"	f	class:SHA1
Transform	cryptopp/sha.cpp	/^void SHA256::Transform(word32 *state, const word32 *data)$/;"	f	class:SHA256
Transform	cryptopp/sha.cpp	/^void SHA512::Transform(word64 *state, const word64 *data)$/;"	f	class:SHA512
Transform	cryptopp/sha.h	/^	static void CRYPTOPP_API Transform(word32 *digest, const word32 *data) {SHA256::Transform(digest, data);}$/;"	f	class:SHA224
Transform	cryptopp/sha.h	/^	static void CRYPTOPP_API Transform(word64 *digest, const word64 *data) {SHA512::Transform(digest, data);}$/;"	f	class:SHA384
TruncatedFinal	cryptopp/cryptlib.h	/^	void TruncatedFinal(byte *digest, size_t digestSize) $/;"	f	class:PK_MessageAccumulator
TryEnter	util.cpp	/^bool CCriticalSection::TryEnter(const char* pszName, const char* pszFile, int nLine)$/;"	f	class:CCriticalSection
TryEnter	util.cpp	/^bool CCriticalSection::TryEnter(const char*, const char*, int)$/;"	f	class:CCriticalSection
TrySSE2	cryptopp/cpu.cpp	/^static bool TrySSE2()$/;"	f	file:
TwoBases	cryptopp/misc.h	/^class CRYPTOPP_NO_VTABLE TwoBases : public BASE1, public BASE2$/;"	c
TxnAbort	db.h	/^    bool TxnAbort()$/;"	f	class:CDB
TxnBegin	db.h	/^    bool TxnBegin()$/;"	f	class:CDB
TxnCommit	db.h	/^    bool TxnCommit()$/;"	f	class:CDB
Type_to_type	json/json_spirit_value.h	/^        struct Type_to_type$/;"	s	namespace:json_spirit::internal_
UBEGIN	util.h	45;"	d
UEND	util.h	46;"	d
UINT64_MAX	util.h	88;"	d
UIThreadCall	noui.h	/^inline void UIThreadCall(boost::function0<void> fn)$/;"	f
UIThreadCall	ui.cpp	/^void UIThreadCall(boost::function0<void> fn)$/;"	f
UNIQUE_IV	cryptopp/cryptlib.h	/^	enum IV_Requirement {UNIQUE_IV = 0, RANDOM_IV, UNPREDICTABLE_RANDOM_IV, INTERNALLY_GENERATED_IV, NOT_RESYNCHRONIZABLE};$/;"	e	enum:SimpleKeyingInterface::IV_Requirement
UNPREDICTABLE_RANDOM_IV	cryptopp/cryptlib.h	/^	enum IV_Requirement {UNIQUE_IV = 0, RANDOM_IV, UNPREDICTABLE_RANDOM_IV, INTERNALLY_GENERATED_IV, NOT_RESYNCHRONIZABLE};$/;"	e	enum:SimpleKeyingInterface::IV_Requirement
USE_MS_CRYPTOAPI	cryptopp/config.h	31;"	d
USE_UPNP	Makefile	/^USE_UPNP:=0$/;"	m
USE_WINDOWS_STYLE_SOCKETS	cryptopp/config.h	382;"	d
USING_NAMESPACE	cryptopp/config.h	87;"	d
UnalignedGetWordNonTemplate	cryptopp/misc.h	/^inline byte UnalignedGetWordNonTemplate(ByteOrder order, const byte *block, const byte *)$/;"	f
UnalignedGetWordNonTemplate	cryptopp/misc.h	/^inline word16 UnalignedGetWordNonTemplate(ByteOrder order, const byte *block, const word16 *)$/;"	f
UnalignedGetWordNonTemplate	cryptopp/misc.h	/^inline word32 UnalignedGetWordNonTemplate(ByteOrder order, const byte *block, const word32 *)$/;"	f
UnalignedGetWordNonTemplate	cryptopp/misc.h	/^inline word64 UnalignedGetWordNonTemplate(ByteOrder order, const byte *block, const word64 *)$/;"	f
UnalignedPutWordNonTemplate	cryptopp/misc.h	/^inline void UnalignedPutWordNonTemplate(ByteOrder order, byte *block, byte value, const byte *xorBlock)$/;"	f
UnalignedPutWordNonTemplate	cryptopp/misc.h	/^inline void UnalignedPutWordNonTemplate(ByteOrder order, byte *block, word16 value, const byte *xorBlock)$/;"	f
UnalignedPutWordNonTemplate	cryptopp/misc.h	/^inline void UnalignedPutWordNonTemplate(ByteOrder order, byte *block, word32 value, const byte *xorBlock)$/;"	f
UnalignedPutWordNonTemplate	cryptopp/misc.h	/^inline void UnalignedPutWordNonTemplate(ByteOrder order, byte *block, word64 value, const byte *xorBlock)$/;"	f
UncheckedSpecifyDataLengths	cryptopp/cryptlib.h	/^	virtual void UncheckedSpecifyDataLengths(lword headerLength, lword messageLength, lword footerLength) {}$/;"	f	class:AuthenticatedSymmetricCipher
Unlock	keystore.cpp	/^bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)$/;"	f	class:CCryptoKeyStore
Unlock	wallet.cpp	/^bool CWallet::Unlock(const string& strWalletPassphrase)$/;"	f	class:CWallet
UnregisterWallet	main.cpp	/^void UnregisterWallet(CWallet* pwalletIn)$/;"	f
Unserialize	bignum.h	/^    void Unserialize(Stream& s, int nType=0, int nVersion=VERSION)$/;"	f	class:CBigNum
Unserialize	serialize.h	/^    void Unserialize(Stream& s, int, int=0)$/;"	f	class:CFixedFieldString
Unserialize	serialize.h	/^    void Unserialize(Stream& s, int, int=0)$/;"	f	class:CFlatData
Unserialize	serialize.h	/^inline void Unserialize(Stream& is, T& a, long nType, int nVersion=VERSION)$/;"	f
Unserialize	serialize.h	/^inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0) { char f; READDATA(s, f); a=f; }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, char& a,           int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, double& a,         int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, float& a,          int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int64& a,          int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, signed char& a,    int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, signed int& a,     int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, signed long& a,    int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, signed short& a,   int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint64& a,         int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, unsigned char& a,  int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, unsigned int& a,   int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, unsigned long& a,  int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, unsigned short& a, int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, CScript& v, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, boost::tuple<T0, T1, T2>& item, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::basic_string<C>& str, int, int)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::set<K, Pred, A>& m, int nType, int nVersion)$/;"	f
Unserialize	uint256.h	/^    void Unserialize(Stream& s, int nType=0, int nVersion=VERSION)$/;"	f	class:base_uint
Unserialize_impl	serialize.h	/^void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&)$/;"	f
Unserialize_impl	serialize.h	/^void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&)$/;"	f
UnsignedMin	cryptopp/misc.h	/^template <class T1, class T2> inline const T1 UnsignedMin(const T1& a, const T2& b)$/;"	f
UpdateSpent	wallet.h	/^    bool UpdateSpent(const std::vector<char>& vfNewSpent)$/;"	f	class:CWalletTx
UpdateTooltip	ui.cpp	/^void CMyTaskBarIcon::UpdateTooltip()$/;"	f	class:CMyTaskBarIcon
UpdateTxIndex	db.cpp	/^bool CTxDB::UpdateTxIndex(uint256 hash, const CTxIndex& txindex)$/;"	f	class:CTxDB
UpdatedTransaction	main.cpp	/^void static UpdatedTransaction(const uint256& hashTx)$/;"	f	file:
UpdatedTransaction	wallet.h	/^    void UpdatedTransaction(const uint256 &hashTx)$/;"	f	class:CWallet
VERSION	serialize.h	/^static const int VERSION = 40000;$/;"	v
VERSION_IS_BETA	serialize.h	/^static const bool VERSION_IS_BETA = true;$/;"	v
ValidateDomainParameters	cryptopp/cryptlib.h	/^	bool ValidateDomainParameters(RandomNumberGenerator &rng) const$/;"	f	class:AuthenticatedKeyAgreementDomain
ValidateDomainParameters	cryptopp/cryptlib.h	/^	bool ValidateDomainParameters(RandomNumberGenerator &rng) const$/;"	f	class:SimpleKeyAgreementDomain
Value	json/json_spirit_value.h	/^    typedef Config::Value_type  Value;$/;"	t	namespace:json_spirit
ValueFromAmount	rpc.cpp	/^Value ValueFromAmount(int64 amount)$/;"	f
ValueString	script.h	/^inline std::string ValueString(const std::vector<unsigned char>& vch)$/;"	f
ValueTypeMismatch	cryptopp/cryptlib.h	/^		ValueTypeMismatch(const std::string &name, const std::type_info &stored, const std::type_info &retrieving)$/;"	f	class:NameValuePairs::ValueTypeMismatch
ValueTypeMismatch	cryptopp/cryptlib.h	/^	class CRYPTOPP_DLL ValueTypeMismatch : public InvalidArgument$/;"	c	class:NameValuePairs
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( bool value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( boost::int64_t value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( boost::uint64_t value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( const Array& value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( const Const_str_ptr value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( const Object& value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( const String_type& value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( const Value_impl< Config >& other )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( double value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl( int value )$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    Value_impl< Config >::Value_impl()$/;"	f	class:json_spirit::Value_impl
Value_impl	json/json_spirit_value.h	/^    class Value_impl$/;"	c	namespace:json_spirit
Value_type	json/json_spirit_value.h	/^        typedef Value_impl< Config_map > Value_type;$/;"	t	struct:json_spirit::Config_map
Value_type	json/json_spirit_value.h	/^        typedef Value_impl< Config_vector > Value_type;$/;"	t	struct:json_spirit::Config_vector
Value_type	json/json_spirit_value.h	/^        typedef typename Config::Value_type Value_type;$/;"	t	struct:json_spirit::Pair_impl
Value_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	g	namespace:json_spirit
Value_type_name	json/json_spirit_value.h	/^    static const char* Value_type_name[]={"obj", "array", "str", "bool", "int", "real", "null"};$/;"	m	namespace:json_spirit
Variant	json/json_spirit_value.h	/^                                bool, boost::int64_t, double > Variant;$/;"	t	class:json_spirit::Value_impl
Verify	cryptopp/cryptlib.h	/^	virtual bool Verify(const byte *digest)$/;"	f	class:HashTransformation
Verify	key.h	/^    bool Verify(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:CKey
VerifyDigest	cryptopp/cryptlib.h	/^	virtual bool VerifyDigest(const byte *digest, const byte *input, size_t length)$/;"	f	class:HashTransformation
VerifyScript	script.cpp	/^bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f
VerifySignature	script.cpp	/^bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f
VerifyTruncatedDigest	cryptopp/cryptlib.h	/^	virtual bool VerifyTruncatedDigest(const byte *digest, size_t digestLength, const byte *input, size_t length)$/;"	f	class:HashTransformation
W64LIT	cryptopp/config.h	116;"	d
W64LIT	cryptopp/config.h	119;"	d
WALLET_CRYPTO_KEY_SIZE	crypter.h	/^const unsigned int WALLET_CRYPTO_KEY_SIZE = 32;$/;"	v
WALLET_CRYPTO_SALT_SIZE	crypter.h	/^const unsigned int WALLET_CRYPTO_SALT_SIZE = 8;$/;"	v
WIDTH	uint256.h	/^    enum { WIDTH=BITS\/32 };$/;"	e	enum:base_uint::__anon1
WIN32_LEAN_AND_MEAN	headers.h	20;"	d
WINDOWS_PIPES_AVAILABLE	cryptopp/config.h	388;"	d
WORD_BITS	cryptopp/config.h	/^const unsigned int WORD_BITS = WORD_SIZE * 8;$/;"	v
WORD_PTR	cryptopp/cpu.h	179;"	d
WORD_PTR	cryptopp/cpu.h	217;"	d
WORD_REG	cryptopp/cpu.h	178;"	d
WORD_REG	cryptopp/cpu.h	216;"	d
WORD_SIZE	cryptopp/config.h	/^const unsigned int WORD_SIZE = sizeof(word);$/;"	v
WORD_SZ	cryptopp/cpu.h	177;"	d
WORD_SZ	cryptopp/cpu.h	215;"	d
WORKAROUND_MS_BUG_Q258000	cryptopp/config.h	72;"	d
WRITEDATA	serialize.h	137;"	d
WSAEADDRINUSE	util.h	106;"	d
WSAEALREADY	util.h	101;"	d
WSAEINPROGRESS	util.h	105;"	d
WSAEINTR	util.h	104;"	d
WSAEINVAL	util.h	100;"	d
WSAEMSGSIZE	util.h	103;"	d
WSAENOTSOCK	util.h	107;"	d
WSAEWOULDBLOCK	util.h	102;"	d
WSAGetLastError	util.h	99;"	d
WXINCLUDEPATHS	Makefile	/^WXINCLUDEPATHS=$(shell wx-config --cxxflags)$/;"	m
WXLIBS	Makefile	/^WXLIBS=$(shell wx-config --libs)$/;"	m
Wait	irc.cpp	/^bool Wait(int nSeconds)$/;"	f
Waitable	cryptopp/cryptlib.h	/^class CRYPTOPP_NO_VTABLE Waitable$/;"	c
WalletTxToJSON	rpc.cpp	/^void WalletTxToJSON(const CWalletTx& wtx, Object& entry)$/;"	f
WalletUpdateSpent	wallet.cpp	/^void CWallet::WalletUpdateSpent(const CTransaction &tx)$/;"	f	class:CWallet
WildcardMatch	util.cpp	/^bool WildcardMatch(const char* psz, const char* mask)$/;"	f
WildcardMatch	util.cpp	/^bool WildcardMatch(const string& str, const string& mask)$/;"	f
WordToString	cryptopp/misc.h	/^std::string WordToString(T value, ByteOrder order = BIG_ENDIAN_ORDER)$/;"	f
Write	db.h	/^    bool Write(const K& key, const T& value, bool fOverwrite=true)$/;"	f	class:CDB
WriteAccount	db.cpp	/^bool CWalletDB::WriteAccount(const string& strAccount, const CAccount& account)$/;"	f	class:CWalletDB
WriteAccountingEntry	db.cpp	/^bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)$/;"	f	class:CWalletDB
WriteAddress	db.cpp	/^bool CAddrDB::WriteAddress(const CAddress& addr)$/;"	f	class:CAddrDB
WriteBestBlock	db.h	/^    bool WriteBestBlock(const CBlockLocator& locator)$/;"	f	class:CWalletDB
WriteBestInvalidWork	db.cpp	/^bool CTxDB::WriteBestInvalidWork(CBigNum bnBestInvalidWork)$/;"	f	class:CTxDB
WriteBlockIndex	db.cpp	/^bool CTxDB::WriteBlockIndex(const CDiskBlockIndex& blockindex)$/;"	f	class:CTxDB
WriteCompactSize	serialize.h	/^void WriteCompactSize(Stream& os, uint64 nSize)$/;"	f
WriteCryptedKey	db.h	/^    bool WriteCryptedKey(const std::vector<unsigned char>& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, bool fEraseUnencryptedKey = true)$/;"	f	class:CWalletDB
WriteDefaultKey	db.h	/^    bool WriteDefaultKey(const std::vector<unsigned char>& vchPubKey)$/;"	f	class:CWalletDB
WriteHashBestChain	db.cpp	/^bool CTxDB::WriteHashBestChain(uint256 hashBestChain)$/;"	f	class:CTxDB
WriteKey	db.h	/^    bool WriteKey(const std::vector<unsigned char>& vchPubKey, const CPrivKey& vchPrivKey)$/;"	f	class:CWalletDB
WriteMasterKey	db.h	/^    bool WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)$/;"	f	class:CWalletDB
WriteName	db.cpp	/^bool CWalletDB::WriteName(const string& strAddress, const string& strName)$/;"	f	class:CWalletDB
WritePool	db.h	/^    bool WritePool(int64 nPool, const CKeyPool& keypool)$/;"	f	class:CWalletDB
WriteSetting	db.h	/^    bool WriteSetting(const std::string& strKey, const T& value)$/;"	f	class:CWalletDB
WriteSetting	main.h	/^bool WriteSetting(const std::string& strKey, const T& value)$/;"	f
WriteToDisk	main.h	/^    bool WriteToDisk(unsigned int& nFileRet, unsigned int& nBlockPosRet)$/;"	f	class:CBlock
WriteToDisk	wallet.cpp	/^bool CWalletTx::WriteToDisk()$/;"	f	class:CWalletTx
WriteTx	db.h	/^    bool WriteTx(uint256 hash, const CWalletTx& wtx)$/;"	f	class:CWalletDB
WriteVersion	db.h	/^    bool WriteVersion(int nVersion)$/;"	f	class:CDB
WriteVersion	serialize.h	/^    void WriteVersion()          { *this << nVersion; }$/;"	f	class:CAutoFile
WriteVersion	serialize.h	/^    void WriteVersion()          { *this << nVersion; }$/;"	f	class:CDataStream
Wt	cryptopp/sha.cpp	148;"	d	file:
Wt_15	cryptopp/sha.cpp	150;"	d	file:
Wt_2	cryptopp/sha.cpp	149;"	d	file:
Wt_7	cryptopp/sha.cpp	151;"	d	file:
X86_SHA256_HashBlocks	cryptopp/sha.cpp	/^static void CRYPTOPP_FASTCALL X86_SHA256_HashBlocks(word32 *state, const word32 *data, size_t len$/;"	f	file:
XMMWORD_PTR	cryptopp/cpu.h	154;"	d
XMMWORD_PTR	cryptopp/cpu.h	159;"	d
_	util.h	/^inline const char* _(const char* psz)$/;"	f
_WIN32_IE	headers.h	17;"	d
_WIN32_IE	headers.h	19;"	d
_WIN32_WINNT	headers.h	13;"	d
_WIN32_WINNT	headers.h	15;"	d
__CRYPTER_H__	crypter.h	5;"	d
__INCLUDED_PROTOCOL_H__	protocol.h	11;"	d
__STDC_LIMIT_MACROS	headers.h	21;"	d
__USE_W32_SOCKETS	cryptopp/config.h	104;"	d
__forceinline	util.h	39;"	d
__stl_alloc_rebind	cryptopp/secblock.h	/^__stl_alloc_rebind(CryptoPP::AllocatorWithCleanup<_Tp1>& __a, const _Tp2*)$/;"	f
__uibase__	uibase.h	9;"	d
_interlockedbittestandreset	cryptopp/misc.h	13;"	d
_interlockedbittestandreset	cryptopp/misc.h	18;"	d
_interlockedbittestandreset64	cryptopp/misc.h	15;"	d
_interlockedbittestandreset64	cryptopp/misc.h	20;"	d
_interlockedbittestandset	cryptopp/misc.h	12;"	d
_interlockedbittestandset	cryptopp/misc.h	17;"	d
_interlockedbittestandset64	cryptopp/misc.h	14;"	d
_interlockedbittestandset64	cryptopp/misc.h	19;"	d
_strlwr	util.h	113;"	d
_vsnprintf	util.h	111;"	d
a	cryptopp/sha.cpp	469;"	d	file:
abs64	util.h	/^inline int64 abs64(int64 n)$/;"	f
actions_	json/json_spirit_reader_template.h	/^        Semantic_actions_t& actions_;$/;"	m	class:json_spirit::Json_grammer
add	json/json_spirit_value.h	/^        static Value_type& add( Object_type& obj, const String_type& name, const Value_type& value )$/;"	f	struct:json_spirit::Config_map
add	json/json_spirit_value.h	/^        static Value_type& add( Object_type& obj, const String_type& name, const Value_type& value )$/;"	f	struct:json_spirit::Config_vector
add_esc_char	json/json_spirit_writer_template.h	/^    bool add_esc_char( Char_type c, String_type& s )$/;"	f	namespace:json_spirit
add_esc_chars	json/json_spirit_writer_template.h	/^    String_type add_esc_chars( const String_type& s )$/;"	f	namespace:json_spirit
add_first	json/json_spirit_reader_template.h	/^        Value_type* add_first( const Value_type& value )$/;"	f	class:json_spirit::Semantic_actions
add_posn_iter_and_read_range_or_throw	json/json_spirit_reader_template.h	/^    void add_posn_iter_and_read_range_or_throw( Iter_type begin, Iter_type end, Value_type& value )$/;"	f	namespace:json_spirit
add_to_current	json/json_spirit_reader_template.h	/^        Value_type* add_to_current( const Value_type& value )$/;"	f	class:json_spirit::Semantic_actions
addr	net.h	/^    CAddress addr;$/;"	m	class:CNode
addr	ui.h	/^    CAddress addr;$/;"	m	class:CSendingDialog
address	cryptopp/secblock.h	/^	const_pointer address(const_reference r) const {return (&r); }$/;"	f	class:AllocatorBase
address	cryptopp/secblock.h	/^	pointer address(reference r) const {return (&r);}$/;"	f	class:AllocatorBase
alignup	util.h	/^T* alignup(T* p)$/;"	f
allocate	cryptopp/secblock.h	/^	pointer allocate(size_type n)$/;"	f	class:FixedSizeAllocatorWithCleanup
allocate	cryptopp/secblock.h	/^	pointer allocate(size_type n, const void * = NULL)$/;"	f	class:AllocatorWithCleanup
allocate	cryptopp/secblock.h	/^	pointer allocate(size_type n, const void * = NULL)$/;"	f	class:NullAllocator
allocate	cryptopp/secblock.h	/^	pointer allocate(size_type n, const void *hint)$/;"	f	class:FixedSizeAllocatorWithCleanup
allocate	serialize.h	/^    T* allocate(std::size_t n, const void *hint = 0)$/;"	f	struct:secure_allocator
allocator_type	serialize.h	/^    typedef vector_type::allocator_type   allocator_type;$/;"	t	class:CDataStream
altstacktop	script.cpp	64;"	d	file:
append_esc_char_and_incr_iter	json/json_spirit_reader_template.h	/^    void append_esc_char_and_incr_iter( String_type& s, $/;"	f	namespace:json_spirit
array_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
array_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	e	enum:json_spirit::Value_type
atoi	util.h	/^inline int atoi(const std::string& str)$/;"	f
atoi64	util.h	/^inline int64 atoi64(const char* psz)$/;"	f
atoi64	util.h	/^inline int64 atoi64(const std::string& str)$/;"	f
attach	cryptopp/smartptr.h	/^template <class T> void counted_ptr<T>::attach(const T &r)$/;"	f	class:counted_ptr
b	cryptopp/sha.cpp	470;"	d	file:
backupwallet	rpc.cpp	/^Value backupwallet(const Array& params, bool fHelp)$/;"	f
base	serialize.h	/^    typedef std::allocator<T> base;$/;"	t	struct:secure_allocator
base_uint	uint256.h	/^class base_uint$/;"	c
base_uint160	uint256.h	/^typedef base_uint<160> base_uint160;$/;"	t
base_uint256	uint256.h	/^typedef base_uint<256> base_uint256;$/;"	t
basetype	uint256.h	/^    typedef base_uint160 basetype;$/;"	t	class:uint160
basetype	uint256.h	/^    typedef base_uint256 basetype;$/;"	t	class:uint256
begin	cryptopp/secblock.h	/^	const_iterator begin() const$/;"	f	class:SecBlock
begin	cryptopp/secblock.h	/^	iterator begin()$/;"	f	class:SecBlock
begin	serialize.h	/^    char* begin() { return pbegin; }$/;"	f	class:CFlatData
begin	serialize.h	/^    const char* begin() const { return pbegin; }$/;"	f	class:CFlatData
begin	serialize.h	/^    const_iterator begin() const                     { return vch.begin() + nReadPos; }$/;"	f	class:CDataStream
begin	serialize.h	/^    iterator begin()                                 { return vch.begin() + nReadPos; }$/;"	f	class:CDataStream
begin	uint256.h	/^    unsigned char* begin()$/;"	f	class:base_uint
begin_	json/json_spirit_reader_template.h	/^        Mp_iter begin_;$/;"	m	struct:json_spirit::Multi_pass_iters
begin_array	json/json_spirit_reader_template.h	/^        void begin_array( Char_type c )$/;"	f	class:json_spirit::Semantic_actions
begin_compound	json/json_spirit_reader_template.h	/^        void begin_compound()$/;"	f	class:json_spirit::Semantic_actions
begin_obj	json/json_spirit_reader_template.h	/^        void begin_obj( Char_type c )$/;"	f	class:json_spirit::Semantic_actions
bignum_error	bignum.h	/^    explicit bignum_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:bignum_error
bignum_error	bignum.h	/^class bignum_error : public std::runtime_error$/;"	c
blk0	cryptopp/sha.cpp	21;"	d	file:
blk1	cryptopp/sha.cpp	22;"	d	file:
blk2	cryptopp/sha.cpp	464;"	d	file:
bnBestChainWork	main.cpp	/^CBigNum bnBestChainWork = 0;$/;"	v
bnBestInvalidWork	main.cpp	/^CBigNum bnBestInvalidWork = 0;$/;"	v
bnChainWork	main.h	/^    CBigNum bnChainWork;$/;"	m	class:CBlockIndex
bool_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	e	enum:json_spirit::Value_type
byte	cryptopp/config.h	/^typedef unsigned char byte;		\/\/ put in global namespace to avoid ambiguity with other byte typedefs$/;"	t
c	cryptopp/sha.cpp	471;"	d	file:
chIV	crypter.h	/^    unsigned char chIV[WALLET_CRYPTO_KEY_SIZE];$/;"	m	class:CCrypter
chKey	crypter.h	/^    unsigned char chKey[WALLET_CRYPTO_KEY_SIZE];$/;"	m	class:CCrypter
check_type	json/json_spirit_value.h	/^    void Value_impl< Config >::check_type( const Value_type vtype ) const$/;"	f	class:json_spirit::Value_impl
clear	serialize.h	/^    void clear()                                     { vch.clear(); nReadPos = 0; }$/;"	f	class:CDataStream
clear	serialize.h	/^    void clear(short n = 0)      { state = n; }$/;"	f	class:CAutoFile
clear	serialize.h	/^    void clear(short n)          { state = n; }  \/\/ name conflict with vector clear()$/;"	f	class:CDataStream
clonable_ptr	cryptopp/smartptr.h	/^	clonable_ptr(T *p = NULL) : member_ptr<T>(p) {}$/;"	f	class:clonable_ptr
clonable_ptr	cryptopp/smartptr.h	/^	clonable_ptr(const T &obj) : member_ptr<T>(obj.Clone()) {}$/;"	f	class:clonable_ptr
clonable_ptr	cryptopp/smartptr.h	/^	clonable_ptr(const clonable_ptr<T>& rhs)$/;"	f	class:clonable_ptr
clonable_ptr	cryptopp/smartptr.h	/^template<class T> class clonable_ptr : public member_ptr<T>$/;"	c
closesocket	util.h	134;"	d
column_	json/json_spirit_error_position.h	/^        unsigned int column_;$/;"	m	struct:json_spirit::Error_position
connect	rpc.cpp	/^    bool connect(const std::string& server, const std::string& port)$/;"	f	class:SSLIOStreamDevice
const_iterator	cryptopp/secblock.h	/^	typedef typename A::const_pointer const_iterator;$/;"	t	class:SecBlock
const_iterator	serialize.h	/^    typedef vector_type::const_iterator   const_iterator;$/;"	t	class:CDataStream
const_pointer	cryptopp/secblock.h	/^	typedef const T * const_pointer;$/;"	t	class:AllocatorBase
const_pointer	serialize.h	/^    typedef typename base::const_pointer const_pointer;$/;"	t	struct:secure_allocator
const_reference	cryptopp/secblock.h	/^	typedef const T & const_reference;$/;"	t	class:AllocatorBase
const_reference	serialize.h	/^    typedef typename base::const_reference const_reference;$/;"	t	struct:secure_allocator
const_reference	serialize.h	/^    typedef vector_type::const_reference  const_reference;$/;"	t	class:CDataStream
construct	cryptopp/secblock.h	/^	void construct(pointer p, const T& val) {new (p) T(val);}$/;"	f	class:AllocatorBase
counted_ptr	cryptopp/smartptr.h	/^	counted_ptr(const T &r) : m_p(0) {attach(r);}$/;"	f	class:counted_ptr
counted_ptr	cryptopp/smartptr.h	/^template <class T> counted_ptr<T>::counted_ptr(T *p)$/;"	f	class:counted_ptr
counted_ptr	cryptopp/smartptr.h	/^template <class T> counted_ptr<T>::counted_ptr(const counted_ptr<T>& rhs)$/;"	f	class:counted_ptr
counted_ptr	cryptopp/smartptr.h	/^template<class T> class counted_ptr$/;"	c
cs_KeyStore	keystore.h	/^    mutable CCriticalSection cs_KeyStore;$/;"	m	class:CKeyStore
cs_db	db.cpp	/^static CCriticalSection cs_db;$/;"	v	file:
cs_inventory	net.h	/^    CCriticalSection cs_inventory;$/;"	m	class:CNode
cs_main	main.cpp	/^CCriticalSection cs_main;$/;"	v
cs_mapAddresses	net.cpp	/^CCriticalSection cs_mapAddresses;$/;"	v
cs_mapAlerts	main.cpp	/^CCriticalSection cs_mapAlerts;$/;"	v
cs_mapRelay	net.cpp	/^CCriticalSection cs_mapRelay;$/;"	v
cs_mapRequests	net.h	/^    CCriticalSection cs_mapRequests;$/;"	m	class:CNode
cs_mapTransactions	main.cpp	/^CCriticalSection cs_mapTransactions;$/;"	v
cs_nWalletUnlockTime	rpc.cpp	/^static CCriticalSection cs_nWalletUnlockTime;$/;"	v	file:
cs_vNodes	net.cpp	/^CCriticalSection cs_vNodes;$/;"	v
cs_vRecv	net.h	/^    CCriticalSection cs_vRecv;$/;"	m	class:CNode
cs_vSend	net.h	/^    CCriticalSection cs_vSend;$/;"	m	class:CNode
cs_wallet	wallet.h	/^    mutable CCriticalSection cs_wallet;$/;"	m	class:CWallet
current_p_	json/json_spirit_reader_template.h	/^        Value_type* current_p_;         \/\/ the child object or array that is currently being constructed$/;"	m	class:json_spirit::Semantic_actions
d	cryptopp/sha.cpp	472;"	d	file:
dHashesPerSec	main.cpp	/^double dHashesPerSec;$/;"	v
dPriority	main.cpp	/^    double dPriority;$/;"	m	class:COrphan	file:
data	cryptopp/secblock.h	/^	typename A::const_pointer data() const {return m_ptr;}$/;"	f	class:SecBlock
data	cryptopp/secblock.h	/^	typename A::pointer data() {return m_ptr;}$/;"	f	class:SecBlock
dd_mutex	util.cpp	/^static boost::interprocess::interprocess_mutex dd_mutex;$/;"	v	file:
deallocate	cryptopp/secblock.h	/^	void deallocate(void *p, size_type n)$/;"	f	class:AllocatorWithCleanup
deallocate	cryptopp/secblock.h	/^	void deallocate(void *p, size_type n)$/;"	f	class:FixedSizeAllocatorWithCleanup
deallocate	cryptopp/secblock.h	/^	void deallocate(void *p, size_type n)$/;"	f	class:NullAllocator
deallocate	serialize.h	/^    void deallocate(T* p, std::size_t n)$/;"	f	struct:secure_allocator
definition	json/json_spirit_reader_template.h	/^            definition( const Json_grammer& self )$/;"	f	class:json_spirit::Json_grammer::definition
definition	json/json_spirit_reader_template.h	/^        class definition$/;"	c	class:json_spirit::Json_grammer
destroy	cryptopp/secblock.h	/^	void destroy(pointer p) {p->~T();}$/;"	f	class:AllocatorBase
difference_type	cryptopp/secblock.h	/^	typedef ptrdiff_t difference_type;$/;"	t	class:AllocatorBase
difference_type	cryptopp/secblock.h	/^	typedef std::ptrdiff_t difference_type;$/;"	t	class:AllocatorBase
difference_type	serialize.h	/^    typedef typename base::difference_type  difference_type;$/;"	t	struct:secure_allocator
difference_type	serialize.h	/^    typedef vector_type::difference_type  difference_type;$/;"	t	class:CDataStream
dummy	cryptopp/misc.h	/^	static char dummy[2*b-1];$/;"	m	struct:CompileAssert
dword	cryptopp/config.h	/^			typedef __uint128_t dword;$/;"	t
dword	cryptopp/config.h	/^			typedef word64 dword;$/;"	t
dword	cryptopp/config.h	/^		typedef word64 dword;$/;"	t
e	cryptopp/sha.cpp	473;"	d	file:
element_type	serialize.h	/^    typedef FILE element_type;$/;"	t	class:CAutoFile
elements_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
empty	cryptopp/secblock.h	/^	bool empty() const {return m_size == 0;}$/;"	f	class:SecBlock
empty	serialize.h	/^    bool empty() const                               { return vch.size() == nReadPos; }$/;"	f	class:CDataStream
encryptwallet	rpc.cpp	/^Value encryptwallet(const Array& params, bool fHelp)$/;"	f
end	cryptopp/secblock.h	/^	const_iterator end() const$/;"	f	class:SecBlock
end	cryptopp/secblock.h	/^	iterator end()$/;"	f	class:SecBlock
end	serialize.h	/^    char* end() { return pend; }$/;"	f	class:CFlatData
end	serialize.h	/^    const char* end() const { return pend; }$/;"	f	class:CFlatData
end	serialize.h	/^    const_iterator end() const                       { return vch.end(); }$/;"	f	class:CDataStream
end	serialize.h	/^    iterator end()                                   { return vch.end(); }$/;"	f	class:CDataStream
end	uint256.h	/^    unsigned char* end()$/;"	f	class:base_uint
end_	json/json_spirit_reader_template.h	/^        Mp_iter end_;$/;"	m	struct:json_spirit::Multi_pass_iters
end_array	json/json_spirit_reader_template.h	/^        void end_array( Char_type c )$/;"	f	class:json_spirit::Semantic_actions
end_compound	json/json_spirit_reader_template.h	/^        void end_compound()$/;"	f	class:json_spirit::Semantic_actions
end_obj	json/json_spirit_reader_template.h	/^        void end_obj( Char_type c )$/;"	f	class:json_spirit::Semantic_actions
eof	serialize.h	/^    bool eof() const             { return size() == 0; }$/;"	f	class:CDataStream
erase	serialize.h	/^    iterator erase(iterator first, iterator last)$/;"	f	class:CDataStream
erase	serialize.h	/^    iterator erase(iterator it)$/;"	f	class:CDataStream
error	util.cpp	/^bool error(const char* format, ...)$/;"	f
exceptions	serialize.h	/^    short exceptions()           { return exceptmask; }$/;"	f	class:CAutoFile
exceptions	serialize.h	/^    short exceptions()           { return exceptmask; }$/;"	f	class:CDataStream
exceptions	serialize.h	/^    short exceptions(short mask) { short prev = exceptmask; exceptmask = mask; setstate(0, "CAutoFile"); return prev; }$/;"	f	class:CAutoFile
exceptions	serialize.h	/^    short exceptions(short mask) { short prev = exceptmask; exceptmask = mask; setstate(0, "CDataStream"); return prev; }$/;"	f	class:CDataStream
exceptmask	serialize.h	/^    short exceptmask;$/;"	m	class:CAutoFile
exceptmask	serialize.h	/^    short exceptmask;$/;"	m	class:CDataStream
f	cryptopp/sha.cpp	474;"	d	file:
f1	cryptopp/sha.cpp	33;"	d	file:
f2	cryptopp/sha.cpp	34;"	d	file:
f3	cryptopp/sha.cpp	35;"	d	file:
f4	cryptopp/sha.cpp	36;"	d	file:
fAbort	ui.h	/^    bool fAbort;$/;"	m	class:CSendingDialog
fAllowDNS	net.cpp	/^bool fAllowDNS = false;$/;"	v
fAvailableCreditCached	wallet.h	/^    mutable char fAvailableCreditCached;$/;"	m	class:CWalletTx
fCanCancel	ui.h	/^    bool fCanCancel;$/;"	m	class:CSendingDialog
fChangeCached	wallet.h	/^    mutable char fChangeCached;$/;"	m	class:CWalletTx
fClient	net.cpp	/^bool fClient = false;$/;"	v
fClient	net.h	/^    bool fClient;$/;"	m	class:CNode
fClosedToTray	ui.cpp	/^bool fClosedToTray = false;$/;"	v
fCommandLine	util.cpp	/^bool fCommandLine = false;$/;"	v
fConfirmedDisplayed	wallet.h	/^    mutable char fConfirmedDisplayed;$/;"	m	class:CWalletTx
fCreditCached	wallet.h	/^    mutable char fCreditCached;$/;"	m	class:CWalletTx
fDaemon	util.cpp	/^bool fDaemon = false;$/;"	v
fDbEnvInit	db.cpp	/^static bool fDbEnvInit = false;$/;"	v	file:
fDebitCached	wallet.h	/^    mutable char fDebitCached;$/;"	m	class:CWalletTx
fDebug	util.cpp	/^bool fDebug = false;$/;"	v
fDisconnect	net.h	/^    bool fDisconnect;$/;"	m	class:CNode
fDuringSend	ui.h	/^    bool fDuringSend;$/;"	m	class:CAddressBookDialog
fEnabledPrev	ui.h	/^    bool fEnabledPrev;$/;"	m	class:CSendDialog
fFileBacked	wallet.h	/^    bool fFileBacked;$/;"	m	class:CWallet
fFromMe	wallet.h	/^    char fFromMe;$/;"	m	class:CWalletTx
fGenerateBitcoins	main.cpp	/^int fGenerateBitcoins = false;$/;"	v
fGetAddr	net.h	/^    bool fGetAddr;$/;"	m	class:CNode
fGotExternalIP	irc.cpp	/^bool fGotExternalIP = false;$/;"	v
fHaveUPnP	main.h	/^static const int fHaveUPnP = false;$/;"	v
fHaveUPnP	main.h	/^static const int fHaveUPnP = true;$/;"	v
fInbound	net.h	/^    bool fInbound;$/;"	m	class:CNode
fKeySet	crypter.h	/^    bool fKeySet;$/;"	m	class:CCrypter
fLimitProcessors	main.cpp	/^int fLimitProcessors = false;$/;"	v
fLogTimestamps	util.cpp	/^bool fLogTimestamps = false;$/;"	v
fMerkleVerified	main.h	/^    mutable char fMerkleVerified;$/;"	m	class:CMerkleTx
fMinimizeOnClose	main.cpp	/^int fMinimizeOnClose = true;$/;"	v
fMinimizeToTray	main.cpp	/^int fMinimizeToTray = true;$/;"	v
fNeedHandshake	rpc.cpp	/^    bool fNeedHandshake;$/;"	m	class:SSLIOStreamDevice	file:
fNetworkNode	net.h	/^    bool fNetworkNode;$/;"	m	class:CNode
fNoListen	util.cpp	/^bool fNoListen = false;$/;"	v
fOnSetFocusAddress	ui.h	/^    bool fOnSetFocusAddress;$/;"	m	class:CMainFrame
fPrintToConsole	util.cpp	/^bool fPrintToConsole = false;$/;"	v
fPrintToDebugger	util.cpp	/^bool fPrintToDebugger = false;$/;"	v
fReadOnly	db.h	/^    bool fReadOnly;$/;"	m	class:CDB
fRefresh	ui.h	/^    bool fRefresh;$/;"	m	class:CMainFrame
fRefreshListCtrl	ui.h	/^    bool fRefreshListCtrl;$/;"	m	class:CMainFrame
fRefreshListCtrlRunning	ui.h	/^    bool fRefreshListCtrlRunning;$/;"	m	class:CMainFrame
fRequestShutdown	util.cpp	/^bool fRequestShutdown = false;$/;"	v
fServer	util.cpp	/^bool fServer = false;$/;"	v
fSet	key.h	/^    bool fSet;$/;"	m	class:CKey
fShowGenerated	ui.h	/^    bool fShowGenerated;$/;"	m	class:CMainFrame
fShowReceived	ui.h	/^    bool fShowReceived;$/;"	m	class:CMainFrame
fShowSent	ui.h	/^    bool fShowSent;$/;"	m	class:CMainFrame
fShutdown	util.cpp	/^bool fShutdown = false;$/;"	v
fSuccess	ui.h	/^    bool fSuccess;$/;"	m	class:CSendingDialog
fSuccessfullyConnected	net.h	/^    bool fSuccessfullyConnected;$/;"	m	class:CNode
fTestNet	util.cpp	/^bool fTestNet = false;$/;"	v
fTimeReceivedIsTxTime	wallet.h	/^    unsigned int fTimeReceivedIsTxTime;$/;"	m	class:CWalletTx
fTmpMinimizeOnClose	ui.h	/^    bool fTmpMinimizeOnClose;$/;"	m	class:COptionsDialog
fTmpStartOnSystemStartup	ui.h	/^    bool fTmpStartOnSystemStartup;$/;"	m	class:COptionsDialog
fUIDone	ui.h	/^    bool fUIDone;$/;"	m	class:CSendingDialog
fUseCrypto	keystore.h	/^    bool fUseCrypto;$/;"	m	class:CCryptoKeyStore
fUseProxy	net.cpp	/^int fUseProxy = false;$/;"	v
fUseSSL	rpc.cpp	/^    bool fUseSSL;$/;"	m	class:SSLIOStreamDevice	file:
fUseUPnP	main.cpp	/^int fUseUPnP = false;$/;"	v
fUseUPnP	main.cpp	/^int fUseUPnP = true;$/;"	v
fWorkDone	ui.h	/^    bool fWorkDone;$/;"	m	class:CSendingDialog
fail	serialize.h	/^    bool fail() const            { return state & (std::ios::badbit | std::ios::failbit); }$/;"	f	class:CAutoFile
fail	serialize.h	/^    bool fail() const            { return state & (std::ios::badbit | std::ios::failbit); }$/;"	f	class:CDataStream
fclose	serialize.h	/^    void fclose()$/;"	f	class:CAutoFile
file	serialize.h	/^    FILE* file;$/;"	m	class:CAutoFile
find_value	json/json_spirit_utils.h	/^    const typename Object_type::value_type::Value_type& find_value( const Object_type& obj, const String_type& name )$/;"	f	namespace:json_spirit
fn	net.h	/^    void (*fn)(void*, CDataStream&);$/;"	m	class:CRequestTracker
for	serialize.h	30;"	d
for	uint256.h	22;"	d
for	util.h	36;"	d
g	cryptopp/sha.cpp	475;"	d	file:
g_cacheLineSize	cryptopp/cpu.cpp	/^word32 g_cacheLineSize = CRYPTOPP_L1_CACHE_LINE_SIZE;$/;"	v
g_hasISSE	cryptopp/cpu.cpp	/^bool g_hasISSE = false, g_hasSSE2 = false, g_hasSSSE3 = false, g_hasMMX = false, g_isP4 = false;$/;"	v
g_hasMMX	cryptopp/cpu.cpp	/^bool g_hasISSE = false, g_hasSSE2 = false, g_hasSSSE3 = false, g_hasMMX = false, g_isP4 = false;$/;"	v
g_hasSSE2	cryptopp/cpu.cpp	/^bool g_hasISSE = false, g_hasSSE2 = false, g_hasSSSE3 = false, g_hasMMX = false, g_isP4 = false;$/;"	v
g_hasSSSE3	cryptopp/cpu.cpp	/^bool g_hasISSE = false, g_hasSSE2 = false, g_hasSSSE3 = false, g_hasMMX = false, g_isP4 = false;$/;"	v
g_isP4	cryptopp/cpu.cpp	/^bool g_hasISSE = false, g_hasSSE2 = false, g_hasSSSE3 = false, g_hasMMX = false, g_isP4 = false;$/;"	v
g_locale	ui.cpp	/^wxLocale g_locale;$/;"	v
g_x86DetectionDone	cryptopp/cpu.cpp	/^bool g_x86DetectionDone = false;$/;"	v
get	cryptopp/smartptr.h	/^	T* get() { return m_p; }$/;"	f	class:member_ptr
get	cryptopp/smartptr.h	/^	const T* get() const { return m_p; }$/;"	f	class:counted_ptr
get	cryptopp/smartptr.h	/^	const T* get() const { return m_p; }$/;"	f	class:member_ptr
get	cryptopp/smartptr.h	/^template <class T> T* counted_ptr<T>::get()$/;"	f	class:counted_ptr
get_array	json/json_spirit_value.h	/^    const typename Value_impl< Config >::Array& Value_impl< Config >::get_array() const$/;"	f	class:json_spirit::Value_impl
get_array	json/json_spirit_value.h	/^    typename Value_impl< Config >::Array& Value_impl< Config >::get_array()$/;"	f	class:json_spirit::Value_impl
get_bool	json/json_spirit_value.h	/^    bool Value_impl< Config >::get_bool() const$/;"	f	class:json_spirit::Value_impl
get_int	json/json_spirit_value.h	/^    int Value_impl< Config >::get_int() const$/;"	f	class:json_spirit::Value_impl
get_int64	json/json_spirit_value.h	/^    boost::int64_t Value_impl< Config >::get_int64() const$/;"	f	class:json_spirit::Value_impl
get_name	json/json_spirit_value.h	/^        static String_type get_name( const Pair_type& pair )$/;"	f	struct:json_spirit::Config_map
get_name	json/json_spirit_value.h	/^        static String_type get_name( const Pair_type& pair )$/;"	f	struct:json_spirit::Config_vector
get_obj	json/json_spirit_value.h	/^    const typename Value_impl< Config >::Object& Value_impl< Config >::get_obj() const$/;"	f	class:json_spirit::Value_impl
get_obj	json/json_spirit_value.h	/^    typename Value_impl< Config >::Object& Value_impl< Config >::get_obj()$/;"	f	class:json_spirit::Value_impl
get_real	json/json_spirit_value.h	/^    double Value_impl< Config >::get_real() const$/;"	f	class:json_spirit::Value_impl
get_str	json/json_spirit_reader_template.h	/^    String_type get_str( Iter_type begin, Iter_type end )$/;"	f	namespace:json_spirit
get_str	json/json_spirit_reader_template.h	/^    inline std::string get_str( std::string::const_iterator begin, std::string::const_iterator end )$/;"	f	namespace:json_spirit
get_str	json/json_spirit_reader_template.h	/^    inline std::wstring get_str( std::wstring::const_iterator begin, std::wstring::const_iterator end )$/;"	f	namespace:json_spirit
get_str	json/json_spirit_value.h	/^    const typename Config::String_type& Value_impl< Config >::get_str() const$/;"	f	class:json_spirit::Value_impl
get_str_	json/json_spirit_reader_template.h	/^    String_type get_str_( typename String_type::const_iterator begin, $/;"	f	namespace:json_spirit
get_uint64	json/json_spirit_value.h	/^    boost::uint64_t Value_impl< Config >::get_uint64() const$/;"	f	class:json_spirit::Value_impl
get_value	json/json_spirit_value.h	/^        bool get_value( const Value& value, Type_to_type< bool > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^        boost::int64_t get_value( const Value& value, Type_to_type< boost::int64_t > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^        boost::uint64_t get_value( const Value& value, Type_to_type< boost::uint64_t > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^        double get_value( const Value& value, Type_to_type< double > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^        int get_value( const Value& value, Type_to_type< int > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^        static Value_type get_value( const Pair_type& pair )$/;"	f	struct:json_spirit::Config_map
get_value	json/json_spirit_value.h	/^        static Value_type get_value( const Pair_type& pair )$/;"	f	struct:json_spirit::Config_vector
get_value	json/json_spirit_value.h	/^        typename Value::Array get_value( const Value& value, Type_to_type< typename Value::Array > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^        typename Value::Object get_value( const Value& value, Type_to_type< typename Value::Object > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^        typename Value::String_type get_value( const Value& value, Type_to_type< typename Value::String_type > )$/;"	f	namespace:json_spirit::internal_
get_value	json/json_spirit_value.h	/^    T Value_impl< Config >::get_value() const$/;"	f	class:json_spirit::Value_impl
getaccount	rpc.cpp	/^Value getaccount(const Array& params, bool fHelp)$/;"	f
getaccountaddress	rpc.cpp	/^Value getaccountaddress(const Array& params, bool fHelp)$/;"	f
getaddressesbyaccount	rpc.cpp	/^Value getaddressesbyaccount(const Array& params, bool fHelp)$/;"	f
getbalance	rpc.cpp	/^Value getbalance(const Array& params, bool fHelp)$/;"	f
getblockcount	rpc.cpp	/^Value getblockcount(const Array& params, bool fHelp)$/;"	f
getblocknumber	rpc.cpp	/^Value getblocknumber(const Array& params, bool fHelp)$/;"	f
getconnectioncount	rpc.cpp	/^Value getconnectioncount(const Array& params, bool fHelp)$/;"	f
getdifficulty	rpc.cpp	/^Value getdifficulty(const Array& params, bool fHelp)$/;"	f
getgenerate	rpc.cpp	/^Value getgenerate(const Array& params, bool fHelp)$/;"	f
gethashespersec	rpc.cpp	/^Value gethashespersec(const Array& params, bool fHelp)$/;"	f
getinfo	rpc.cpp	/^Value getinfo(const Array& params, bool fHelp)$/;"	f
getint	bignum.h	/^    int getint() const$/;"	f	class:CBigNum
getnewaddress	rpc.cpp	/^Value getnewaddress(const Array& params, bool fHelp)$/;"	f
getreceivedbyaccount	rpc.cpp	/^Value getreceivedbyaccount(const Array& params, bool fHelp)$/;"	f
getreceivedbyaddress	rpc.cpp	/^Value getreceivedbyaddress(const Array& params, bool fHelp)$/;"	f
gettransaction	rpc.cpp	/^Value gettransaction(const Array& params, bool fHelp)$/;"	f
getuint	bignum.h	/^    unsigned int getuint() const$/;"	f	class:CBigNum
getuint256	bignum.h	/^    uint256 getuint256()$/;"	f	class:CBigNum
getulong	bignum.h	/^    unsigned long getulong() const$/;"	f	class:CBigNum
getvch	bignum.h	/^    std::vector<unsigned char> getvch() const$/;"	f	class:CBigNum
getwork	rpc.cpp	/^Value getwork(const Array& params, bool fHelp)$/;"	f
good	serialize.h	/^    bool good() const            { return !eof() && (state == 0); }$/;"	f	class:CDataStream
good	serialize.h	/^    bool good() const            { return state == 0; }$/;"	f	class:CAutoFile
h	cryptopp/sha.cpp	476;"	d	file:
hListenSocket	net.cpp	/^static SOCKET hListenSocket = INVALID_SOCKET;$/;"	v	file:
hSocket	net.h	/^    SOCKET hSocket;$/;"	m	class:CNode
handshake	rpc.cpp	/^    void handshake(ssl::stream_base::handshake_type role)$/;"	f	class:SSLIOStreamDevice
hash	main.h	/^    uint256 hash;$/;"	m	class:COutPoint
hash	protocol.h	/^        uint256 hash;$/;"	m	class:CInv
hashBestChain	main.cpp	/^uint256 hashBestChain = 0;$/;"	v
hashBlock	main.h	/^    uint256 hashBlock;$/;"	m	class:CMerkleTx
hashContinue	net.h	/^    uint256 hashContinue;$/;"	m	class:CNode
hashLastGetBlocksEnd	net.h	/^    uint256 hashLastGetBlocksEnd;$/;"	m	class:CNode
hashMerkleRoot	main.h	/^    uint256 hashMerkleRoot;$/;"	m	class:CBlock
hashMerkleRoot	main.h	/^    uint256 hashMerkleRoot;$/;"	m	class:CBlockIndex
hashNext	main.h	/^    uint256 hashNext;$/;"	m	class:CDiskBlockIndex
hashPrev	main.h	/^    uint256 hashPrev;$/;"	m	class:CDiskBlockIndex
hashPrevBlock	main.h	/^    uint256 hashPrevBlock;$/;"	m	class:CBlock
heapchk	util.h	/^inline void heapchk()$/;"	f
help	rpc.cpp	/^Value help(const Array& params, bool fHelp)$/;"	f
hex_str_to_char	json/json_spirit_reader_template.h	/^    Char_type hex_str_to_char( Iter_type& begin )$/;"	f	namespace:json_spirit
hex_to_num	json/json_spirit_reader_template.h	/^    Char_type hex_to_num( const Char_type c )$/;"	f	namespace:json_spirit
hword	cryptopp/config.h	/^			typedef word16 hword;$/;"	t
hword	cryptopp/config.h	/^			typedef word32 hword;$/;"	t
hword	cryptopp/config.h	/^		typedef word16 hword;$/;"	t
hword	cryptopp/config.h	/^	typedef word32 hword;$/;"	t
i64tostr	util.h	/^inline std::string i64tostr(int64 n)$/;"	f
ignore	serialize.h	/^    CDataStream& ignore(int nSize)$/;"	f	class:CDataStream
in_avail	serialize.h	/^    int in_avail()               { return size(); }$/;"	f	class:CDataStream
indent	json/json_spirit_writer_template.h	/^        void indent()$/;"	f	class:json_spirit::Generator
indentation_level_	json/json_spirit_writer_template.h	/^        int indentation_level_;$/;"	m	class:json_spirit::Generator
insert	serialize.h	/^    iterator insert(iterator it, const char& x=char()) { return vch.insert(it, x); }$/;"	f	class:CDataStream
insert	serialize.h	/^    void insert(iterator it, const char* first, const char* last)$/;"	f	class:CDataStream
insert	serialize.h	/^    void insert(iterator it, const_iterator first, const_iterator last)$/;"	f	class:CDataStream
insert	serialize.h	/^    void insert(iterator it, size_type n, const char& x) { vch.insert(it, n, x); }$/;"	f	class:CDataStream
insert	serialize.h	/^    void insert(iterator it, std::vector<char>::const_iterator first, std::vector<char>::const_iterator last)$/;"	f	class:CDataStream
instance_of_cdbinit	db.cpp	/^instance_of_cdbinit;$/;"	v	typeref:class:CDBInit
instance_of_cinit	util.cpp	/^instance_of_cinit;$/;"	v	typeref:class:CInit
instance_of_cnetcleanup	net.cpp	/^instance_of_cnetcleanup;$/;"	v	typeref:class:CNetCleanup
int64	serialize.h	/^typedef __int64  int64;$/;"	t
int64	serialize.h	/^typedef long long  int64;$/;"	t
int64	uint256.h	/^typedef __int64  int64;$/;"	t
int64	uint256.h	/^typedef long long  int64;$/;"	t
int64	util.h	/^typedef __int64  int64;$/;"	t
int64	util.h	/^typedef long long  int64;$/;"	t
int64_p	json/json_spirit_reader_template.h	/^    const spirit_namespace::int_parser < boost::int64_t >  int64_p  = spirit_namespace::int_parser < boost::int64_t  >();$/;"	m	namespace:json_spirit
int_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	e	enum:json_spirit::Value_type
internal_	json/json_spirit_value.h	/^    namespace internal_$/;"	n	namespace:json_spirit
ip	irc.cpp	/^    int ip;$/;"	m	struct:ircaddr	file:
ip	protocol.h	/^        unsigned int ip;$/;"	m	class:CAddress
ircaddr	irc.cpp	/^struct ircaddr$/;"	s	file:
isValidCoding	cryptopp/cryptlib.h	/^	bool isValidCoding;$/;"	m	struct:DecodingResult
is_eq	json/json_spirit_reader_template.h	/^    bool is_eq( Iter_type first, Iter_type last, const char* c_str )$/;"	f	namespace:json_spirit
is_null	json/json_spirit_value.h	/^    bool Value_impl< Config >::is_null() const$/;"	f	class:json_spirit::Value_impl
is_uint64	json/json_spirit_value.h	/^    bool Value_impl< Config >::is_uint64() const$/;"	f	class:json_spirit::Value_impl
is_uint64_	json/json_spirit_value.h	/^        bool is_uint64_;$/;"	m	class:json_spirit::Value_impl
istream_iter	json/json_spirit_reader_template.h	/^        typedef std::istream_iterator< Char_type, Char_type > istream_iter;$/;"	t	struct:json_spirit::Multi_pass_iters
iterator	cryptopp/secblock.h	/^	typedef typename A::pointer iterator;$/;"	t	class:SecBlock
iterator	serialize.h	/^    typedef vector_type::iterator         iterator;$/;"	t	class:CDataStream
iters_	json/json_spirit_stream_reader.h	/^        Mp_iters iters_;$/;"	m	class:json_spirit::Stream_reader
iters_	json/json_spirit_stream_reader.h	/^        Mp_iters iters_;$/;"	m	class:json_spirit::Stream_reader_thrower
itostr	util.h	/^inline std::string itostr(int n)$/;"	f
json_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
json_spirit	json/json_spirit_error_position.h	/^namespace json_spirit$/;"	n
json_spirit	json/json_spirit_reader.h	/^namespace json_spirit$/;"	n
json_spirit	json/json_spirit_reader_template.h	/^namespace json_spirit$/;"	n
json_spirit	json/json_spirit_stream_reader.h	/^namespace json_spirit$/;"	n
json_spirit	json/json_spirit_utils.h	/^namespace json_spirit$/;"	n
json_spirit	json/json_spirit_value.h	/^namespace json_spirit$/;"	n
json_spirit	json/json_spirit_writer.h	/^namespace json_spirit$/;"	n
json_spirit	json/json_spirit_writer_template.h	/^namespace json_spirit$/;"	n
key_error	key.h	/^    explicit key_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:key_error
key_error	key.h	/^class key_error : public std::runtime_error$/;"	c
keypoolrefill	rpc.cpp	/^Value keypoolrefill(const Array& params, bool fHelp)$/;"	f
line_	json/json_spirit_error_position.h	/^        unsigned int line_;$/;"	m	struct:json_spirit::Error_position
listaccounts	rpc.cpp	/^Value listaccounts(const Array& params, bool fHelp)$/;"	f
listmined	rpc.cpp	/^Value listmined(const Array& params, bool fHelp)$/;"	f
listreceivedbyaccount	rpc.cpp	/^Value listreceivedbyaccount(const Array& params, bool fHelp)$/;"	f
listreceivedbyaddress	rpc.cpp	/^Value listreceivedbyaddress(const Array& params, bool fHelp)$/;"	f
listtransactions	rpc.cpp	/^Value listtransactions(const Array& params, bool fHelp)$/;"	f
locking_callback	util.cpp	/^void locking_callback(int mode, int i, const char* file, int line)$/;"	f
lockorders	util.cpp	/^static std::map<std::pair<CCriticalSection*, CCriticalSection*>, LockStack> lockorders;$/;"	v	file:
lockstack	util.cpp	/^static boost::thread_specific_ptr<LockStack> lockstack;$/;"	v	file:
loop	util.h	42;"	d
lword	cryptopp/config.h	/^typedef word64 lword;$/;"	t
mArray	json/json_spirit_value.h	/^    typedef mConfig::Array_type  mArray;$/;"	t	namespace:json_spirit
mConfig	json/json_spirit_value.h	/^    typedef Config_map< std::string > mConfig;$/;"	t	namespace:json_spirit
mObject	json/json_spirit_value.h	/^    typedef mConfig::Object_type mObject;$/;"	t	namespace:json_spirit
mValue	json/json_spirit_value.h	/^    typedef mConfig::Value_type  mValue;$/;"	t	namespace:json_spirit
m_alloc	cryptopp/secblock.h	/^	A m_alloc;$/;"	m	class:SecBlock
m_allocated	cryptopp/secblock.h	/^	bool m_allocated;$/;"	m	class:FixedSizeAllocatorWithCleanup
m_array	cryptopp/secblock.h	/^	CRYPTOPP_ALIGN_DATA(8) T m_array[(CRYPTOPP_BOOL_ALIGN16_ENABLED && T_Align16) ? S+8\/sizeof(T) : S];$/;"	m	class:FixedSizeAllocatorWithCleanup
m_array	cryptopp/secblock.h	/^	T m_array[S];$/;"	m	class:FixedSizeAllocatorWithCleanup
m_bitmap	uibase.h	/^		wxStaticBitmap* m_bitmap;$/;"	m	class:CAboutDialogBase
m_bitmapCheckMark	uibase.h	/^		wxStaticBitmap* m_bitmapCheckMark;$/;"	m	class:CSendDialogBase
m_block	cryptopp/misc.h	/^	byte *m_block;$/;"	m	class:PutBlock
m_block	cryptopp/misc.h	/^	const byte *m_block;$/;"	m	class:GetBlock
m_buf	cryptopp/cryptlib.h	/^	byte m_buf[4];	\/\/ for ChannelPutWord16 and ChannelPutWord32, to ensure buffer isn't deallocated before non-blocking operation completes$/;"	m	class:BufferedTransformation
m_buttonAddress	uibase.h	/^		wxButton* m_buttonAddress;$/;"	m	class:CSendDialogBase
m_buttonApply	uibase.h	/^		wxButton* m_buttonApply;$/;"	m	class:COptionsDialogBase
m_buttonCancel	uibase.h	/^		wxButton* m_buttonCancel;$/;"	m	class:CAddressBookDialogBase
m_buttonCancel	uibase.h	/^		wxButton* m_buttonCancel;$/;"	m	class:CGetTextFromUserDialogBase
m_buttonCancel	uibase.h	/^		wxButton* m_buttonCancel;$/;"	m	class:COptionsDialogBase
m_buttonCancel	uibase.h	/^		wxButton* m_buttonCancel;$/;"	m	class:CSendDialogBase
m_buttonCancel	uibase.h	/^		wxButton* m_buttonCancel;$/;"	m	class:CSendingDialogBase
m_buttonCancel	uibase.h	/^		wxButton* m_buttonCancel;$/;"	m	class:CYourAddressDialogBase
m_buttonCopy	uibase.h	/^		wxButton* m_buttonCopy;$/;"	m	class:CAddressBookDialogBase
m_buttonCopy	uibase.h	/^		wxButton* m_buttonCopy;$/;"	m	class:CMainFrameBase
m_buttonCopy	uibase.h	/^		wxButton* m_buttonCopy;$/;"	m	class:CYourAddressDialogBase
m_buttonDelete	uibase.h	/^		wxButton* m_buttonDelete;$/;"	m	class:CAddressBookDialogBase
m_buttonEdit	uibase.h	/^		wxButton* m_buttonEdit;$/;"	m	class:CAddressBookDialogBase
m_buttonNew	uibase.h	/^		wxButton* m_buttonNew;$/;"	m	class:CAddressBookDialogBase
m_buttonNew	uibase.h	/^		wxButton* m_buttonNew;$/;"	m	class:CMainFrameBase
m_buttonNew	uibase.h	/^		wxButton* m_buttonNew;$/;"	m	class:CYourAddressDialogBase
m_buttonOK	uibase.h	/^		wxButton* m_buttonOK;$/;"	m	class:CAboutDialogBase
m_buttonOK	uibase.h	/^		wxButton* m_buttonOK;$/;"	m	class:CAddressBookDialogBase
m_buttonOK	uibase.h	/^		wxButton* m_buttonOK;$/;"	m	class:CGetTextFromUserDialogBase
m_buttonOK	uibase.h	/^		wxButton* m_buttonOK;$/;"	m	class:COptionsDialogBase
m_buttonOK	uibase.h	/^		wxButton* m_buttonOK;$/;"	m	class:CSendingDialogBase
m_buttonOK	uibase.h	/^		wxButton* m_buttonOK;$/;"	m	class:CTxDetailsDialogBase
m_buttonOK	uibase.h	/^		wxButton* m_buttonOK;$/;"	m	class:CYourAddressDialogBase
m_buttonPaste	uibase.h	/^		wxButton* m_buttonPaste;$/;"	m	class:CSendDialogBase
m_buttonRename	uibase.h	/^		wxButton* m_buttonRename;$/;"	m	class:CYourAddressDialogBase
m_buttonSend	uibase.h	/^		wxButton* m_buttonSend;$/;"	m	class:CSendDialogBase
m_checkBoxMinimizeOnClose	uibase.h	/^		wxCheckBox* m_checkBoxMinimizeOnClose;$/;"	m	class:COptionsDialogBase
m_checkBoxMinimizeToTray	uibase.h	/^		wxCheckBox* m_checkBoxMinimizeToTray;$/;"	m	class:COptionsDialogBase
m_checkBoxStartOnSystemStartup	uibase.h	/^		wxCheckBox* m_checkBoxStartOnSystemStartup;$/;"	m	class:COptionsDialogBase
m_checkBoxUseProxy	uibase.h	/^		wxCheckBox* m_checkBoxUseProxy;$/;"	m	class:COptionsDialogBase
m_checkBoxUseUPnP	uibase.h	/^		wxCheckBox* m_checkBoxUseUPnP;$/;"	m	class:COptionsDialogBase
m_choiceFilter	uibase.h	/^		wxChoice* m_choiceFilter;$/;"	m	class:CMainFrameBase
m_choiceTransferType	uibase.h	/^		wxChoice* m_choiceTransferType;$/;"	m	class:CSendDialogBase
m_errorCode	cryptopp/cryptlib.h	/^	int m_errorCode;$/;"	m	class:OS_Error
m_errorType	cryptopp/cryptlib.h	/^	ErrorType m_errorType;$/;"	m	class:Exception
m_fallbackAllocator	cryptopp/secblock.h	/^	A m_fallbackAllocator;$/;"	m	class:FixedSizeAllocatorWithCleanup
m_htmlWin	uibase.h	/^		wxHtmlWindow* m_htmlWin;$/;"	m	class:CTxDetailsDialogBase
m_listBox	uibase.h	/^		wxListBox* m_listBox;$/;"	m	class:COptionsDialogBase
m_listCtrl	ui.h	/^    wxListCtrl* m_listCtrl;$/;"	m	class:CAddressBookDialog
m_listCtrl	ui.h	/^    wxListCtrl* m_listCtrl;$/;"	m	class:CMainFrame
m_listCtrl	uibase.h	/^		wxListCtrl* m_listCtrl;$/;"	m	class:CYourAddressDialogBase
m_listCtrlAll	uibase.h	/^		wxListCtrl* m_listCtrlAll;$/;"	m	class:CMainFrameBase
m_listCtrlReceived	uibase.h	/^		wxListCtrl* m_listCtrlReceived;$/;"	m	class:CMainFrameBase
m_listCtrlReceiving	uibase.h	/^		wxListCtrl* m_listCtrlReceiving;$/;"	m	class:CAddressBookDialogBase
m_listCtrlSending	uibase.h	/^		wxListCtrl* m_listCtrlSending;$/;"	m	class:CAddressBookDialogBase
m_listCtrlSent	uibase.h	/^		wxListCtrl* m_listCtrlSent;$/;"	m	class:CMainFrameBase
m_listCtrlSentReceived	uibase.h	/^		wxListCtrl* m_listCtrlSentReceived;$/;"	m	class:CMainFrameBase
m_menuFile	uibase.h	/^		wxMenu* m_menuFile;$/;"	m	class:CMainFrameBase
m_menuHelp	uibase.h	/^		wxMenu* m_menuHelp;$/;"	m	class:CMainFrameBase
m_menuOptions	uibase.h	/^		wxMenu* m_menuOptions;$/;"	m	class:CMainFrameBase
m_menuOptionsChangeWalletPassphrase	uibase.h	/^		wxMenuItem* m_menuOptionsChangeWalletPassphrase;$/;"	m	class:CMainFrameBase
m_menuOptionsEncryptWallet	uibase.h	/^		wxMenuItem* m_menuOptionsEncryptWallet;$/;"	m	class:CMainFrameBase
m_menubar	uibase.h	/^		wxMenuBar* m_menubar;$/;"	m	class:CMainFrameBase
m_notebook	uibase.h	/^		wxNotebook* m_notebook;$/;"	m	class:CAddressBookDialogBase
m_notebook	uibase.h	/^		wxNotebook* m_notebook;$/;"	m	class:CMainFrameBase
m_object	cryptopp/misc.h	/^	T m_object;$/;"	m	class:ObjectHolder
m_objectFactory	cryptopp/misc.h	/^	F m_objectFactory;$/;"	m	class:Singleton
m_operation	cryptopp/cryptlib.h	/^	std::string m_operation;$/;"	m	class:OS_Error
m_p	cryptopp/smartptr.h	/^	T *m_p;$/;"	m	class:counted_ptr
m_p	cryptopp/smartptr.h	/^	T *m_p;$/;"	m	class:member_ptr
m_p	cryptopp/smartptr.h	/^	T *m_p;$/;"	m	class:simple_ptr
m_panel9	uibase.h	/^		wxPanel* m_panel9;$/;"	m	class:CMainFrameBase
m_panel91	uibase.h	/^		wxPanel* m_panel91;$/;"	m	class:CMainFrameBase
m_panel92	uibase.h	/^		wxPanel* m_panel92;$/;"	m	class:CMainFrameBase
m_panel93	uibase.h	/^		wxPanel* m_panel93;$/;"	m	class:CMainFrameBase
m_panelMain	uibase.h	/^		wxPanel* m_panelMain;$/;"	m	class:COptionsDialogBase
m_panelReceiving	uibase.h	/^		wxPanel* m_panelReceiving;$/;"	m	class:CAddressBookDialogBase
m_panelSending	uibase.h	/^		wxPanel* m_panelSending;$/;"	m	class:CAddressBookDialogBase
m_panelTest2	uibase.h	/^		wxPanel* m_panelTest2;$/;"	m	class:COptionsDialogBase
m_ptr	cryptopp/secblock.h	/^	T *m_ptr;$/;"	m	class:SecBlock
m_ptr	cryptopp/smartptr.h	/^	member_ptr<T> *m_ptr;$/;"	m	class:vector_member_ptrs
m_retrieving	cryptopp/cryptlib.h	/^		const std::type_info &m_retrieving;$/;"	m	class:NameValuePairs::ValueTypeMismatch
m_scrolledWindow	uibase.h	/^		wxScrolledWindow* m_scrolledWindow;$/;"	m	class:COptionsDialogBase
m_size	cryptopp/secblock.h	/^	size_type m_size;$/;"	m	class:SecBlock
m_size	cryptopp/smartptr.h	/^	size_t m_size;$/;"	m	class:vector_member_ptrs
m_state	cryptopp/iterhash.h	/^	FixedSizeAlignedSecBlock<T_HashWordType, T_BlockSize\/sizeof(T_HashWordType), T_StateAligned> m_state;$/;"	m	class:IteratedHashWithStaticTransform
m_staticText19	uibase.h	/^		wxStaticText* m_staticText19;$/;"	m	class:CSendDialogBase
m_staticText20	uibase.h	/^		wxStaticText* m_staticText20;$/;"	m	class:CSendDialogBase
m_staticText31	uibase.h	/^		wxStaticText* m_staticText31;$/;"	m	class:COptionsDialogBase
m_staticText32	uibase.h	/^		wxStaticText* m_staticText32;$/;"	m	class:CMainFrameBase
m_staticText32	uibase.h	/^		wxStaticText* m_staticText32;$/;"	m	class:COptionsDialogBase
m_staticText321	uibase.h	/^		wxStaticText* m_staticText321;$/;"	m	class:COptionsDialogBase
m_staticText36	uibase.h	/^		wxStaticText* m_staticText36;$/;"	m	class:CSendDialogBase
m_staticText40	uibase.h	/^		wxStaticText* m_staticText40;$/;"	m	class:CAboutDialogBase
m_staticText41	uibase.h	/^		wxStaticText* m_staticText41;$/;"	m	class:CMainFrameBase
m_staticText45	uibase.h	/^		wxStaticText* m_staticText45;$/;"	m	class:CAddressBookDialogBase
m_staticText45	uibase.h	/^		wxStaticText* m_staticText45;$/;"	m	class:CYourAddressDialogBase
m_staticText55	uibase.h	/^		wxStaticText* m_staticText55;$/;"	m	class:CAddressBookDialogBase
m_staticText69	uibase.h	/^		wxStaticText* m_staticText69;$/;"	m	class:COptionsDialogBase
m_staticTextBalance	uibase.h	/^		wxStaticText* m_staticTextBalance;$/;"	m	class:CMainFrameBase
m_staticTextInstructions	uibase.h	/^		wxStaticText* m_staticTextInstructions;$/;"	m	class:CSendDialogBase
m_staticTextMain	uibase.h	/^		wxStaticText* m_staticTextMain;$/;"	m	class:CAboutDialogBase
m_staticTextMessage1	uibase.h	/^		wxStaticText* m_staticTextMessage1;$/;"	m	class:CGetTextFromUserDialogBase
m_staticTextMessage2	uibase.h	/^		wxStaticText* m_staticTextMessage2;$/;"	m	class:CGetTextFromUserDialogBase
m_staticTextProxyIP	uibase.h	/^		wxStaticText* m_staticTextProxyIP;$/;"	m	class:COptionsDialogBase
m_staticTextProxyPort	uibase.h	/^		wxStaticText* m_staticTextProxyPort;$/;"	m	class:COptionsDialogBase
m_staticTextSending	uibase.h	/^		wxStaticText* m_staticTextSending;$/;"	m	class:CSendingDialogBase
m_staticTextVersion	uibase.h	/^		wxStaticText* m_staticTextVersion;$/;"	m	class:CAboutDialogBase
m_statusBar	uibase.h	/^		wxStatusBar* m_statusBar;$/;"	m	class:CMainFrameBase
m_stored	cryptopp/cryptlib.h	/^		const std::type_info &m_stored;$/;"	m	class:NameValuePairs::ValueTypeMismatch
m_sunCCworkaround	cryptopp/cryptlib.h	/^	char m_sunCCworkaround;$/;"	m	class:CryptoMaterial
m_textCtrl1	uibase.h	/^		wxTextCtrl* m_textCtrl1;$/;"	m	class:CGetTextFromUserDialogBase
m_textCtrl2	uibase.h	/^		wxTextCtrl* m_textCtrl2;$/;"	m	class:CGetTextFromUserDialogBase
m_textCtrlAddress	uibase.h	/^		wxTextCtrl* m_textCtrlAddress;$/;"	m	class:CMainFrameBase
m_textCtrlAddress	uibase.h	/^		wxTextCtrl* m_textCtrlAddress;$/;"	m	class:CSendDialogBase
m_textCtrlAmount	uibase.h	/^		wxTextCtrl* m_textCtrlAmount;$/;"	m	class:CSendDialogBase
m_textCtrlProxyIP	uibase.h	/^		wxTextCtrl* m_textCtrlProxyIP;$/;"	m	class:COptionsDialogBase
m_textCtrlProxyPort	uibase.h	/^		wxTextCtrl* m_textCtrlProxyPort;$/;"	m	class:COptionsDialogBase
m_textCtrlStatus	uibase.h	/^		wxTextCtrl* m_textCtrlStatus;$/;"	m	class:CSendingDialogBase
m_textCtrlTransactionFee	uibase.h	/^		wxTextCtrl* m_textCtrlTransactionFee;$/;"	m	class:COptionsDialogBase
m_toolBar	uibase.h	/^		wxToolBar* m_toolBar;$/;"	m	class:CMainFrameBase
m_what	cryptopp/cryptlib.h	/^	std::string m_what;$/;"	m	class:Exception
m_xorBlock	cryptopp/misc.h	/^	const byte *m_xorBlock;$/;"	m	class:PutBlock
main	init.cpp	/^int main(int argc, char* argv[])$/;"	f
main	irc.cpp	/^int main(int argc, char *argv[])$/;"	f
main	rpc.cpp	/^int main(int argc, char *argv[])$/;"	f
main	serialize.h	/^int main(int argc, char *argv[])$/;"	f
mapAddressBook	wallet.h	/^    std::map<CBitcoinAddress, std::string> mapAddressBook;$/;"	m	class:CWallet
mapAddresses	net.cpp	/^map<vector<unsigned char>, CAddress> mapAddresses;$/;"	v
mapAlerts	main.cpp	/^map<uint256, CAlert> mapAlerts;$/;"	v
mapAlreadyAskedFor	net.cpp	/^map<CInv, int64> mapAlreadyAskedFor;$/;"	v
mapAskFor	net.h	/^    std::multimap<int64, CInv> mapAskFor;$/;"	m	class:CNode
mapBlockIndex	main.cpp	/^map<uint256, CBlockIndex*> mapBlockIndex;$/;"	v
mapCryptedKeys	keystore.h	/^    CryptedKeyMap mapCryptedKeys;$/;"	m	class:CCryptoKeyStore
mapDb	db.cpp	/^static map<string, Db*> mapDb;$/;"	v	file:
mapFileUseCount	db.cpp	/^static map<string, int> mapFileUseCount;$/;"	v	file:
mapKeys	keystore.h	/^    KeyMap mapKeys;$/;"	m	class:CBasicKeyStore
mapMasterKeys	wallet.h	/^    MasterKeyMap mapMasterKeys;$/;"	m	class:CWallet
mapMultiArgs	util.cpp	/^map<string, vector<string> > mapMultiArgs;$/;"	v
mapNextTx	main.cpp	/^map<COutPoint, CInPoint> mapNextTx;$/;"	v
mapOrphanBlocks	main.cpp	/^map<uint256, CBlock*> mapOrphanBlocks;$/;"	v
mapOrphanBlocksByPrev	main.cpp	/^multimap<uint256, CBlock*> mapOrphanBlocksByPrev;$/;"	v
mapOrphanTransactions	main.cpp	/^map<uint256, CDataStream*> mapOrphanTransactions;$/;"	v
mapOrphanTransactionsByPrev	main.cpp	/^multimap<uint256, CDataStream*> mapOrphanTransactionsByPrev;$/;"	v
mapRelay	net.cpp	/^map<CInv, CDataStream> mapRelay;$/;"	v
mapRequestCount	wallet.h	/^    std::map<uint256, int> mapRequestCount;$/;"	m	class:CWallet
mapRequests	net.h	/^    std::map<uint256, CRequestTracker> mapRequests;$/;"	m	class:CNode
mapTransactions	main.cpp	/^static map<uint256, CTransaction> mapTransactions;$/;"	v	file:
mapValue	wallet.h	/^    std::map<std::string, std::string> mapValue;$/;"	m	class:CWalletTx
mapWallet	wallet.h	/^    std::map<uint256, CWalletTx> mapWallet;$/;"	m	class:CWallet
map_to_obj	json/json_spirit_utils.h	/^    void map_to_obj( const Map_t& mp_obj, Obj_t& obj )$/;"	f	namespace:json_spirit
max_size	cryptopp/secblock.h	/^	size_type max_size() const {return 0;}$/;"	f	class:NullAllocator
max_size	cryptopp/secblock.h	/^	size_type max_size() const {return STDMAX(m_fallbackAllocator.max_size(), S);}$/;"	f	class:FixedSizeAllocatorWithCleanup
max_size	cryptopp/secblock.h	/^	size_type max_size() const {return ~size_type(0)\/sizeof(T);}	\/\/ switch to std::numeric_limits<T>::max later$/;"	f	class:AllocatorBase
member_ptr	cryptopp/smartptr.h	/^	explicit member_ptr(T *p = NULL) : m_p(p) {}$/;"	f	class:member_ptr
member_ptr	cryptopp/smartptr.h	/^template <class T> class member_ptr$/;"	c
members_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
memcpy_s	cryptopp/misc.h	/^inline void memcpy_s(void *dest, size_t sizeInBytes, const void *src, size_t count)$/;"	f
memmove_s	cryptopp/misc.h	/^inline void memmove_s(void *dest, size_t sizeInBytes, const void *src, size_t count)$/;"	f
memset_z	cryptopp/misc.h	/^inline void * memset_z(void *ptr, int value, size_t num)$/;"	f
messageLength	cryptopp/cryptlib.h	/^	size_t messageLength;$/;"	m	struct:DecodingResult
mlock	serialize.h	39;"	d
mlock	serialize.h	49;"	d
movecmd	rpc.cpp	/^Value movecmd(const Array& params, bool fHelp)$/;"	f
munlock	serialize.h	40;"	d
munlock	serialize.h	52;"	d
mutex	util.h	/^    boost::interprocess::interprocess_recursive_mutex mutex;$/;"	m	class:CCriticalSection
mutexName	util.cpp	/^    std::string mutexName;$/;"	m	struct:CLockLocation	file:
my_snprintf	util.cpp	/^int my_snprintf(char* buffer, size_t limit, const char* format, ...)$/;"	f
myclosesocket	util.h	/^inline int myclosesocket(SOCKET& hSocket)$/;"	f
n	main.h	/^    unsigned int n;$/;"	m	class:CInPoint
n	main.h	/^    unsigned int n;$/;"	m	class:COutPoint
nAccountingEntryNumber	db.cpp	/^uint64 nAccountingEntryNumber = 0;$/;"	v
nAmount	rpc.cpp	/^    int64 nAmount;$/;"	m	struct:tallyitem	file:
nAvailableCreditCached	wallet.h	/^    mutable int64 nAvailableCreditCached;$/;"	m	class:CWalletTx
nBestHeight	main.cpp	/^int nBestHeight = -1;$/;"	v
nBits	main.h	/^    unsigned int nBits;$/;"	m	class:CBlock
nBits	main.h	/^    unsigned int nBits;$/;"	m	class:CBlockIndex
nBlockPos	main.h	/^    unsigned int nBlockPos;$/;"	m	class:CBlockIndex
nBlockPos	main.h	/^    unsigned int nBlockPos;$/;"	m	class:CDiskTxPos
nCancel	main.h	/^    int nCancel;$/;"	m	class:CUnsignedAlert
nChangeCached	wallet.h	/^    mutable int64 nChangeCached;$/;"	m	class:CWalletTx
nChecksum	protocol.h	/^        unsigned int nChecksum;$/;"	m	class:CMessageHeader
nConf	rpc.cpp	/^    int nConf;$/;"	m	struct:tallyitem	file:
nConnectTimeout	net.cpp	/^int nConnectTimeout = 5000;$/;"	v
nCreditCached	wallet.h	/^    mutable int64 nCreditCached;$/;"	m	class:CWalletTx
nCreditDebit	wallet.h	/^    int64 nCreditDebit;$/;"	m	class:CAccountingEntry
nCurrentBlockFile	main.cpp	/^static unsigned int nCurrentBlockFile = 1;$/;"	v	file:
nDebitCached	wallet.h	/^    mutable int64 nDebitCached;$/;"	m	class:CWalletTx
nDerivationMethod	crypter.h	/^    unsigned int nDerivationMethod;$/;"	m	class:CMasterKey
nDeriveIterations	crypter.h	/^    unsigned int nDeriveIterations;$/;"	m	class:CMasterKey
nExpiration	main.h	/^    int64 nExpiration;$/;"	m	class:CUnsignedAlert
nFile	main.h	/^    unsigned int nFile;$/;"	m	class:CBlockIndex
nFile	main.h	/^    unsigned int nFile;$/;"	m	class:CDiskTxPos
nGotIRCAddresses	irc.cpp	/^int nGotIRCAddresses = 0;$/;"	v
nHPSTimerStart	main.cpp	/^int64 nHPSTimerStart;$/;"	v
nHeaderStart	net.h	/^    unsigned int nHeaderStart;$/;"	m	class:CNode
nHeight	main.h	/^    int nHeight;$/;"	m	class:CBlockIndex
nID	main.h	/^    int nID;$/;"	m	class:CUnsignedAlert
nIndex	main.h	/^    int nIndex;$/;"	m	class:CMerkleTx
nIndex	wallet.h	/^    int64 nIndex;$/;"	m	class:CReserveKey
nInitialBlockThreshold	main.cpp	/^const int nInitialBlockThreshold = 120; \/\/ Regard blocks up until N-threshold as "initial download"$/;"	v
nLastRecv	net.h	/^    int64 nLastRecv;$/;"	m	class:CNode
nLastRepaint	ui.cpp	/^unsigned int nLastRepaint = 0;$/;"	v
nLastRepaintTime	ui.cpp	/^int64 nLastRepaintTime = 0;$/;"	v
nLastSend	net.h	/^    int64 nLastSend;$/;"	m	class:CNode
nLastSendEmpty	net.h	/^    int64 nLastSendEmpty;$/;"	m	class:CNode
nLastTry	protocol.h	/^        unsigned int nLastTry;$/;"	m	class:CAddress
nLimitProcessors	main.cpp	/^int nLimitProcessors = 1;$/;"	v
nLinesDisplayed	wallet.h	/^    mutable int nLinesDisplayed;$/;"	m	class:CWalletTx
nListViewUpdated	ui.h	/^    unsigned int nListViewUpdated;$/;"	m	class:CMainFrame
nLocalHostNonce	net.cpp	/^uint64 nLocalHostNonce = 0;$/;"	v
nLocalServices	net.cpp	/^uint64 nLocalServices = (fClient ? 0 : NODE_NETWORK);$/;"	v
nLockTime	main.h	/^    unsigned int nLockTime;$/;"	m	class:CTransaction
nMasterKeyMaxID	wallet.h	/^    unsigned int nMasterKeyMaxID;$/;"	m	class:CWallet
nMaxNumSize	script.cpp	/^static const size_t nMaxNumSize = 4;$/;"	v	file:
nMaxVer	main.h	/^    int nMaxVer;            \/\/ highest version inclusive$/;"	m	class:CUnsignedAlert
nMedianTimeSpan	main.h	/^    enum { nMedianTimeSpan=11 };$/;"	e	enum:CBlockIndex::__anon8
nMessageSize	protocol.h	/^        unsigned int nMessageSize;$/;"	m	class:CMessageHeader
nMessageStart	net.h	/^    unsigned int nMessageStart;$/;"	m	class:CNode
nMinVer	main.h	/^    int nMinVer;            \/\/ lowest version inclusive$/;"	m	class:CUnsignedAlert
nNeedRepaint	ui.cpp	/^unsigned int nNeedRepaint = 0;$/;"	v
nNonce	main.h	/^    unsigned int nNonce;$/;"	m	class:CBlock
nNonce	main.h	/^    unsigned int nNonce;$/;"	m	class:CBlockIndex
nPage	ui.h	/^    int nPage;$/;"	m	class:CAddressBookDialog
nPage	ui.h	/^    int nPage;$/;"	m	class:CMainFrame
nPrice	ui.h	/^    int64 nPrice;$/;"	m	class:CSendingDialog
nPriority	main.h	/^    int nPriority;$/;"	m	class:CUnsignedAlert
nReadPos	serialize.h	/^    unsigned int nReadPos;$/;"	m	class:CDataStream
nRefCount	net.h	/^    int nRefCount;$/;"	m	class:CNode
nRelayUntil	main.h	/^    int64 nRelayUntil;      \/\/ when newer nodes stop relaying to newer nodes$/;"	m	class:CUnsignedAlert
nReleaseTime	net.h	/^    int64 nReleaseTime;$/;"	m	class:CNode
nRepaintInterval	ui.cpp	/^int64 nRepaintInterval = 500;$/;"	v
nScaleX	ui.cpp	/^double nScaleX = 1.0;$/;"	v
nScaleX	ui.cpp	/^static const double nScaleX = 1.0;$/;"	v	file:
nScaleY	ui.cpp	/^double nScaleY = 1.0;$/;"	v
nScaleY	ui.cpp	/^static const double nScaleY = 1.0;$/;"	v	file:
nSequence	main.h	/^    unsigned int nSequence;$/;"	m	class:CTxIn
nServices	net.h	/^    uint64 nServices;$/;"	m	class:CNode
nServices	protocol.h	/^        uint64 nServices;$/;"	m	class:CAddress
nStartingHeight	net.h	/^    int nStartingHeight;$/;"	m	class:CNode
nTime	db.h	/^    int64 nTime;$/;"	m	class:CKeyPool
nTime	main.h	/^    unsigned int nTime;$/;"	m	class:CBlock
nTime	main.h	/^    unsigned int nTime;$/;"	m	class:CBlockIndex
nTime	protocol.h	/^        unsigned int nTime;$/;"	m	class:CAddress
nTime	wallet.h	/^    int64 nTime;$/;"	m	class:CAccountingEntry
nTimeBestReceived	main.cpp	/^int64 nTimeBestReceived = 0;$/;"	v
nTimeConnected	net.h	/^    int64 nTimeConnected;$/;"	m	class:CNode
nTimeCreated	wallet.h	/^    int64 nTimeCreated;$/;"	m	class:CWalletKey
nTimeDisplayed	wallet.h	/^    mutable unsigned int nTimeDisplayed;$/;"	m	class:CWalletTx
nTimeExpires	wallet.h	/^    int64 nTimeExpires;$/;"	m	class:CWalletKey
nTimeOffset	util.cpp	/^static int64 nTimeOffset = 0;$/;"	v	file:
nTimeReceived	wallet.h	/^    unsigned int nTimeReceived;  \/\/ time received by this node$/;"	m	class:CWalletTx
nTotalBlocksEstimate	main.cpp	/^const int nTotalBlocksEstimate = 140700; \/\/ Conservative estimate of total nr of blocks on main chain$/;"	v
nTransactionFee	main.cpp	/^int64 nTransactionFee = 0;$/;"	v
nTransactionsUpdated	main.cpp	/^unsigned int nTransactionsUpdated = 0;$/;"	v
nTxPos	main.h	/^    unsigned int nTxPos;$/;"	m	class:CDiskTxPos
nType	serialize.h	/^    int nType;$/;"	m	class:CAutoFile
nType	serialize.h	/^    int nType;$/;"	m	class:CDataStream
nType	serialize.h	/^    int nType;$/;"	m	struct:ser_streamplaceholder
nValue	main.h	/^    int64 nValue;$/;"	m	class:CTxOut
nVersion	base58.h	/^    unsigned char nVersion;$/;"	m	class:CBase58Data
nVersion	main.h	/^        nVersion = this->nVersion;$/;"	m	class:CBlock
nVersion	main.h	/^        nVersion = this->nVersion;$/;"	m	class:CTransaction
nVersion	main.h	/^        nVersion = this->nVersion;$/;"	m	class:CUnsignedAlert
nVersion	main.h	/^    int nVersion;$/;"	m	class:CBlock
nVersion	main.h	/^    int nVersion;$/;"	m	class:CBlockIndex
nVersion	main.h	/^    int nVersion;$/;"	m	class:CTransaction
nVersion	main.h	/^    int nVersion;$/;"	m	class:CUnsignedAlert
nVersion	net.h	/^    int nVersion;$/;"	m	class:CNode
nVersion	serialize.h	/^    int nVersion;$/;"	m	class:CAutoFile
nVersion	serialize.h	/^    int nVersion;$/;"	m	class:CDataStream
nVersion	serialize.h	/^    int nVersion;$/;"	m	struct:ser_streamplaceholder
nWalletDBUpdated	db.cpp	/^unsigned int nWalletDBUpdated;$/;"	v
nWalletUnlockTime	rpc.cpp	/^static int64 nWalletUnlockTime;$/;"	v	file:
name_	json/json_spirit_reader_template.h	/^        String_type name_;              \/\/ of current name\/value pair$/;"	m	class:json_spirit::Semantic_actions
name_	json/json_spirit_value.h	/^        String_type name_;$/;"	m	struct:json_spirit::Pair_impl
new_false	json/json_spirit_reader_template.h	/^        void new_false( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Semantic_actions
new_int	json/json_spirit_reader_template.h	/^        void new_int( boost::int64_t i )$/;"	f	class:json_spirit::Semantic_actions
new_line	json/json_spirit_writer_template.h	/^        void new_line()$/;"	f	class:json_spirit::Generator
new_name	json/json_spirit_reader_template.h	/^        void new_name( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Semantic_actions
new_null	json/json_spirit_reader_template.h	/^        void new_null( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Semantic_actions
new_real	json/json_spirit_reader_template.h	/^        void new_real( double d )$/;"	f	class:json_spirit::Semantic_actions
new_str	json/json_spirit_reader_template.h	/^        void new_str( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Semantic_actions
new_true	json/json_spirit_reader_template.h	/^        void new_true( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Semantic_actions
new_uint64	json/json_spirit_reader_template.h	/^        void new_uint64( boost::uint64_t ui )$/;"	f	class:json_spirit::Semantic_actions
non_printable_to_string	json/json_spirit_writer_template.h	/^    String_type non_printable_to_string( unsigned int c )$/;"	f	namespace:json_spirit
null	json/json_spirit_value.h	/^        static const Value_impl null;$/;"	m	class:json_spirit::Value_impl
null	json/json_spirit_value.h	/^    const Value_impl< Config > Value_impl< Config >::null;$/;"	m	class:json_spirit::Value_impl
null_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	e	enum:json_spirit::Value_type
number_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
obj_to_map	json/json_spirit_utils.h	/^    void obj_to_map( const Obj_t& obj, Map_t& mp_obj )$/;"	f	namespace:json_spirit
obj_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	e	enum:json_spirit::Value_type
object_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
opcodetype	script.h	/^enum opcodetype$/;"	g
operator !	bignum.h	/^    bool operator!() const$/;"	f	class:CBigNum
operator !	bignum.h	/^    bool operator!() { return (pctx == NULL); }$/;"	f	class:CAutoBN_CTX
operator !	serialize.h	/^    bool operator!()            { return (file == NULL); }$/;"	f	class:CAutoFile
operator !	uint256.h	/^    bool operator!() const$/;"	f	class:base_uint
operator !=	bignum.h	/^inline bool operator!=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) != 0); }$/;"	f
operator !=	cryptopp/cryptlib.h	/^	bool operator!=(const DecodingResult &rhs) const {return !operator==(rhs);}$/;"	f	struct:DecodingResult
operator !=	cryptopp/secblock.h	/^	bool operator!=(const SecBlock<T, A> &t) const$/;"	f	class:SecBlock
operator !=	cryptopp/secblock.h	/^inline bool operator!=(const CryptoPP::AllocatorWithCleanup<T, A>&, const CryptoPP::AllocatorWithCleanup<U, B>&) {return (false);}$/;"	f
operator !=	main.h	/^    friend bool operator!=(const CDiskTxPos& a, const CDiskTxPos& b)$/;"	f	class:CDiskTxPos
operator !=	main.h	/^    friend bool operator!=(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator !=	main.h	/^    friend bool operator!=(const CTransaction& a, const CTransaction& b)$/;"	f	class:CTransaction
operator !=	main.h	/^    friend bool operator!=(const CTxIn& a, const CTxIn& b)$/;"	f	class:CTxIn
operator !=	main.h	/^    friend bool operator!=(const CTxIndex& a, const CTxIndex& b)$/;"	f	class:CTxIndex
operator !=	main.h	/^    friend bool operator!=(const CTxOut& a, const CTxOut& b)$/;"	f	class:CTxOut
operator !=	protocol.cpp	/^bool operator!=(const CAddress& a, const CAddress& b)$/;"	f
operator !=	uint256.h	/^    friend inline bool operator!=(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator !=	uint256.h	/^    friend inline bool operator!=(const base_uint& a, uint64 b)$/;"	f	class:base_uint
operator !=	uint256.h	/^inline bool operator!=(const base_uint160& a, const uint160& b)         { return (base_uint160)a != (base_uint160)b; }$/;"	f
operator !=	uint256.h	/^inline bool operator!=(const base_uint256& a, const uint256& b)         { return (base_uint256)a != (base_uint256)b; }$/;"	f
operator !=	uint256.h	/^inline bool operator!=(const uint160& a, const base_uint160& b)         { return (base_uint160)a != (base_uint160)b; }$/;"	f
operator !=	uint256.h	/^inline bool operator!=(const uint160& a, const uint160& b)              { return (base_uint160)a != (base_uint160)b; }$/;"	f
operator !=	uint256.h	/^inline bool operator!=(const uint160& a, uint64 b)                           { return (base_uint160)a != b; }$/;"	f
operator !=	uint256.h	/^inline bool operator!=(const uint256& a, const base_uint256& b)         { return (base_uint256)a != (base_uint256)b; }$/;"	f
operator !=	uint256.h	/^inline bool operator!=(const uint256& a, const uint256& b)              { return (base_uint256)a != (base_uint256)b; }$/;"	f
operator !=	uint256.h	/^inline bool operator!=(const uint256& a, uint64 b)                           { return (base_uint256)a != b; }$/;"	f
operator %	bignum.h	/^inline const CBigNum operator%(const CBigNum& a, const CBigNum& b)$/;"	f
operator %=	bignum.h	/^    CBigNum& operator%=(const CBigNum& b)$/;"	f	class:CBigNum
operator &	bignum.h	/^    BN_CTX** operator&() { return &pctx; }$/;"	f	class:CAutoBN_CTX
operator &	serialize.h	/^    FILE** operator&()          { return &file; }$/;"	f	class:CAutoFile
operator &	uint256.h	/^inline const uint160 operator&(const base_uint160& a, const base_uint160& b) { return uint160(a) &= b; }$/;"	f
operator &	uint256.h	/^inline const uint160 operator&(const base_uint160& a, const uint160& b) { return (base_uint160)a &  (base_uint160)b; }$/;"	f
operator &	uint256.h	/^inline const uint160 operator&(const uint160& a, const base_uint160& b) { return (base_uint160)a &  (base_uint160)b; }$/;"	f
operator &	uint256.h	/^inline const uint160 operator&(const uint160& a, const uint160& b)      { return (base_uint160)a &  (base_uint160)b; }$/;"	f
operator &	uint256.h	/^inline const uint256 operator&(const base_uint256& a, const base_uint256& b) { return uint256(a) &= b; }$/;"	f
operator &	uint256.h	/^inline const uint256 operator&(const base_uint256& a, const uint256& b) { return (base_uint256)a &  (base_uint256)b; }$/;"	f
operator &	uint256.h	/^inline const uint256 operator&(const uint256& a, const base_uint256& b) { return (base_uint256)a &  (base_uint256)b; }$/;"	f
operator &	uint256.h	/^inline const uint256 operator&(const uint256& a, const uint256& b)      { return (base_uint256)a &  (base_uint256)b; }$/;"	f
operator &=	uint256.h	/^    base_uint& operator&=(const base_uint& b)$/;"	f	class:base_uint
operator &=	uint256.h	/^    base_uint& operator&=(uint64 b)$/;"	f	class:base_uint
operator ()	cryptopp/misc.h	/^	T* operator()() const {return new T;}$/;"	f	struct:NewObject
operator ()	cryptopp/misc.h	/^	inline GetBlock<T, B, A> & operator()(U &x)$/;"	f	class:GetBlock
operator ()	cryptopp/misc.h	/^	inline PutBlock<T, B, A> & operator()(U x)$/;"	f	class:PutBlock
operator *	bignum.h	/^    BN_CTX& operator*() { return *pctx; }$/;"	f	class:CAutoBN_CTX
operator *	bignum.h	/^inline const CBigNum operator*(const CBigNum& a, const CBigNum& b)$/;"	f
operator *	cryptopp/smartptr.h	/^	T& operator*() { return *m_p; }$/;"	f	class:counted_ptr
operator *	cryptopp/smartptr.h	/^	T& operator*() { return *m_p; }$/;"	f	class:member_ptr
operator *	cryptopp/smartptr.h	/^	const T& operator*() const { return *m_p; }$/;"	f	class:counted_ptr
operator *	cryptopp/smartptr.h	/^	const T& operator*() const { return *m_p; }$/;"	f	class:member_ptr
operator *	serialize.h	/^    FILE& operator*()           { return *file; }$/;"	f	class:CAutoFile
operator *=	bignum.h	/^    CBigNum& operator*=(const CBigNum& b)$/;"	f	class:CBigNum
operator +	bignum.h	/^inline const CBigNum operator+(const CBigNum& a, const CBigNum& b)$/;"	f
operator +	cryptopp/secblock.h	/^	SecBlock<T, A> operator+(const SecBlock<T, A> &t)$/;"	f	class:SecBlock
operator +	script.h	/^    friend CScript operator+(const CScript& a, const CScript& b)$/;"	f	class:CScript
operator +	serialize.h	/^    friend CDataStream operator+(const CDataStream& a, const CDataStream& b)$/;"	f	class:CDataStream
operator +	uint256.h	/^inline const uint160 operator+(const base_uint160& a, const base_uint160& b) { return uint160(a) += b; }$/;"	f
operator +	uint256.h	/^inline const uint160 operator+(const base_uint160& a, const uint160& b) { return (base_uint160)a +  (base_uint160)b; }$/;"	f
operator +	uint256.h	/^inline const uint160 operator+(const uint160& a, const base_uint160& b) { return (base_uint160)a +  (base_uint160)b; }$/;"	f
operator +	uint256.h	/^inline const uint160 operator+(const uint160& a, const uint160& b)      { return (base_uint160)a +  (base_uint160)b; }$/;"	f
operator +	uint256.h	/^inline const uint256 operator+(const base_uint256& a, const base_uint256& b) { return uint256(a) += b; }$/;"	f
operator +	uint256.h	/^inline const uint256 operator+(const base_uint256& a, const uint256& b) { return (base_uint256)a +  (base_uint256)b; }$/;"	f
operator +	uint256.h	/^inline const uint256 operator+(const uint256& a, const base_uint256& b) { return (base_uint256)a +  (base_uint256)b; }$/;"	f
operator +	uint256.h	/^inline const uint256 operator+(const uint256& a, const uint256& b)      { return (base_uint256)a +  (base_uint256)b; }$/;"	f
operator ++	bignum.h	/^    CBigNum& operator++()$/;"	f	class:CBigNum
operator ++	bignum.h	/^    const CBigNum operator++(int)$/;"	f	class:CBigNum
operator ++	uint256.h	/^    base_uint& operator++()$/;"	f	class:base_uint
operator ++	uint256.h	/^    const base_uint operator++(int)$/;"	f	class:base_uint
operator +=	bignum.h	/^    CBigNum& operator+=(const CBigNum& b)$/;"	f	class:CBigNum
operator +=	cryptopp/secblock.h	/^	SecBlock<T, A>& operator+=(const SecBlock<T, A> &t)$/;"	f	class:SecBlock
operator +=	script.h	/^    CScript& operator+=(const CScript& b)$/;"	f	class:CScript
operator +=	serialize.h	/^    CDataStream& operator+=(const CDataStream& b)$/;"	f	class:CDataStream
operator +=	uint256.h	/^    base_uint& operator+=(const base_uint& b)$/;"	f	class:base_uint
operator +=	uint256.h	/^    base_uint& operator+=(uint64 b64)$/;"	f	class:base_uint
operator -	bignum.h	/^inline const CBigNum operator-(const CBigNum& a)$/;"	f
operator -	bignum.h	/^inline const CBigNum operator-(const CBigNum& a, const CBigNum& b)$/;"	f
operator -	uint256.h	/^    const base_uint operator-() const$/;"	f	class:base_uint
operator -	uint256.h	/^inline const uint160 operator-(const base_uint160& a, const base_uint160& b) { return uint160(a) -= b; }$/;"	f
operator -	uint256.h	/^inline const uint160 operator-(const base_uint160& a, const uint160& b) { return (base_uint160)a -  (base_uint160)b; }$/;"	f
operator -	uint256.h	/^inline const uint160 operator-(const uint160& a, const base_uint160& b) { return (base_uint160)a -  (base_uint160)b; }$/;"	f
operator -	uint256.h	/^inline const uint160 operator-(const uint160& a, const uint160& b)      { return (base_uint160)a -  (base_uint160)b; }$/;"	f
operator -	uint256.h	/^inline const uint256 operator-(const base_uint256& a, const base_uint256& b) { return uint256(a) -= b; }$/;"	f
operator -	uint256.h	/^inline const uint256 operator-(const base_uint256& a, const uint256& b) { return (base_uint256)a -  (base_uint256)b; }$/;"	f
operator -	uint256.h	/^inline const uint256 operator-(const uint256& a, const base_uint256& b) { return (base_uint256)a -  (base_uint256)b; }$/;"	f
operator -	uint256.h	/^inline const uint256 operator-(const uint256& a, const uint256& b)      { return (base_uint256)a -  (base_uint256)b; }$/;"	f
operator --	bignum.h	/^    CBigNum& operator--()$/;"	f	class:CBigNum
operator --	bignum.h	/^    const CBigNum operator--(int)$/;"	f	class:CBigNum
operator --	uint256.h	/^    base_uint& operator--()$/;"	f	class:base_uint
operator --	uint256.h	/^    const base_uint operator--(int)$/;"	f	class:base_uint
operator -=	bignum.h	/^    CBigNum& operator-=(const CBigNum& b)$/;"	f	class:CBigNum
operator -=	uint256.h	/^    base_uint& operator-=(const base_uint& b)$/;"	f	class:base_uint
operator -=	uint256.h	/^    base_uint& operator-=(uint64 b64)$/;"	f	class:base_uint
operator ->	cryptopp/smartptr.h	/^	T* operator->() { return get(); }$/;"	f	class:counted_ptr
operator ->	cryptopp/smartptr.h	/^	T* operator->() { return m_p; }$/;"	f	class:member_ptr
operator ->	cryptopp/smartptr.h	/^	const T* operator->() const { return m_p; }$/;"	f	class:counted_ptr
operator ->	cryptopp/smartptr.h	/^	const T* operator->() const { return m_p; }$/;"	f	class:member_ptr
operator ->	serialize.h	/^    FILE* operator->()          { return file; }$/;"	f	class:CAutoFile
operator /	bignum.h	/^inline const CBigNum operator\/(const CBigNum& a, const CBigNum& b)$/;"	f
operator /=	bignum.h	/^    CBigNum& operator\/=(const CBigNum& b)$/;"	f	class:CBigNum
operator <	base58.h	/^    bool operator< (const CBase58Data& b58) const { return CompareTo(b58) <  0; }$/;"	f	class:CBase58Data
operator <	bignum.h	/^inline bool operator<(const CBigNum& a, const CBigNum& b)  { return (BN_cmp(&a, &b) < 0); }$/;"	f
operator <	main.h	/^    friend bool operator<(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator <	protocol.cpp	/^bool operator<(const CAddress& a, const CAddress& b)$/;"	f
operator <	protocol.cpp	/^bool operator<(const CInv& a, const CInv& b)$/;"	f
operator <	uint256.h	/^    friend inline bool operator<(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator <	uint256.h	/^inline bool operator<(const base_uint160& a, const uint160& b)          { return (base_uint160)a <  (base_uint160)b; }$/;"	f
operator <	uint256.h	/^inline bool operator<(const base_uint256& a, const uint256& b)          { return (base_uint256)a <  (base_uint256)b; }$/;"	f
operator <	uint256.h	/^inline bool operator<(const uint160& a, const base_uint160& b)          { return (base_uint160)a <  (base_uint160)b; }$/;"	f
operator <	uint256.h	/^inline bool operator<(const uint160& a, const uint160& b)               { return (base_uint160)a <  (base_uint160)b; }$/;"	f
operator <	uint256.h	/^inline bool operator<(const uint256& a, const base_uint256& b)          { return (base_uint256)a <  (base_uint256)b; }$/;"	f
operator <	uint256.h	/^inline bool operator<(const uint256& a, const uint256& b)               { return (base_uint256)a <  (base_uint256)b; }$/;"	f
operator <<	bignum.h	/^inline const CBigNum operator<<(const CBigNum& a, unsigned int shift)$/;"	f
operator <<	script.h	/^    CScript& operator<<(char b)           { return push_int64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(const CBigNum& b)$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(const CScript& b)$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(const std::vector<unsigned char>& b)$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(const uint160& b)$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(const uint256& b)$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(int b)            { return push_int64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(int64 b)          { return push_int64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(long b)           { return push_int64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(opcodetype opcode)$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(short b)          { return push_int64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(uint64 b)         { return push_uint64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(unsigned char b)  { return push_uint64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(unsigned int b)   { return push_uint64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(unsigned long b)  { return push_uint64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(unsigned short b) { return push_uint64(b); }$/;"	f	class:CScript
operator <<	serialize.h	/^    CAutoFile& operator<<(const T& obj)$/;"	f	class:CAutoFile
operator <<	serialize.h	/^    CDataStream& operator<<(const T& obj)$/;"	f	class:CDataStream
operator <<	uint256.h	/^inline const uint160 operator<<(const base_uint160& a, unsigned int shift)   { return uint160(a) <<= shift; }$/;"	f
operator <<	uint256.h	/^inline const uint160 operator<<(const uint160& a, unsigned int shift)        { return uint160(a) <<= shift; }$/;"	f
operator <<	uint256.h	/^inline const uint256 operator<<(const base_uint256& a, unsigned int shift)   { return uint256(a) <<= shift; }$/;"	f
operator <<	uint256.h	/^inline const uint256 operator<<(const uint256& a, unsigned int shift)        { return uint256(a) <<= shift; }$/;"	f
operator <<=	bignum.h	/^    CBigNum& operator<<=(unsigned int shift)$/;"	f	class:CBigNum
operator <<=	uint256.h	/^    base_uint& operator<<=(unsigned int shift)$/;"	f	class:base_uint
operator <=	base58.h	/^    bool operator<=(const CBase58Data& b58) const { return CompareTo(b58) <= 0; }$/;"	f	class:CBase58Data
operator <=	bignum.h	/^inline bool operator<=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) <= 0); }$/;"	f
operator <=	uint256.h	/^    friend inline bool operator<=(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator <=	uint256.h	/^inline bool operator<=(const base_uint160& a, const uint160& b)         { return (base_uint160)a <= (base_uint160)b; }$/;"	f
operator <=	uint256.h	/^inline bool operator<=(const base_uint256& a, const uint256& b)         { return (base_uint256)a <= (base_uint256)b; }$/;"	f
operator <=	uint256.h	/^inline bool operator<=(const uint160& a, const base_uint160& b)         { return (base_uint160)a <= (base_uint160)b; }$/;"	f
operator <=	uint256.h	/^inline bool operator<=(const uint160& a, const uint160& b)              { return (base_uint160)a <= (base_uint160)b; }$/;"	f
operator <=	uint256.h	/^inline bool operator<=(const uint256& a, const base_uint256& b)         { return (base_uint256)a <= (base_uint256)b; }$/;"	f
operator <=	uint256.h	/^inline bool operator<=(const uint256& a, const uint256& b)              { return (base_uint256)a <= (base_uint256)b; }$/;"	f
operator =	bignum.h	/^    BN_CTX* operator=(BN_CTX* pnew) { return pctx = pnew; }$/;"	f	class:CAutoBN_CTX
operator =	bignum.h	/^    CBigNum& operator=(const CBigNum& b)$/;"	f	class:CBigNum
operator =	cryptopp/secblock.h	/^	SecBlock<T, A>& operator=(const SecBlock<T, A> &t)$/;"	f	class:SecBlock
operator =	cryptopp/smartptr.h	/^template <class T> clonable_ptr<T>& clonable_ptr<T>::operator=(const clonable_ptr<T>& rhs)$/;"	f	class:clonable_ptr
operator =	cryptopp/smartptr.h	/^template <class T> counted_ptr<T> & counted_ptr<T>::operator=(const counted_ptr<T>& rhs)$/;"	f	class:counted_ptr
operator =	cryptopp/smartptr.h	/^template <class T> value_ptr<T>& value_ptr<T>::operator=(const value_ptr<T>& rhs)$/;"	f	class:value_ptr
operator =	json/json_spirit_value.h	/^    Value_impl< Config >& Value_impl< Config >::operator=( const Value_impl& lhs )$/;"	f	class:json_spirit::Value_impl
operator =	key.h	/^    CKey& operator=(const CKey& b)$/;"	f	class:CKey
operator =	serialize.h	/^    FILE* operator=(FILE* pnew) { return file = pnew; }$/;"	f	class:CAutoFile
operator =	uint256.h	/^    base_uint& operator=(uint64 b)$/;"	f	class:base_uint
operator =	uint256.h	/^    uint160& operator=(const basetype& b)$/;"	f	class:uint160
operator =	uint256.h	/^    uint160& operator=(uint64 b)$/;"	f	class:uint160
operator =	uint256.h	/^    uint256& operator=(const basetype& b)$/;"	f	class:uint256
operator =	uint256.h	/^    uint256& operator=(uint64 b)$/;"	f	class:uint256
operator ==	base58.h	/^    bool operator==(const CBase58Data& b58) const { return CompareTo(b58) == 0; }$/;"	f	class:CBase58Data
operator ==	bignum.h	/^inline bool operator==(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) == 0); }$/;"	f
operator ==	cryptopp/cryptlib.h	/^	bool operator==(const DecodingResult &rhs) const {return isValidCoding == rhs.isValidCoding && messageLength == rhs.messageLength;}$/;"	f	struct:DecodingResult
operator ==	cryptopp/secblock.h	/^	bool operator==(const SecBlock<T, A> &t) const$/;"	f	class:SecBlock
operator ==	cryptopp/secblock.h	/^inline bool operator==(const CryptoPP::AllocatorWithCleanup<T, A>&, const CryptoPP::AllocatorWithCleanup<U, B>&) {return (true);}$/;"	f
operator ==	cryptopp/smartptr.h	/^	bool operator==(const value_ptr<T>& rhs)$/;"	f	class:value_ptr
operator ==	json/json_spirit_error_position.h	/^    inline bool Error_position::operator==( const Error_position& lhs ) const$/;"	f	class:json_spirit::Error_position
operator ==	json/json_spirit_value.h	/^    bool Pair_impl< Config >::operator==( const Pair_impl< Config >& lhs ) const$/;"	f	class:json_spirit::Pair_impl
operator ==	json/json_spirit_value.h	/^    bool Value_impl< Config >::operator==( const Value_impl& lhs ) const$/;"	f	class:json_spirit::Value_impl
operator ==	main.h	/^    friend bool operator==(const CDiskTxPos& a, const CDiskTxPos& b)$/;"	f	class:CDiskTxPos
operator ==	main.h	/^    friend bool operator==(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator ==	main.h	/^    friend bool operator==(const CTransaction& a, const CTransaction& b)$/;"	f	class:CTransaction
operator ==	main.h	/^    friend bool operator==(const CTxIn& a, const CTxIn& b)$/;"	f	class:CTxIn
operator ==	main.h	/^    friend bool operator==(const CTxIndex& a, const CTxIndex& b)$/;"	f	class:CTxIndex
operator ==	main.h	/^    friend bool operator==(const CTxOut& a, const CTxOut& b)$/;"	f	class:CTxOut
operator ==	protocol.cpp	/^bool operator==(const CAddress& a, const CAddress& b)$/;"	f
operator ==	uint256.h	/^    friend inline bool operator==(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator ==	uint256.h	/^    friend inline bool operator==(const base_uint& a, uint64 b)$/;"	f	class:base_uint
operator ==	uint256.h	/^inline bool operator==(const base_uint160& a, const uint160& b)         { return (base_uint160)a == (base_uint160)b; }$/;"	f
operator ==	uint256.h	/^inline bool operator==(const base_uint256& a, const uint256& b)         { return (base_uint256)a == (base_uint256)b; }$/;"	f
operator ==	uint256.h	/^inline bool operator==(const uint160& a, const base_uint160& b)         { return (base_uint160)a == (base_uint160)b; }$/;"	f
operator ==	uint256.h	/^inline bool operator==(const uint160& a, const uint160& b)              { return (base_uint160)a == (base_uint160)b; }$/;"	f
operator ==	uint256.h	/^inline bool operator==(const uint160& a, uint64 b)                           { return (base_uint160)a == b; }$/;"	f
operator ==	uint256.h	/^inline bool operator==(const uint256& a, const base_uint256& b)         { return (base_uint256)a == (base_uint256)b; }$/;"	f
operator ==	uint256.h	/^inline bool operator==(const uint256& a, const uint256& b)              { return (base_uint256)a == (base_uint256)b; }$/;"	f
operator ==	uint256.h	/^inline bool operator==(const uint256& a, uint64 b)                           { return (base_uint256)a == b; }$/;"	f
operator >	base58.h	/^    bool operator> (const CBase58Data& b58) const { return CompareTo(b58) >  0; }$/;"	f	class:CBase58Data
operator >	bignum.h	/^inline bool operator>(const CBigNum& a, const CBigNum& b)  { return (BN_cmp(&a, &b) > 0); }$/;"	f
operator >	uint256.h	/^    friend inline bool operator>(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator >	uint256.h	/^inline bool operator>(const base_uint160& a, const uint160& b)          { return (base_uint160)a >  (base_uint160)b; }$/;"	f
operator >	uint256.h	/^inline bool operator>(const base_uint256& a, const uint256& b)          { return (base_uint256)a >  (base_uint256)b; }$/;"	f
operator >	uint256.h	/^inline bool operator>(const uint160& a, const base_uint160& b)          { return (base_uint160)a >  (base_uint160)b; }$/;"	f
operator >	uint256.h	/^inline bool operator>(const uint160& a, const uint160& b)               { return (base_uint160)a >  (base_uint160)b; }$/;"	f
operator >	uint256.h	/^inline bool operator>(const uint256& a, const base_uint256& b)          { return (base_uint256)a >  (base_uint256)b; }$/;"	f
operator >	uint256.h	/^inline bool operator>(const uint256& a, const uint256& b)               { return (base_uint256)a >  (base_uint256)b; }$/;"	f
operator >=	base58.h	/^    bool operator>=(const CBase58Data& b58) const { return CompareTo(b58) >= 0; }$/;"	f	class:CBase58Data
operator >=	bignum.h	/^inline bool operator>=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) >= 0); }$/;"	f
operator >=	uint256.h	/^    friend inline bool operator>=(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator >=	uint256.h	/^inline bool operator>=(const base_uint160& a, const uint160& b)         { return (base_uint160)a >= (base_uint160)b; }$/;"	f
operator >=	uint256.h	/^inline bool operator>=(const base_uint256& a, const uint256& b)         { return (base_uint256)a >= (base_uint256)b; }$/;"	f
operator >=	uint256.h	/^inline bool operator>=(const uint160& a, const base_uint160& b)         { return (base_uint160)a >= (base_uint160)b; }$/;"	f
operator >=	uint256.h	/^inline bool operator>=(const uint160& a, const uint160& b)              { return (base_uint160)a >= (base_uint160)b; }$/;"	f
operator >=	uint256.h	/^inline bool operator>=(const uint256& a, const base_uint256& b)         { return (base_uint256)a >= (base_uint256)b; }$/;"	f
operator >=	uint256.h	/^inline bool operator>=(const uint256& a, const uint256& b)              { return (base_uint256)a >= (base_uint256)b; }$/;"	f
operator >>	bignum.h	/^inline const CBigNum operator>>(const CBigNum& a, unsigned int shift)$/;"	f
operator >>	serialize.h	/^    CAutoFile& operator>>(T& obj)$/;"	f	class:CAutoFile
operator >>	serialize.h	/^    CDataStream& operator>>(T& obj)$/;"	f	class:CDataStream
operator >>	uint256.h	/^inline const uint160 operator>>(const base_uint160& a, unsigned int shift)   { return uint160(a) >>= shift; }$/;"	f
operator >>	uint256.h	/^inline const uint160 operator>>(const uint160& a, unsigned int shift)        { return uint160(a) >>= shift; }$/;"	f
operator >>	uint256.h	/^inline const uint256 operator>>(const base_uint256& a, unsigned int shift)   { return uint256(a) >>= shift; }$/;"	f
operator >>	uint256.h	/^inline const uint256 operator>>(const uint256& a, unsigned int shift)        { return uint256(a) >>= shift; }$/;"	f
operator >>=	bignum.h	/^    CBigNum& operator>>=(unsigned int shift)$/;"	f	class:CBigNum
operator >>=	uint256.h	/^    base_uint& operator>>=(unsigned int shift)$/;"	f	class:base_uint
operator BN_CTX*	bignum.h	/^    operator BN_CTX*() { return pctx; }$/;"	f	class:CAutoBN_CTX
operator FILE*	serialize.h	/^    operator FILE*()            { return file; }$/;"	f	class:CAutoFile
operator T *	cryptopp/secblock.h	/^	operator T *() const$/;"	f	class:SecBlock
operator T *	cryptopp/secblock.h	/^	operator T *()$/;"	f	class:SecBlock
operator []	cryptopp/smartptr.h	/^	const member_ptr<T>& operator[](size_t index) const$/;"	f	class:vector_member_ptrs
operator []	cryptopp/smartptr.h	/^	member_ptr<T>& operator[](size_t index)$/;"	f	class:vector_member_ptrs
operator []	serialize.h	/^    const_reference operator[](size_type pos) const  { return vch[pos + nReadPos]; }$/;"	f	class:CDataStream
operator []	serialize.h	/^    reference operator[](size_type pos)              { return vch[pos + nReadPos]; }$/;"	f	class:CDataStream
operator ^	uint256.h	/^inline const uint160 operator^(const base_uint160& a, const base_uint160& b) { return uint160(a) ^= b; }$/;"	f
operator ^	uint256.h	/^inline const uint160 operator^(const base_uint160& a, const uint160& b) { return (base_uint160)a ^  (base_uint160)b; }$/;"	f
operator ^	uint256.h	/^inline const uint160 operator^(const uint160& a, const base_uint160& b) { return (base_uint160)a ^  (base_uint160)b; }$/;"	f
operator ^	uint256.h	/^inline const uint160 operator^(const uint160& a, const uint160& b)      { return (base_uint160)a ^  (base_uint160)b; }$/;"	f
operator ^	uint256.h	/^inline const uint256 operator^(const base_uint256& a, const base_uint256& b) { return uint256(a) ^= b; }$/;"	f
operator ^	uint256.h	/^inline const uint256 operator^(const base_uint256& a, const uint256& b) { return (base_uint256)a ^  (base_uint256)b; }$/;"	f
operator ^	uint256.h	/^inline const uint256 operator^(const uint256& a, const base_uint256& b) { return (base_uint256)a ^  (base_uint256)b; }$/;"	f
operator ^	uint256.h	/^inline const uint256 operator^(const uint256& a, const uint256& b)      { return (base_uint256)a ^  (base_uint256)b; }$/;"	f
operator ^=	uint256.h	/^    base_uint& operator^=(const base_uint& b)$/;"	f	class:base_uint
operator ^=	uint256.h	/^    base_uint& operator^=(uint64 b)$/;"	f	class:base_uint
operator const T *	cryptopp/secblock.h	/^	operator const T *() const$/;"	f	class:SecBlock
operator const void *	cryptopp/secblock.h	/^	operator const void *() const$/;"	f	class:SecBlock
operator size_t	cryptopp/cryptlib.h	/^	operator size_t() const {return isValidCoding ? messageLength : 0;}$/;"	f	struct:DecodingResult
operator void *	cryptopp/secblock.h	/^	operator void *()$/;"	f	class:SecBlock
operator |	uint256.h	/^inline const uint160 operator|(const base_uint160& a, const base_uint160& b) { return uint160(a) |= b; }$/;"	f
operator |	uint256.h	/^inline const uint160 operator|(const base_uint160& a, const uint160& b) { return (base_uint160)a |  (base_uint160)b; }$/;"	f
operator |	uint256.h	/^inline const uint160 operator|(const uint160& a, const base_uint160& b) { return (base_uint160)a |  (base_uint160)b; }$/;"	f
operator |	uint256.h	/^inline const uint160 operator|(const uint160& a, const uint160& b)      { return (base_uint160)a |  (base_uint160)b; }$/;"	f
operator |	uint256.h	/^inline const uint256 operator|(const base_uint256& a, const base_uint256& b) { return uint256(a) |= b; }$/;"	f
operator |	uint256.h	/^inline const uint256 operator|(const base_uint256& a, const uint256& b) { return (base_uint256)a |  (base_uint256)b; }$/;"	f
operator |	uint256.h	/^inline const uint256 operator|(const uint256& a, const base_uint256& b) { return (base_uint256)a |  (base_uint256)b; }$/;"	f
operator |	uint256.h	/^inline const uint256 operator|(const uint256& a, const uint256& b)      { return (base_uint256)a |  (base_uint256)b; }$/;"	f
operator |=	uint256.h	/^    base_uint& operator|=(const base_uint& b)$/;"	f	class:base_uint
operator |=	uint256.h	/^    base_uint& operator|=(uint64 b)$/;"	f	class:base_uint
operator ~	uint256.h	/^    const base_uint operator~() const$/;"	f	class:base_uint
os_	json/json_spirit_writer_template.h	/^        Ostream_type& os_;$/;"	m	class:json_spirit::Generator
other	cryptopp/secblock.h	/^    template <class U> struct rebind { typedef AllocatorWithCleanup<U, T_Align16> other; };$/;"	t	struct:AllocatorWithCleanup::rebind
other	serialize.h	/^    { typedef secure_allocator<_Other> other; };$/;"	t	struct:secure_allocator::rebind
output	json/json_spirit_writer_template.h	/^        void output( bool b )$/;"	f	class:json_spirit::Generator
output	json/json_spirit_writer_template.h	/^        void output( const Array_type& arr )$/;"	f	class:json_spirit::Generator
output	json/json_spirit_writer_template.h	/^        void output( const Obj_member_type& member )$/;"	f	class:json_spirit::Generator
output	json/json_spirit_writer_template.h	/^        void output( const Object_type& obj )$/;"	f	class:json_spirit::Generator
output	json/json_spirit_writer_template.h	/^        void output( const String_type& s )$/;"	f	class:json_spirit::Generator
output	json/json_spirit_writer_template.h	/^        void output( const Value_type& value )$/;"	f	class:json_spirit::Generator
output_array_or_obj	json/json_spirit_writer_template.h	/^        void output_array_or_obj( const T& t, Char_type start_char, Char_type end_char )$/;"	f	class:json_spirit::Generator
output_int	json/json_spirit_writer_template.h	/^        void output_int( const Value_type& value )$/;"	f	class:json_spirit::Generator
pAllowInSafeMode	rpc.cpp	/^string pAllowInSafeMode[] =$/;"	v
pCallTable	rpc.cpp	/^pair<string, rpcfn_type> pCallTable[] =$/;"	v
pSHA256InitState	main.cpp	/^static const unsigned int pSHA256InitState[8] =$/;"	v	file:
pair_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
param1	net.h	/^    void* param1;$/;"	m	class:CRequestTracker
pbegin	serialize.h	/^    char* pbegin;$/;"	m	class:CFlatData
pchCommand	protocol.h	/^        char pchCommand[COMMAND_SIZE];$/;"	m	class:CMessageHeader
pchIPv4	protocol.cpp	/^static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };$/;"	v	file:
pchMessageStart	main.cpp	/^unsigned char pchMessageStart[4] = { 0xf9, 0xbe, 0xb4, 0xd9 };$/;"	v
pchMessageStart	protocol.h	/^        char pchMessageStart[sizeof(::pchMessageStart)];$/;"	m	class:CMessageHeader
pchReserved	protocol.h	/^        unsigned char pchReserved[12];$/;"	m	class:CAddress
pcs	util.h	/^    CCriticalSection* pcs;$/;"	m	class:CCriticalBlock
pcs	util.h	/^    CCriticalSection* pcs;$/;"	m	class:CTryCriticalBlock
pcstr	serialize.h	/^    const std::string* pcstr;$/;"	m	class:CFixedFieldString
pctx	bignum.h	/^    BN_CTX* pctx;$/;"	m	class:CAutoBN_CTX
pdb	db.h	/^    Db* pdb;$/;"	m	class:CDB
pend	serialize.h	/^    char* pend;$/;"	m	class:CFlatData
pframeMain	ui.cpp	/^CMainFrame* pframeMain = NULL;$/;"	v
phashBlock	main.h	/^    const uint256* phashBlock;$/;"	m	class:CBlockIndex
pindexBest	main.cpp	/^CBlockIndex* pindexBest = NULL;$/;"	v
pindexGenesisBlock	main.cpp	/^CBlockIndex* pindexGenesisBlock = NULL;$/;"	v
pindexLastGetBlocksBegin	net.h	/^    CBlockIndex* pindexLastGetBlocksBegin;$/;"	m	class:CNode
pkey	key.h	/^    EC_KEY* pkey;$/;"	m	class:CKey
pn	uint256.h	/^    unsigned int pn[WIDTH];$/;"	m	class:base_uint
pnSeed	net.cpp	/^unsigned int pnSeed[] =$/;"	v
pnext	main.h	/^    CBlockIndex* pnext;$/;"	m	class:CBlockIndex
pnodeLocalHost	net.cpp	/^static CNode* pnodeLocalHost = NULL;$/;"	v	file:
pointer	cryptopp/secblock.h	/^	typedef T * pointer;$/;"	t	class:AllocatorBase
pointer	serialize.h	/^    typedef typename base::pointer pointer;$/;"	t	struct:secure_allocator
pop_lock	util.cpp	/^static void pop_lock()$/;"	f	file:
popstack	script.cpp	/^static inline void popstack(vector<valtype>& stack)$/;"	f	file:
port	irc.cpp	/^    short port;$/;"	m	struct:ircaddr	file:
port	protocol.h	/^        unsigned short port;$/;"	m	class:CAddress
pos	main.h	/^    CDiskTxPos pos;$/;"	m	class:CTxIndex
posn_begin_	json/json_spirit_stream_reader.h	/^        Posn_iter_t posn_begin_, posn_end_;$/;"	m	class:json_spirit::Stream_reader_thrower
posn_end_	json/json_spirit_stream_reader.h	/^        Posn_iter_t posn_begin_, posn_end_;$/;"	m	class:json_spirit::Stream_reader_thrower
potential_deadlock_detected	util.cpp	/^static void potential_deadlock_detected(const std::pair<CCriticalSection*, CCriticalSection*>& mismatch, const LockStack& s1, const LockStack& s2)$/;"	f	file:
ppmutexOpenSSL	util.cpp	/^static boost::interprocess::interprocess_mutex** ppmutexOpenSSL;$/;"	v	file:
pprev	main.h	/^    CBlockIndex* pprev;$/;"	m	class:CBlockIndex
ppszTypeName	protocol.cpp	/^static const char* ppszTypeName[] =$/;"	v	file:
pretty_	json/json_spirit_writer_template.h	/^        bool pretty_;$/;"	m	class:json_spirit::Generator
prevout	main.h	/^    COutPoint prevout;$/;"	m	class:CTxIn
print	main.cpp	/^    void print() const$/;"	f	class:COrphan
print	main.h	/^    void print() const$/;"	f	class:CBlock
print	main.h	/^    void print() const$/;"	f	class:CBlockIndex
print	main.h	/^    void print() const$/;"	f	class:CDiskBlockIndex
print	main.h	/^    void print() const$/;"	f	class:CDiskTxPos
print	main.h	/^    void print() const$/;"	f	class:COutPoint
print	main.h	/^    void print() const$/;"	f	class:CTransaction
print	main.h	/^    void print() const$/;"	f	class:CTxIn
print	main.h	/^    void print() const$/;"	f	class:CTxOut
print	main.h	/^    void print() const$/;"	f	class:CUnsignedAlert
print	protocol.cpp	/^void CAddress::print() const$/;"	f	class:CAddress
print	protocol.cpp	/^void CInv::print() const$/;"	f	class:CInv
print	script.h	/^    void print() const$/;"	f	class:CScript
printf	rpc.cpp	11;"	d	file:
printf	rpc.cpp	25;"	d	file:
printf	util.h	48;"	d
pstr	serialize.h	/^    std::string* pstr;$/;"	m	class:CFixedFieldString
pszBase58	base58.h	/^static const char* pszBase58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";$/;"	v
pszSetDataDir	util.cpp	/^char pszSetDataDir[MAX_PATH] = "";$/;"	v
pszStatus	ui.h	/^    char pszStatus[10000];$/;"	m	class:CSendingDialog
pszSubVer	serialize.h	/^static const char* pszSubVer = "";$/;"	v
ptaskbaricon	ui.cpp	/^CMyTaskBarIcon* ptaskbaricon = NULL;$/;"	v
pthread_t	util.h	/^typedef HANDLE pthread_t;$/;"	t
ptx	main.cpp	/^    CTransaction* ptx;$/;"	m	class:COrphan	file:
ptx	main.h	/^    CTransaction* ptx;$/;"	m	class:CInPoint
push_int64	script.h	/^    CScript& push_int64(int64 n)$/;"	f	class:CScript
push_lock	util.cpp	/^static void push_lock(CCriticalSection* c, const CLockLocation& locklocation)$/;"	f	file:
push_uint64	script.h	/^    CScript& push_uint64(uint64 n)$/;"	f	class:CScript
pwallet	wallet.h	/^    CWallet* pwallet;$/;"	m	class:CReserveKey
pwallet	wallet.h	/^    const CWallet* pwallet;$/;"	m	class:CWalletTx
pwalletMain	test/test_bitcoin.cpp	/^CWallet* pwalletMain;$/;"	v
pwalletdbEncryption	wallet.h	/^    CWalletDB *pwalletdbEncryption;$/;"	m	class:CWallet
rdbuf	serialize.h	/^    CDataStream* rdbuf()         { return this; }$/;"	f	class:CDataStream
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( const std::string& s, Value& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( const std::string& s, mValue& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( const std::wstring& s, wValue& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( const std::wstring& s, wmValue& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( std::istream& is, Value& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( std::istream& is, mValue& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( std::string::const_iterator& begin, std::string::const_iterator end, Value& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( std::string::const_iterator& begin, std::string::const_iterator end, mValue& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( std::wistream& is, wValue& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( std::wistream& is, wmValue& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wValue& value )$/;"	f	class:json_spirit
read	json/json_spirit_reader.cpp	/^bool json_spirit::read( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wmValue& value )$/;"	f	class:json_spirit
read	rpc.cpp	/^    std::streamsize read(char* s, std::streamsize n)$/;"	f	class:SSLIOStreamDevice
read	serialize.h	/^    CAutoFile& read(char* pch, int nSize)$/;"	f	class:CAutoFile
read	serialize.h	/^    CDataStream& read(char* pch, int nSize)$/;"	f	class:CDataStream
read_next	json/json_spirit_stream_reader.h	/^        bool read_next( Value_type& value )$/;"	f	class:json_spirit::Stream_reader
read_next	json/json_spirit_stream_reader.h	/^        void read_next( Value_type& value )$/;"	f	class:json_spirit::Stream_reader_thrower
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( const std::string& s, Value& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( const std::string& s, mValue& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( const std::wstring& s, wValue& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( const std::wstring& s, wmValue& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( std::istream& is, Value& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( std::istream& is, mValue& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( std::string::const_iterator& begin, std::string::const_iterator end, Value& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( std::string::const_iterator& begin, std::string::const_iterator end, mValue& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( std::wistream& is, wValue& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( std::wistream& is, wmValue& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wValue& value )$/;"	f	class:json_spirit
read_or_throw	json/json_spirit_reader.cpp	/^void json_spirit::read_or_throw( std::wstring::const_iterator& begin, std::wstring::const_iterator end, wmValue& value )$/;"	f	class:json_spirit
read_range	json/json_spirit_reader_template.h	/^    bool read_range( Iter_type& begin, Iter_type end, Value_type& value )$/;"	f	namespace:json_spirit
read_range_or_throw	json/json_spirit_reader_template.h	/^    Iter_type read_range_or_throw( Iter_type begin, Iter_type end, Value_type& value )$/;"	f	namespace:json_spirit
read_stream	json/json_spirit_reader_template.h	/^    bool read_stream( Istream_type& is, Value_type& value )$/;"	f	namespace:json_spirit
read_stream_or_throw	json/json_spirit_reader_template.h	/^    void read_stream_or_throw( Istream_type& is, Value_type& value )$/;"	f	namespace:json_spirit
read_string	json/json_spirit_reader_template.h	/^    bool read_string( const String_type& s, Value_type& value )$/;"	f	namespace:json_spirit
read_string_or_throw	json/json_spirit_reader_template.h	/^    void read_string_or_throw( const String_type& s, Value_type& value )$/;"	f	namespace:json_spirit
real_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	e	enum:json_spirit::Value_type
reallocate	cryptopp/secblock.h	/^	pointer reallocate(T *p, size_type oldSize, size_type newSize, bool preserve)$/;"	f	class:AllocatorWithCleanup
reallocate	cryptopp/secblock.h	/^	pointer reallocate(pointer p, size_type oldSize, size_type newSize, bool preserve)$/;"	f	class:FixedSizeAllocatorWithCleanup
reason_	json/json_spirit_error_position.h	/^        std::string reason_;$/;"	m	struct:json_spirit::Error_position
rebind	cryptopp/secblock.h	/^    template <class U> struct rebind { typedef AllocatorWithCleanup<U, T_Align16> other; };$/;"	s	class:AllocatorWithCleanup
rebind	serialize.h	/^    template<typename _Other> struct rebind$/;"	s	struct:secure_allocator
reference	cryptopp/secblock.h	/^	typedef T & reference;$/;"	t	class:AllocatorBase
reference	serialize.h	/^    typedef typename base::reference reference;$/;"	t	struct:secure_allocator
reference	serialize.h	/^    typedef vector_type::reference        reference;$/;"	t	class:CDataStream
release	cryptopp/smartptr.h	/^	T* release()$/;"	f	class:member_ptr
release	serialize.h	/^    FILE* release()             { FILE* ret = file; file = NULL; return ret; }$/;"	f	class:CAutoFile
reserve	serialize.h	/^    void reserve(size_type n)                        { vch.reserve(n + nReadPos); }$/;"	f	class:CDataStream
reset	cryptopp/smartptr.h	/^template <class T> void member_ptr<T>::reset(T *p) {delete m_p; m_p = p;}$/;"	f	class:member_ptr
resize	cryptopp/secblock.h	/^	void resize(size_type newSize)$/;"	f	class:SecBlock
resize	cryptopp/smartptr.h	/^	void resize(size_t newSize)$/;"	f	class:vector_member_ptrs
resize	serialize.h	/^    void resize(size_type n, value_type c=0)         { vch.resize(n + nReadPos, c); }$/;"	f	class:CDataStream
reverse_iterator	serialize.h	/^    typedef vector_type::reverse_iterator reverse_iterator;$/;"	t	class:CDataStream
rfc1123Time	rpc.cpp	/^string rfc1123Time()$/;"	f
rotlFixed	cryptopp/misc.h	/^template <class T> inline T rotlFixed(T x, unsigned int y)$/;"	f
rotlFixed	cryptopp/misc.h	/^template<> inline byte rotlFixed<byte>(byte x, unsigned int y)$/;"	f
rotlFixed	cryptopp/misc.h	/^template<> inline word16 rotlFixed<word16>(word16 x, unsigned int y)$/;"	f
rotlFixed	cryptopp/misc.h	/^template<> inline word32 rotlFixed<word32>(word32 x, unsigned int y)$/;"	f
rotlFixed	cryptopp/misc.h	/^template<> inline word64 rotlFixed<word64>(word64 x, unsigned int y)$/;"	f
rotlMod	cryptopp/misc.h	/^template <class T> inline T rotlMod(T x, unsigned int y)$/;"	f
rotlMod	cryptopp/misc.h	/^template<> inline byte rotlMod<byte>(byte x, unsigned int y)$/;"	f
rotlMod	cryptopp/misc.h	/^template<> inline word16 rotlMod<word16>(word16 x, unsigned int y)$/;"	f
rotlMod	cryptopp/misc.h	/^template<> inline word32 rotlMod<word32>(word32 x, unsigned int y)$/;"	f
rotlMod	cryptopp/misc.h	/^template<> inline word64 rotlMod<word64>(word64 x, unsigned int y)$/;"	f
rotlVariable	cryptopp/misc.h	/^template <class T> inline T rotlVariable(T x, unsigned int y)$/;"	f
rotlVariable	cryptopp/misc.h	/^template<> inline byte rotlVariable<byte>(byte x, unsigned int y)$/;"	f
rotlVariable	cryptopp/misc.h	/^template<> inline word16 rotlVariable<word16>(word16 x, unsigned int y)$/;"	f
rotlVariable	cryptopp/misc.h	/^template<> inline word32 rotlVariable<word32>(word32 x, unsigned int y)$/;"	f
rotlVariable	cryptopp/misc.h	/^template<> inline word64 rotlVariable<word64>(word64 x, unsigned int y)$/;"	f
rotrFixed	cryptopp/misc.h	/^template <class T> inline T rotrFixed(T x, unsigned int y)$/;"	f
rotrFixed	cryptopp/misc.h	/^template<> inline byte rotrFixed<byte>(byte x, unsigned int y)$/;"	f
rotrFixed	cryptopp/misc.h	/^template<> inline word16 rotrFixed<word16>(word16 x, unsigned int y)$/;"	f
rotrFixed	cryptopp/misc.h	/^template<> inline word32 rotrFixed<word32>(word32 x, unsigned int y)$/;"	f
rotrFixed	cryptopp/misc.h	/^template<> inline word64 rotrFixed<word64>(word64 x, unsigned int y)$/;"	f
rotrMod	cryptopp/misc.h	/^template <class T> inline T rotrMod(T x, unsigned int y)$/;"	f
rotrMod	cryptopp/misc.h	/^template<> inline byte rotrMod<byte>(byte x, unsigned int y)$/;"	f
rotrMod	cryptopp/misc.h	/^template<> inline word16 rotrMod<word16>(word16 x, unsigned int y)$/;"	f
rotrMod	cryptopp/misc.h	/^template<> inline word32 rotrMod<word32>(word32 x, unsigned int y)$/;"	f
rotrMod	cryptopp/misc.h	/^template<> inline word64 rotrMod<word64>(word64 x, unsigned int y)$/;"	f
rotrVariable	cryptopp/misc.h	/^template <class T> inline T rotrVariable(T x, unsigned int y)$/;"	f
rotrVariable	cryptopp/misc.h	/^template<> inline byte rotrVariable<byte>(byte x, unsigned int y)$/;"	f
rotrVariable	cryptopp/misc.h	/^template<> inline word16 rotrVariable<word16>(word16 x, unsigned int y)$/;"	f
rotrVariable	cryptopp/misc.h	/^template<> inline word32 rotrVariable<word32>(word32 x, unsigned int y)$/;"	f
rotrVariable	cryptopp/misc.h	/^template<> inline word64 rotrVariable<word64>(word64 x, unsigned int y)$/;"	f
roundint	util.h	/^inline int roundint(double d)$/;"	f
roundint64	util.h	/^inline int64 roundint64(double d)$/;"	f
rpcfn_type	rpc.cpp	/^typedef Value(*rpcfn_type)(const Array& params, bool fHelp);$/;"	t	file:
s0	cryptopp/sha.cpp	484;"	d	file:
s0	cryptopp/sha.cpp	595;"	d	file:
s0	cryptopp/sha.cpp	867;"	d	file:
s1	cryptopp/sha.cpp	485;"	d	file:
s1	cryptopp/sha.cpp	596;"	d	file:
s1	cryptopp/sha.cpp	868;"	d	file:
s_jmpNoCPUID	cryptopp/cpu.cpp	/^static jmp_buf s_jmpNoCPUID;$/;"	v	file:
s_jmpNoSSE2	cryptopp/cpu.cpp	/^static jmp_buf s_jmpNoSSE2;$/;"	v	file:
scriptPubKey	main.h	/^    CScript scriptPubKey;$/;"	m	class:CTxOut
scriptSig	main.h	/^    CScript scriptSig;$/;"	m	class:CTxIn
secure_allocator	serialize.h	/^    secure_allocator() throw() {}$/;"	f	struct:secure_allocator
secure_allocator	serialize.h	/^    secure_allocator(const secure_allocator& a) throw() : base(a) {}$/;"	f	struct:secure_allocator
secure_allocator	serialize.h	/^    secure_allocator(const secure_allocator<U>& a) throw() : base(a) {}$/;"	f	struct:secure_allocator
secure_allocator	serialize.h	/^struct secure_allocator : public std::allocator<T>$/;"	s
sendfrom	rpc.cpp	/^Value sendfrom(const Array& params, bool fHelp)$/;"	f
sendmany	rpc.cpp	/^Value sendmany(const Array& params, bool fHelp)$/;"	f
sendtoaddress	rpc.cpp	/^Value sendtoaddress(const Array& params, bool fHelp)$/;"	f
ser_streamplaceholder	serialize.h	/^struct ser_streamplaceholder$/;"	s
setAddrKnown	net.h	/^    std::set<CAddress> setAddrKnown;$/;"	m	class:CNode
setCancel	main.h	/^    std::set<int> setCancel;$/;"	m	class:CUnsignedAlert
setDependsOn	main.cpp	/^    set<uint256> setDependsOn;$/;"	m	class:COrphan	file:
setInventoryKnown	net.h	/^    std::set<CInv> setInventoryKnown;$/;"	m	class:CNode
setKeyPool	wallet.h	/^    std::set<int64> setKeyPool;$/;"	m	class:CWallet
setKnown	net.h	/^    std::set<uint256> setKnown;$/;"	m	class:CNode
setSubVer	main.h	/^    std::set<std::string> setSubVer;  \/\/ empty matches all$/;"	m	class:CUnsignedAlert
setaccount	rpc.cpp	/^Value setaccount(const Array& params, bool fHelp)$/;"	f
setgenerate	rpc.cpp	/^Value setgenerate(const Array& params, bool fHelp)$/;"	f
setint64	bignum.h	/^    void setint64(int64 n)$/;"	f	class:CBigNum
setpwalletRegistered	main.cpp	/^set<CWallet*> setpwalletRegistered;$/;"	v
setstate	serialize.h	/^    void setstate(short bits, const char* psz)$/;"	f	class:CAutoFile
setstate	serialize.h	/^    void setstate(short bits, const char* psz)$/;"	f	class:CDataStream
settxfee	rpc.cpp	/^Value settxfee(const Array& params, bool fHelp)$/;"	f
setuint256	bignum.h	/^    void setuint256(uint256 n)$/;"	f	class:CBigNum
setuint64	bignum.h	/^    void setuint64(uint64 n)$/;"	f	class:CBigNum
setulong	bignum.h	/^    void setulong(unsigned long n)$/;"	f	class:CBigNum
setvch	bignum.h	/^    void setvch(const std::vector<unsigned char>& vch)$/;"	f	class:CBigNum
sign_multisig	test/script_tests.cpp	/^sign_multisig(CScript scriptPubKey, CKey key, CTransaction transaction)$/;"	f
sign_multisig	test/script_tests.cpp	/^sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transaction)$/;"	f
simple_ptr	cryptopp/smartptr.h	/^	simple_ptr() : m_p(NULL) {}$/;"	f	class:simple_ptr
simple_ptr	cryptopp/smartptr.h	/^template <class T> class simple_ptr$/;"	c
size	cryptopp/secblock.h	/^	size_type size() const {return m_size;}$/;"	f	class:SecBlock
size	cryptopp/smartptr.h	/^	size_t size() const {return this->m_size;}$/;"	f	class:vector_member_ptrs
size	serialize.h	/^    size_type size() const                           { return vch.size() - nReadPos; }$/;"	f	class:CDataStream
size	uint256.h	/^    unsigned int size()$/;"	f	class:base_uint
size_type	cryptopp/secblock.h	/^	typedef size_t size_type;$/;"	t	class:AllocatorBase
size_type	cryptopp/secblock.h	/^	typedef typename A::size_type size_type;$/;"	t	class:SecBlock
size_type	serialize.h	/^    typedef typename base::size_type size_type;$/;"	t	struct:secure_allocator
size_type	serialize.h	/^    typedef vector_type::size_type        size_type;$/;"	t	class:CDataStream
skipspaces	util.h	/^void skipspaces(T& it)$/;"	f
snprintf	util.h	51;"	d
snprintf	util.h	53;"	d
socklen_t	util.h	/^typedef int socklen_t;$/;"	t
sourceFile	util.cpp	/^    std::string sourceFile;$/;"	m	struct:CLockLocation	file:
sourceLine	util.cpp	/^    int sourceLine;$/;"	m	struct:CLockLocation	file:
space	json/json_spirit_writer_template.h	/^        void space()$/;"	f	class:json_spirit::Generator
spirit_namespace	json/json_spirit_reader_template.h	24;"	d
spirit_namespace	json/json_spirit_reader_template.h	31;"	d
stack_	json/json_spirit_reader_template.h	/^        std::vector< Value_type* > stack_;   \/\/ previous child objects and arrays$/;"	m	class:json_spirit::Semantic_actions
stacktop	script.cpp	63;"	d	file:
start	json/json_spirit_reader_template.h	/^            const spirit_namespace::rule< ScannerT >& start() const { return json_; }$/;"	f	class:json_spirit::Json_grammer::definition
start	ui.h	/^    wxDateTime start;$/;"	m	class:CSendingDialog
state	serialize.h	/^    short state;$/;"	m	class:CAutoFile
state	serialize.h	/^    short state;$/;"	m	class:CDataStream
stop	rpc.cpp	/^Value stop(const Array& params, bool fHelp)$/;"	f
str	serialize.h	/^    std::string str() const$/;"	f	class:CDataStream
strAccount	wallet.h	/^    std::string strAccount;$/;"	m	class:CAccountingEntry
strComment	main.h	/^    std::string strComment;$/;"	m	class:CUnsignedAlert
strComment	wallet.h	/^    std::string strComment;$/;"	m	class:CAccountingEntry
strComment	wallet.h	/^    std::string strComment;$/;"	m	class:CWalletKey
strDNSSeed	net.cpp	/^static const char *strDNSSeed[] = {$/;"	v	file:
strFile	db.h	/^    std::string strFile;$/;"	m	class:CDB
strFromAccount	wallet.h	/^    std::string strFromAccount;$/;"	m	class:CWalletTx
strFromSave	ui.h	/^    std::string strFromSave;$/;"	m	class:CSendDialog
strMessageSave	ui.h	/^    std::string strMessageSave;$/;"	m	class:CSendDialog
strMiscWarning	util.cpp	/^string strMiscWarning;$/;"	v
strOtherAccount	wallet.h	/^    std::string strOtherAccount;$/;"	m	class:CAccountingEntry
strReserved	main.h	/^    std::string strReserved;$/;"	m	class:CUnsignedAlert
strStatusBar	main.h	/^    std::string strStatusBar;$/;"	m	class:CUnsignedAlert
strSubVer	net.h	/^    std::string strSubVer;$/;"	m	class:CNode
strWalletFile	wallet.h	/^    std::string strWalletFile;$/;"	m	class:CWallet
str_type	json/json_spirit_value.h	/^    enum Value_type{ obj_type, array_type, str_type, bool_type, int_type, real_type, null_type };$/;"	e	enum:json_spirit::Value_type
stream	rpc.cpp	/^    SSLStream& stream;$/;"	m	class:SSLIOStreamDevice	file:
string_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
strlcat	strlcpy.h	/^inline size_t strlcat(char *dst, const char *src, size_t siz)$/;"	f
strlcpy	strlcpy.h	/^inline size_t strlcpy(char *dst, const char *src, size_t siz)$/;"	f
strlwr	util.h	112;"	d
strprintf	util.cpp	/^string strprintf(const char* format, ...)$/;"	f
substitute_esc_chars	json/json_spirit_reader_template.h	/^    String_type substitute_esc_chars( typename String_type::const_iterator begin, $/;"	f	namespace:json_spirit
swap	cryptopp/secblock.h	/^	void swap(SecBlock<T, A> &b)$/;"	f	class:SecBlock
swap	cryptopp/secblock.h	/^inline void swap(CryptoPP::SecBlock<T, A> &a, CryptoPP::SecBlock<T, A> &b)$/;"	f
tallyitem	rpc.cpp	/^    tallyitem()$/;"	f	struct:tallyitem
tallyitem	rpc.cpp	/^struct tallyitem$/;"	s	file:
throw_error	json/json_spirit_reader_template.h	/^    void throw_error( Iter_type i, const std::string& reason )$/;"	f	namespace:json_spirit
throw_error	json/json_spirit_reader_template.h	/^    void throw_error( spirit_namespace::position_iterator< Iter_type > i, const std::string& reason )$/;"	f	namespace:json_spirit
throw_not_array	json/json_spirit_reader_template.h	/^        static void throw_not_array( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Json_grammer
throw_not_colon	json/json_spirit_reader_template.h	/^        static void throw_not_colon( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Json_grammer
throw_not_object	json/json_spirit_reader_template.h	/^        static void throw_not_object( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Json_grammer
throw_not_pair	json/json_spirit_reader_template.h	/^        static void throw_not_pair( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Json_grammer
throw_not_string	json/json_spirit_reader_template.h	/^        static void throw_not_string( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Json_grammer
throw_not_value	json/json_spirit_reader_template.h	/^        static void throw_not_value( Iter_type begin, Iter_type end )$/;"	f	class:json_spirit::Json_grammer
to_hex_char	json/json_spirit_writer_template.h	/^    inline char to_hex_char( unsigned int c )$/;"	f	namespace:json_spirit
to_str	json/json_spirit_value.h	/^    String_type to_str( const char* c_str )$/;"	f	namespace:json_spirit
tss_cleanup_implemented	util.cpp	/^extern "C" void tss_cleanup_implemented() { }$/;"	f
type	json/json_spirit_value.h	/^    Value_type Value_impl< Config >::type() const$/;"	f	class:json_spirit::Value_impl
type	protocol.h	/^        int type;$/;"	m	class:CInv
type_	json/json_spirit_value.h	/^        Value_type type_;$/;"	m	class:json_spirit::Value_impl
uint160	uint256.h	/^    explicit uint160(const std::string& str)$/;"	f	class:uint160
uint160	uint256.h	/^    explicit uint160(const std::vector<unsigned char>& vch)$/;"	f	class:uint160
uint160	uint256.h	/^    uint160()$/;"	f	class:uint160
uint160	uint256.h	/^    uint160(const basetype& b)$/;"	f	class:uint160
uint160	uint256.h	/^    uint160(uint64 b)$/;"	f	class:uint160
uint160	uint256.h	/^class uint160 : public base_uint160$/;"	c
uint256	uint256.h	/^    explicit uint256(const std::string& str)$/;"	f	class:uint256
uint256	uint256.h	/^    explicit uint256(const std::vector<unsigned char>& vch)$/;"	f	class:uint256
uint256	uint256.h	/^    uint256()$/;"	f	class:uint256
uint256	uint256.h	/^    uint256(const basetype& b)$/;"	f	class:uint256
uint256	uint256.h	/^    uint256(uint64 b)$/;"	f	class:uint256
uint256	uint256.h	/^class uint256 : public base_uint256$/;"	c
uint64	serialize.h	/^typedef unsigned __int64  uint64;$/;"	t
uint64	serialize.h	/^typedef unsigned long long  uint64;$/;"	t
uint64	uint256.h	/^typedef unsigned __int64  uint64;$/;"	t
uint64	uint256.h	/^typedef unsigned long long  uint64;$/;"	t
uint64	util.h	/^typedef unsigned __int64  uint64;$/;"	t
uint64	util.h	/^typedef unsigned long long  uint64;$/;"	t
uint64_p	json/json_spirit_reader_template.h	/^    const spirit_namespace::uint_parser< boost::uint64_t > uint64_p = spirit_namespace::uint_parser< boost::uint64_t >();$/;"	m	namespace:json_spirit
unicode_str_to_char	json/json_spirit_reader_template.h	/^    Char_type unicode_str_to_char( Iter_type& begin )$/;"	f	namespace:json_spirit
unlink	util.h	96;"	d
vAddrToSend	net.h	/^    std::vector<CAddress> vAddrToSend;$/;"	m	class:CNode
vHave	main.h	/^    std::vector<uint256> vHave;$/;"	m	class:CBlockLocator
vInventoryToSend	net.h	/^    std::vector<CInv> vInventoryToSend;$/;"	m	class:CNode
vMasterKey	keystore.h	/^    CKeyingMaterial vMasterKey;$/;"	m	class:CCryptoKeyStore
vMerkleBranch	main.h	/^    std::vector<uint256> vMerkleBranch;$/;"	m	class:CMerkleTx
vMerkleTree	main.h	/^    mutable std::vector<uint256> vMerkleTree;$/;"	m	class:CBlock
vNodes	net.cpp	/^vector<CNode*> vNodes;$/;"	v
vOrderForm	wallet.h	/^    std::vector<std::pair<std::string, std::string> > vOrderForm;$/;"	m	class:CWalletTx
vRecv	net.h	/^    CDataStream vRecv;$/;"	m	class:CNode
vRelayExpiration	net.cpp	/^deque<pair<int64, CInv> > vRelayExpiration;$/;"	v
vSend	net.h	/^    CDataStream vSend;$/;"	m	class:CNode
vSpent	main.h	/^    std::vector<CDiskTxPos> vSpent;$/;"	m	class:CTxIndex
vTxn	db.h	/^    std::vector<DbTxn*> vTxn;$/;"	m	class:CDB
vWalletUpdated	wallet.h	/^    std::vector<uint256> vWalletUpdated;$/;"	m	class:CWallet
v_	json/json_spirit_value.h	/^        Variant v_;$/;"	m	class:json_spirit::Value_impl
validateaddress	rpc.cpp	/^Value validateaddress(const Array& params, bool fHelp)$/;"	f
valtype	script.cpp	/^typedef vector<unsigned char> valtype;$/;"	t	file:
value_	json/json_spirit_reader_template.h	/^            spirit_namespace::rule< ScannerT > json_, object_, members_, pair_, array_, elements_, value_, string_, number_;$/;"	m	class:json_spirit::Json_grammer::definition
value_	json/json_spirit_reader_template.h	/^        Value_type& value_;             \/\/ this is the object or array that is being created$/;"	m	class:json_spirit::Semantic_actions
value_	json/json_spirit_value.h	/^        Value_type value_;$/;"	m	struct:json_spirit::Pair_impl
value_ptr	cryptopp/smartptr.h	/^	value_ptr(T *p = NULL) : member_ptr<T>(p) {}$/;"	f	class:value_ptr
value_ptr	cryptopp/smartptr.h	/^	value_ptr(const T &obj) : member_ptr<T>(new T(obj)) {}$/;"	f	class:value_ptr
value_ptr	cryptopp/smartptr.h	/^	value_ptr(const value_ptr<T>& rhs)$/;"	f	class:value_ptr
value_ptr	cryptopp/smartptr.h	/^template<class T> class value_ptr : public member_ptr<T>$/;"	c
value_type	cryptopp/secblock.h	/^	typedef T value_type;$/;"	t	class:AllocatorBase
value_type	cryptopp/secblock.h	/^	typedef typename A::value_type value_type;$/;"	t	class:SecBlock
value_type	serialize.h	/^    typedef typename base::value_type value_type;$/;"	t	struct:secure_allocator
value_type	serialize.h	/^    typedef vector_type::value_type       value_type;$/;"	t	class:CDataStream
vch	serialize.h	/^    vector_type vch;$/;"	m	class:CDataStream
vchCryptedKey	crypter.h	/^    std::vector<unsigned char> vchCryptedKey;$/;"	m	class:CMasterKey
vchData	base58.h	/^    std::vector<unsigned char> vchData;$/;"	m	class:CBase58Data
vchDefaultKey	wallet.h	/^    std::vector<unsigned char> vchDefaultKey;$/;"	m	class:CWallet
vchMsg	main.h	/^    std::vector<unsigned char> vchMsg;$/;"	m	class:CAlert
vchOtherDerivationParameters	crypter.h	/^    std::vector<unsigned char> vchOtherDerivationParameters;$/;"	m	class:CMasterKey
vchPrivKey	wallet.h	/^    CPrivKey vchPrivKey;$/;"	m	class:CWalletKey
vchPubKey	db.h	/^    std::vector<unsigned char> vchPubKey;$/;"	m	class:CKeyPool
vchPubKey	wallet.h	/^    std::vector<unsigned char> vchPubKey;$/;"	m	class:CAccount
vchPubKey	wallet.h	/^    std::vector<unsigned char> vchPubKey;$/;"	m	class:CReserveKey
vchSalt	crypter.h	/^    std::vector<unsigned char> vchSalt;$/;"	m	class:CMasterKey
vchSig	main.h	/^    std::vector<unsigned char> vchSig;$/;"	m	class:CAlert
vector_member_ptrs	cryptopp/smartptr.h	/^	vector_member_ptrs(size_t size=0)$/;"	f	class:vector_member_ptrs
vector_member_ptrs	cryptopp/smartptr.h	/^template <class T> class vector_member_ptrs$/;"	c
vector_type	serialize.h	/^    typedef std::vector<char, secure_allocator<char> > vector_type;$/;"	t	class:CDataStream
vfSpent	wallet.h	/^    std::vector<char> vfSpent;$/;"	m	class:CWalletTx
vfSubscribe	net.h	/^    std::vector<char> vfSubscribe;$/;"	m	class:CNode
vin	main.h	/^    std::vector<CTxIn> vin;$/;"	m	class:CTransaction
vnThreadsRunning	net.cpp	/^array<int, 10> vnThreadsRunning;$/;"	v
vout	main.h	/^    std::vector<CTxOut> vout;$/;"	m	class:CTransaction
vtx	main.h	/^    std::vector<CTransaction> vtx;$/;"	m	class:CBlock
vtxPrev	wallet.h	/^    std::vector<CMerkleTx> vtxPrev;$/;"	m	class:CWalletTx
wArray	json/json_spirit_value.h	/^    typedef wConfig::Array_type  wArray;$/;"	t	namespace:json_spirit
wConfig	json/json_spirit_value.h	/^    typedef Config_vector< std::wstring > wConfig;$/;"	t	namespace:json_spirit
wMapped_obj	json/json_spirit_utils.h	/^    typedef std::map< std::wstring, wValue > wMapped_obj;$/;"	t	namespace:json_spirit
wObject	json/json_spirit_value.h	/^    typedef wConfig::Object_type wObject;$/;"	t	namespace:json_spirit
wPair	json/json_spirit_value.h	/^    typedef wConfig::Pair_type   wPair;$/;"	t	namespace:json_spirit
wValue	json/json_spirit_value.h	/^    typedef wConfig::Value_type  wValue;$/;"	t	namespace:json_spirit
walletlock	rpc.cpp	/^Value walletlock(const Array& params, bool fHelp)$/;"	f
walletpassphrase	rpc.cpp	/^Value walletpassphrase(const Array& params, bool fHelp)$/;"	f
walletpassphrasechange	rpc.cpp	/^Value walletpassphrasechange(const Array& params, bool fHelp)$/;"	f
what	cryptopp/cryptlib.h	/^	const char *what() const throw() {return (m_what.c_str());}$/;"	f	class:Exception
wmArray	json/json_spirit_value.h	/^    typedef wmConfig::Array_type  wmArray;$/;"	t	namespace:json_spirit
wmConfig	json/json_spirit_value.h	/^    typedef Config_map< std::wstring > wmConfig;$/;"	t	namespace:json_spirit
wmObject	json/json_spirit_value.h	/^    typedef wmConfig::Object_type wmObject;$/;"	t	namespace:json_spirit
wmValue	json/json_spirit_value.h	/^    typedef wmConfig::Value_type  wmValue;$/;"	t	namespace:json_spirit
word	cryptopp/config.h	/^			typedef word32 word;$/;"	t
word	cryptopp/config.h	/^			typedef word64 word;$/;"	t
word	cryptopp/config.h	/^		typedef word32 word;$/;"	t
word	cryptopp/config.h	/^	typedef word64 word;$/;"	t
word128	cryptopp/config.h	/^			typedef __uint128_t word128;$/;"	t
word16	cryptopp/config.h	/^typedef unsigned short word16;$/;"	t
word32	cryptopp/config.h	/^typedef unsigned int word32;$/;"	t
word64	cryptopp/config.h	/^	typedef unsigned __int64 word64;$/;"	t
word64	cryptopp/config.h	/^	typedef unsigned long long word64;$/;"	t
write	json/json_spirit_writer.cpp	/^std::string json_spirit::write( const Value& value )$/;"	f	class:json_spirit
write	json/json_spirit_writer.cpp	/^std::string json_spirit::write( const mValue& value )$/;"	f	class:json_spirit
write	json/json_spirit_writer.cpp	/^std::wstring json_spirit::write( const wValue&  value )$/;"	f	class:json_spirit
write	json/json_spirit_writer.cpp	/^std::wstring json_spirit::write( const wmValue&  value )$/;"	f	class:json_spirit
write	json/json_spirit_writer.cpp	/^void json_spirit::write( const Value& value, std::ostream& os )$/;"	f	class:json_spirit
write	json/json_spirit_writer.cpp	/^void json_spirit::write( const mValue& value, std::ostream& os )$/;"	f	class:json_spirit
write	json/json_spirit_writer.cpp	/^void json_spirit::write( const wValue& value, std::wostream& os )$/;"	f	class:json_spirit
write	json/json_spirit_writer.cpp	/^void json_spirit::write( const wmValue& value, std::wostream& os )$/;"	f	class:json_spirit
write	rpc.cpp	/^    std::streamsize write(const char* s, std::streamsize n)$/;"	f	class:SSLIOStreamDevice
write	serialize.h	/^    CAutoFile& write(const char* pch, int nSize)$/;"	f	class:CAutoFile
write	serialize.h	/^    CDataStream& write(const char* pch, int nSize)$/;"	f	class:CDataStream
write_formatted	json/json_spirit_writer.cpp	/^std::string json_spirit::write_formatted( const Value& value )$/;"	f	class:json_spirit
write_formatted	json/json_spirit_writer.cpp	/^std::string json_spirit::write_formatted( const mValue& value )$/;"	f	class:json_spirit
write_formatted	json/json_spirit_writer.cpp	/^std::wstring json_spirit::write_formatted( const wValue&  value )$/;"	f	class:json_spirit
write_formatted	json/json_spirit_writer.cpp	/^std::wstring json_spirit::write_formatted( const wmValue&  value )$/;"	f	class:json_spirit
write_formatted	json/json_spirit_writer.cpp	/^void json_spirit::write_formatted( const Value& value, std::ostream& os )$/;"	f	class:json_spirit
write_formatted	json/json_spirit_writer.cpp	/^void json_spirit::write_formatted( const mValue& value, std::ostream& os )$/;"	f	class:json_spirit
write_formatted	json/json_spirit_writer.cpp	/^void json_spirit::write_formatted( const wValue& value, std::wostream& os )$/;"	f	class:json_spirit
write_formatted	json/json_spirit_writer.cpp	/^void json_spirit::write_formatted( const wmValue& value, std::wostream& os )$/;"	f	class:json_spirit
write_stream	json/json_spirit_writer_template.h	/^    void write_stream( const Value_type& value, Ostream_type& os, bool pretty )$/;"	f	namespace:json_spirit
write_string	json/json_spirit_writer_template.h	/^    typename Value_type::String_type write_string( const Value_type& value, bool pretty )$/;"	f	namespace:json_spirit
wtx	ui.h	/^    CWalletTx wtx;$/;"	m	class:CSendingDialog
wtx	ui.h	/^    CWalletTx wtx;$/;"	m	class:CTxDetailsDialog
wxAPPLY	noui.h	18;"	d
wxBACKWARD	noui.h	34;"	d
wxCANCEL	noui.h	17;"	d
wxCANCEL_DEFAULT	noui.h	23;"	d
wxCLOSE	noui.h	19;"	d
wxFORWARD	noui.h	33;"	d
wxGetTranslation	util.cpp	/^const char* wxGetTranslation(const char* pszEnglish)$/;"	f
wxHELP	noui.h	36;"	d
wxICON_ASTERISK	noui.h	31;"	d
wxICON_ERROR	noui.h	27;"	d
wxICON_EXCLAMATION	noui.h	24;"	d
wxICON_HAND	noui.h	25;"	d
wxICON_INFORMATION	noui.h	29;"	d
wxICON_MASK	noui.h	32;"	d
wxICON_QUESTION	noui.h	28;"	d
wxICON_STOP	noui.h	30;"	d
wxICON_WARNING	noui.h	26;"	d
wxID_BUTTONADDRESSBOOK	uibase.h	53;"	d
wxID_BUTTONCOPY	uibase.h	47;"	d
wxID_BUTTONDELETE	uibase.h	62;"	d
wxID_BUTTONEDIT	uibase.h	63;"	d
wxID_BUTTONNEW	uibase.h	46;"	d
wxID_BUTTONPASTE	uibase.h	52;"	d
wxID_BUTTONRECEIVE	uibase.h	44;"	d
wxID_BUTTONRENAME	uibase.h	57;"	d
wxID_BUTTONSEND	uibase.h	43;"	d
wxID_CHOICETRANSFERTYPE	uibase.h	55;"	d
wxID_LISTCTRL	uibase.h	56;"	d
wxID_LISTCTRLRECEIVING	uibase.h	61;"	d
wxID_LISTCTRLSENDING	uibase.h	59;"	d
wxID_MAINFRAME	uibase.h	42;"	d
wxID_PANELRECEIVING	uibase.h	60;"	d
wxID_PANELSENDING	uibase.h	58;"	d
wxID_PROXYIP	uibase.h	48;"	d
wxID_PROXYPORT	uibase.h	49;"	d
wxID_TEXTCTRL	uibase.h	64;"	d
wxID_TEXTCTRLADDRESS	uibase.h	45;"	d
wxID_TEXTCTRLAMOUNT	uibase.h	54;"	d
wxID_TEXTCTRLPAYTO	uibase.h	51;"	d
wxID_TRANSACTIONFEE	uibase.h	50;"	d
wxMORE	noui.h	37;"	d
wxMessageBox	noui.h	46;"	d
wxMessageBox	ui.h	41;"	d
wxNO	noui.h	15;"	d
wxNO_DEFAULT	noui.h	22;"	d
wxOK	noui.h	14;"	d
wxOK_DEFAULT	noui.h	20;"	d
wxRESET	noui.h	35;"	d
wxSETUP	noui.h	38;"	d
wxWindow	noui.h	/^typedef void wxWindow;$/;"	t
wxYES	noui.h	13;"	d
wxYES_DEFAULT	noui.h	21;"	d
wxYES_NO	noui.h	16;"	d
~ASN1Object	cryptopp/cryptlib.h	/^	virtual ~ASN1Object() {}$/;"	f	class:ASN1Object
~CAboutDialogBase	uibase.cpp	/^CAboutDialogBase::~CAboutDialogBase()$/;"	f	class:CAboutDialogBase
~CAddressBookDialogBase	uibase.cpp	/^CAddressBookDialogBase::~CAddressBookDialogBase()$/;"	f	class:CAddressBookDialogBase
~CAutoBN_CTX	bignum.h	/^    ~CAutoBN_CTX()$/;"	f	class:CAutoBN_CTX
~CAutoFile	serialize.h	/^    ~CAutoFile()$/;"	f	class:CAutoFile
~CBase58Data	base58.h	/^    ~CBase58Data()$/;"	f	class:CBase58Data
~CBigNum	bignum.h	/^    ~CBigNum()$/;"	f	class:CBigNum
~CCriticalBlock	util.h	/^    ~CCriticalBlock()$/;"	f	class:CCriticalBlock
~CCriticalSection	util.h	/^    ~CCriticalSection() { }$/;"	f	class:CCriticalSection
~CCrypter	crypter.h	/^    ~CCrypter()$/;"	f	class:CCrypter
~CDB	db.h	/^    ~CDB() { Close(); }$/;"	f	class:CDB
~CDBInit	db.cpp	/^    ~CDBInit()$/;"	f	class:CDBInit
~CGetTextFromUserDialogBase	uibase.cpp	/^CGetTextFromUserDialogBase::~CGetTextFromUserDialogBase()$/;"	f	class:CGetTextFromUserDialogBase
~CInit	util.cpp	/^    ~CInit()$/;"	f	class:CInit
~CKey	key.h	/^    ~CKey()$/;"	f	class:CKey
~CMainFrame	ui.cpp	/^CMainFrame::~CMainFrame()$/;"	f	class:CMainFrame
~CMainFrameBase	uibase.cpp	/^CMainFrameBase::~CMainFrameBase()$/;"	f	class:CMainFrameBase
~CMyApp	ui.cpp	/^    ~CMyApp(){};$/;"	f	class:CMyApp
~CNetCleanup	net.cpp	/^    ~CNetCleanup()$/;"	f	class:CNetCleanup
~CNode	net.h	/^    ~CNode()$/;"	f	class:CNode
~COptionsDialogBase	uibase.cpp	/^COptionsDialogBase::~COptionsDialogBase()$/;"	f	class:COptionsDialogBase
~CReserveKey	wallet.h	/^    ~CReserveKey()$/;"	f	class:CReserveKey
~CSendDialogBase	uibase.cpp	/^CSendDialogBase::~CSendDialogBase()$/;"	f	class:CSendDialogBase
~CSendingDialog	ui.cpp	/^CSendingDialog::~CSendingDialog()$/;"	f	class:CSendingDialog
~CSendingDialogBase	uibase.cpp	/^CSendingDialogBase::~CSendingDialogBase()$/;"	f	class:CSendingDialogBase
~CTryCriticalBlock	util.h	/^    ~CTryCriticalBlock()$/;"	f	class:CTryCriticalBlock
~CTxDetailsDialogBase	uibase.cpp	/^CTxDetailsDialogBase::~CTxDetailsDialogBase()$/;"	f	class:CTxDetailsDialogBase
~CYourAddressDialogBase	uibase.cpp	/^CYourAddressDialogBase::~CYourAddressDialogBase()$/;"	f	class:CYourAddressDialogBase
~Clonable	cryptopp/cryptlib.h	/^	virtual ~Clonable() {}$/;"	f	class:Clonable
~Exception	cryptopp/cryptlib.h	/^	virtual ~Exception() throw() {}$/;"	f	class:Exception
~NameValuePairs	cryptopp/cryptlib.h	/^	virtual ~NameValuePairs() {}$/;"	f	class:NameValuePairs
~OS_Error	cryptopp/cryptlib.h	/^	~OS_Error() throw() {}$/;"	f	class:OS_Error
~PK_CryptoSystem	cryptopp/cryptlib.h	/^	virtual ~PK_CryptoSystem() {}$/;"	f	class:PK_CryptoSystem
~PK_SignatureScheme	cryptopp/cryptlib.h	/^	virtual ~PK_SignatureScheme() {}$/;"	f	class:PK_SignatureScheme
~SecBlock	cryptopp/secblock.h	/^	~SecBlock()$/;"	f	class:SecBlock
~SimpleKeyingInterface	cryptopp/cryptlib.h	/^	virtual ~SimpleKeyingInterface() {}$/;"	f	class:SimpleKeyingInterface
~Waitable	cryptopp/cryptlib.h	/^	virtual ~Waitable() {}$/;"	f	class:Waitable
~counted_ptr	cryptopp/smartptr.h	/^template <class T> counted_ptr<T>::~counted_ptr()$/;"	f	class:counted_ptr
~member_ptr	cryptopp/smartptr.h	/^template <class T> member_ptr<T>::~member_ptr() {delete m_p;}$/;"	f	class:member_ptr
~secure_allocator	serialize.h	/^    ~secure_allocator() throw() {}$/;"	f	struct:secure_allocator
~simple_ptr	cryptopp/smartptr.h	/^	~simple_ptr() {delete m_p;}$/;"	f	class:simple_ptr
~vector_member_ptrs	cryptopp/smartptr.h	/^	~vector_member_ptrs()$/;"	f	class:vector_member_ptrs
